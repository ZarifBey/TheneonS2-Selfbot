#ÿ®Ÿêÿ≥ŸíŸÖŸê ÿßŸÑŸÑŸáŸê ÿßŸÑÿ±ŸëŸéÿ≠ŸíŸÖŸÜŸê ÿßŸÑÿ±ŸëŸéÿ≠ŸêŸäŸÖŸê
# ‚ò¨üáπüá∑ T·¥ú Ä·¥ã·¥á è T·¥á·¥Ä·¥ç üáπüá∑‚ò¨ #
from linepy  import *
#from help import *
from liff.ttypes import LiffChatContext, LiffContext, LiffSquareChatContext, LiffNoneContext, LiffViewRequest
from akad.ttypes import Message
from akad.ttypes import ContentType as Type
from akad.ttypes import TalkException
from datetime import datetime, timedelta
from time import sleep
from bs4 import BeautifulSoup as bSoup
from bs4 import BeautifulSoup
from humanfriendly import format_timespan, format_size, format_number, format_length
from gtts import gTTS
from threading import Thread
from io import StringIO
from multiprocessing import Pool
from googletrans import Translator
from urllib.parse import urlencode
from wikiapi import WikiApi
from tmp.MySplit import *
from tmp.Instagram import InstagramScraper
from py_translator import TEXTLIB
from zalgo import zalgoname
from random import randint
from shutil import copyfile
from youtube_dl import YoutubeDL
from instagram import Instagram
from Naked.toolshed.shell import execute_js
import subprocess, youtube_dl, humanize, traceback
import subprocess as cmd
import platform
import requests, json
import time, random, sys, json, null, pafy, codecs, html5lib ,shutil ,threading, glob, re, base64, string, os, requests, six, ast, pytz, wikipedia, urllib, urllib.parse, atexit, asyncio, traceback
_session = requests.session()
try:
    import urllib.request as urllib2
except ImportError:
    import urllib2
#=====================================================================

#=====================================================================

try:
    with open('token.txt','r') as tokens:
        token = tokens.read()
    print(str(token))
except Exception as e:
    zarifoglu = LINE()
zarifoglu = LINE(token,appName="G√ºncel appname kullan - Bana sorma")
Channel(zarifoglu, "1341209850").getChannelResult().channelAccessToken
Channel(zarifoglu, "1597127494").getChannelResult().channelAccessToken

#=====================================================================
waitOpen = codecs.open("ZarifKing/wait.json","r","utf-8")
settingsOpen = codecs.open("ZarifKing/temp.json","r","utf-8")
imagesOpen = codecs.open("ZarifKing/image.json","r","utf-8")
stickersOpen = codecs.open("ZarifKing/sticker.json","r","utf-8")
seensOpen = codecs.open("ZarifKing/lastseen.json","r","utf-8")
contactOpen = codecs.open("ZarifKing/contact.json","r","utf-8")
stickers1Open = codecs.open("ZarifKing/sticker1.json","r","utf-8")
stickers2Open = codecs.open("ZarifKing/sticker2.json","r","utf-8")
anumuOpen = codecs.open("ZarifKing/stickertemp.json","r","utf-8")
blockInviteOpen = codecs.open("ZarifKing/blockinvite.json","r","utf-8")
protectKickOpen = codecs.open("ZarifKing/protectkick.json","r","utf-8")
groupNameOpen = codecs.open("ZarifKing/groupname.json","r","utf-8")
groupQrOpen = codecs.open("ZarifKing/groupqr.json","r","utf-8")
textaddOpen = codecs.open("ZarifKing/text.json","r","utf-8")
notagOpen = codecs.open("ZarifKing/notag.json","r","utf-8")
admin = codecs.open("ZarifKing/admin.json","r","utf-8")
#=====================================================================
zarifogluProfile = zarifoglu.getProfile()
zarifogluSettings = zarifoglu.getSettings()
zarifogluPoll = OEPoll(zarifoglu)
zarifogluStart = time.time()
zarifogluMID = zarifoglu.getProfile().mid
loop = asyncio.get_event_loop()
myAdmin = ["u5d854616fc8ea66893e7a85b7cb0b9f1"]
PremiumBoss = ["...","u5d854616fc8ea66893e7a85b7cb0b9f1"]
botStart = time.time()
msg_image={}
msg_video={}
msg_sticker={}
msgdikirim = {}
msgditerima = {}
unsendchat = {}
msg_dict = {}
temp_flood = {}
groupName = {}
groupImage = {}
kuciyose = {}
wbanlist = []
wcimage = False
wait = json.load(waitOpen)
settings = json.load(settingsOpen)
images = json.load(imagesOpen)
stickers = json.load(stickersOpen)
seens = json.load(seensOpen)
contacts = json.load(contactOpen)
stickers1 = json.load(stickers1Open)
stickers2 = json.load(stickers2Open)
anumu = json.load(anumuOpen)
blockInvite = json.load(blockInviteOpen)
protectKick = json.load(protectKickOpen)
groupName = json.load(groupNameOpen)
groupQr = json.load(groupQrOpen)
textsadd = json.load(textaddOpen)
notag = json.load(notagOpen)
mulai = time.time()
admin = wait["admin"]
# BERANTAKAN

undang = {
    "invite": False,
}

mcroom = {
    "leaveMC": False,
}

selam = {
    "selam": False,
}

blocked = {
    "autoBlock": False,
    "pesanya": "„Äå AutoBlock „Äç\nSorry, I use Auto block ^^",
}

wmin = {
    "wMessage": False,
    "textnya": "Enjoying in this group",
}

wmin2 = {
    "wMessage": False,
    "textnya": "Ho≈ügeldiniz, ",
}

lvin = {
    "lMessage": False,
    "textnya": "G√ºle g√ºle",
}
jointag = {
    "autoJoin": False,
    "jointag": "Davet i√ßin te≈üekk√ºr ederim.",
}
mimikin = {
    "mimic": {
        "copy": False,
        "status": False,
        "target": {
            "ub4974c6489c969402713a974b568ee9e": True
        }
    },
}

liffnya = {
        "ttt": "line://app/1597127494-QDP2OlYl?type=fotext&text=",
}

temp = {"te": "#890200","t": "#000000"}

komen = {
    "komenan": False,
}

kimak= {
    "Addaudio": False,
    "Audio": {},
    "Audios": {
     },
}

ciel = {
    "addText": {
        "statustext": True,
        "texts": "addtext adw"
        },
}

nissa = {
    "addTikel2": {
        "name": "",
        "status": False
        },
}

anyun = {
    "addTikel": {
        "name": "",
        "status": False
        },
}

chatbot = {
    "admin": [],
    "botMute": [],
    "botOff": [],
    "message": {}
}

peler = { 
    "receivercount": 0,
    "sendcount": 0
}

read = { 
    "readMember": {},
    "readPoint": {}
}

hoho = {
    "savefile": False,
    "namefile": "",
}

temptag = {
    "stealtag": False,
    "pesanya": "What's wrong , i'm busy right now",
}

wuts = {
    "wut": False,
}

tailah = {
    "siderTemp": {},
    "siderPesan": "s·¥á…¥…™ …¢√∂ Ä·¥á ô…™ ü…™ è·¥è Ä·¥ú·¥ç",
}

gold1 = {
    "goldTemp": {},
    "goldmesaj": "s·¥á…¥…™ …¢√∂ Ä·¥á ô…™ ü…™ è·¥è Ä·¥ú·¥ç",
}


apalo = {
    "Talkblacklist": {},
    "Talkwblacklist": False,
    "Talkdblacklist": False,
    "talkban": True,
}

sniffin = {
        "sniff": [],
}

tikelin = {
        "stikernya": [],
}

likers = {
    "autoLike": {
        "comment": "Hi @ This is AutoLike",
        "status": False,
    },
}

gwcool = {
    "squad": "Turkey team",
}

setbot = { 
    "background": "#000000",
    "text": "#ffd700",
    "separator": "#ffd700",
    "helptext": "#00FFFF",
    "neonrenk": "#17ff36",
    "helpseparator": "#00FFFF"
}

sets = {
    "tagsticker": False,
    "addStickerz": {
        "name": "",
        "status": False,
    },
    "messageStickerz": {
        "addNamez": "",
        "addStatusz": False,
        "listStickerz": {
            "responSticker": {
                "STKID": "",
                "STKPKGID": "",
                "STKVER": ""
            },
        }
    },
}

periksa = {
    "welcomeimage": {},
}
#
wait = {
    "auto_invite": False
}

wait = {
    "auto_room": False
}
def mentionMembers(to, mids=[]):
    if zarifogluMID in mids: mids.remove(zarifogluMID)
    parsed_len = len(mids)//20+1
    result = '‚ï≠‚îÅ‚îÅ‚îÅ„Äå ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê „Äç‚îÅ‚îÅ\n'
    mention = '@zarifoglux\n'
    no = 0
    for point in range(parsed_len):
        mentionees = []
        for mid in mids[point*20:(point+1)*20]:
            no += 1
            result += '‚îÉ ‚û§ %i. %s' % (no, mention)
            slen = len(result) - 12
            elen = len(result) + 3
            mentionees.append({'S': str(slen), 'E': str(elen - 4), 'M': mid})
            if mid == mids[-1]:
                result += '‚ï∞‚îÅ„Äå ‚ò¨üáπüá∑ T·¥ú Ä·¥ã·¥á è T·¥á·¥Ä·¥ç üáπüá∑‚ò¨ „Äç\n'
        if result:
            if result.endswith('\n'): result = result[:-1]
            zarifoglu.sendMessage2(to, result, {'MENTION': json.dumps({'MENTIONEES': mentionees})}, 0)
        result = ''
# FLEX MESAJLARIM


def Myflex3(to, text):
        contact = zarifoglu.getContact(zarifogluMID)
        data = {
            "type": "flex","altText": text,
            "contents": {"type": "carousel","contents": [{"type": "bubble",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
            "body": {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "horizontal","contents": [{"type": "box","layout": "vertical",
                "contents": [{"type": "image","url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus),"aspectMode": "cover","size": "full"}],
                    "cornerRadius": "100px","width": "50px","height": "50px","borderWidth": "2px","borderColor": "{}".format(setbot["text"])},
                    {"type": "box","layout": "horizontal","contents": [{"type": "text","contents": [
                    {"type": "span","text": "{}\n\n".format(contact.displayName),"weight": "bold","color": "#ffbf00","size": "sm"},
                    {"type": "span","text": "   "},
                    {"type": "span","text": "{}".format(text),"weight": "bold","color": "{}".format(setbot["text"])}],"size": "sm","wrap": True},
                    ]}],"spacing": "xl","paddingAll": "20px"}],
                        "paddingAll": "0px","borderWidth": "4px","cornerRadius": "xl","borderColor": "{}".format(setbot["separator"])}}]}}
        sendTemplate(to, data)
		
def Myflex4(to, text):
        contact = zarifoglu.getContact(zarifogluMID)
        data = {
            "type": "flex","altText": settings["bayrak"],
        "contents": {"type": "carousel","contents": [{"type": "bubble","size": "giga",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
      "body": {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "image",
            "url": "https://obs.line-scdn.net/{}".format(contact.pictureStatus),
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": contact.displayName,
                    "size": "xl",
                    "align": "center",
                    "color": "{}".format(setbot["text"]),
                    "weight": "bold"
                  }
                ]
              },
              {
                "type": "box",
                "layout": "baseline",
                "contents": [
                  {
                    "type": "text",
                    "text": "{}".format(text),"weight":"bold","wrap": True,
                    "color": "{}".format(setbot["text"]),
                    "size": "sm",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "icon",
                        "url": "https://i.ibb.co/3rpsNpH/clipart346005.png"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],"weight":"bold",
                        "color": "{}".format(setbot["text"]),
                        "weight":"bold",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "{}".format(setbot["separator"]),
                "margin": "xxl",
                "height": "40px",
                "action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "backgroundColor": "#03303Aaa",
            "paddingAll": "20px",
            "paddingTop": "18px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "text": contact.displayName,
                "color": "{}".format(setbot["text"]),
                "align": "center",
                "size": "xs",
                "offsetTop": "3px"
              }
            ],
            "position": "absolute",
            "cornerRadius": "20px",
            "offsetTop": "18px",
            "backgroundColor": "{}".format(setbot["background"]),
            "offsetStart": "18px",
            "height": "25px",
            "width": "100px",
            "action": {"type": "uri","label": "action","uri": "line://oaMessage/@fto6969x/?Bot%20almakistiyorum%20TurkeyTeam"
            }
          }
        ],
        "paddingAll": "0px","borderWidth": "3px","cornerRadius": "sm","borderColor": "{}".format(setbot["separator"]),
      }
    }
  ]
}
}
        sendTemplate(to, data)
		
def Myflex5(to, text):
        turkeyteam = zarifoglu.getContact(zarifogluMID)
        data = {
            "type": "flex","altText": settings["bayrak"],
            "contents": {"type": "bubble",
                "size":"kilo","footer":{"type":"box","layout":"vertical",
                "contents":[{"type":"image","url":"https://i.ibb.co/4ghbSPY/Turkey-Team-Zarifoglu-Yapim.jpg","position":"absolute","size":"full","aspectMode":"cover","aspectRatio":"4:10"},
				{"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"md"},{"type":"box","layout":"horizontal",
                "contents":[{"type":"spacer"},{"type":"box","layout":"baseline",
                "contents":[{"type":"icon","url":"https://i.ibb.co/C1rBhQW/Pics-Art-03-22-11-17-47.png","size":"md"},{"type":"text","text":"{}".format(text),"color": "{}".format(setbot["text"]),"size":"md","wrap":True,"align":"center","gravity":"center","weight": "bold"},
				{"type":"icon","url":"https://i.ibb.co/C1rBhQW/Pics-Art-03-22-11-17-47.png","size":"md","aspectRatio":"1:1"}]},{"type":"spacer"}]},{"type":"spacer","size":"md"}]}],"backgroundColor":"#000000cc"}],"paddingAll":"0px"},
            "styles":{"footer":{"backgroundColor":"#000000"}}}}
        sendTemplate(to, data)
		
def Myflex6(to, text):
    true=True
    turkeyteam = zarifoglu.getContact(zarifogluMID)
    data={
        "type":"flex","altText":settings["bayrak"],"contents":{
         "type":"bubble","size":"kilo","body":{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.ibb.co/4ghbSPY/Turkey-Team-Zarifoglu-Yapim.jpg","size":"full","aspectMode":"cover","position":"absolute","aspectRatio":"1:3"},
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.imgur.com/wpezeF3.png","size":"full","position":"absolute","offsetTop":"-101px"},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"horizontal","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"horizontal","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus)}],"cornerRadius":"100px","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px","height":"70px","width":"70px"},
         {"type":"box","layout":"vertical","contents":[{"type":"text","text":" ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê ","size":"lg","color":"{}".format(setbot["text"]),"weight":"bold"},{"type":"text","text":"s·¥á ü“ì ô·¥è·¥õ ·¥õ·¥Äs·¥Ä Ä ü·¥Ä èƒ±·¥Ñƒ±sƒ±","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold"}],"offsetStart":"5px"}]}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"separator","color":"{}".format(setbot["text"])},{"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"text","text":text,"size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True}]},{"type":"spacer","size":"xxl"}]},{"type":"separator","color":"{}".format(setbot["separator"])}]}]},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"}]}]}],"backgroundColor":"#000000aa"}],"paddingAll":"0px"},
         "styles":{"body":{"backgroundColor":"#000000"}}}}
    sendTemplate(to, data)

def Myflex7(to, text):
        contact = zarifoglu.getContact(zarifogluMID)
        data = {
        "type": "flex","altText": text,
            "contents": {"type": "carousel","contents": [{"type": "bubble","size": "giga",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
            "body": {"type": "box","layout": "vertical",
                "contents": [{"type": "image","url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus),"size": "full","aspectMode": "cover","aspectRatio": "1:1","gravity": "center"},
                {"type": "image","url": "https://scdn.line-apps.com/n/channel_devcenter/img/flexsnapshot/clip/clip15.png","position": "absolute","aspectMode": "fit","aspectRatio": "1:1","offsetTop": "0px","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","size": "full"},
                {"type": "box","layout": "horizontal","contents": [{"type": "box","layout": "vertical","contents": [{"type": "box","layout": "horizontal","contents": [
                {"type": "text","text": "{}".format(contact.displayName),"size": "xl","weight": "bold","color": "{}".format(setbot["text"])}]},
                {"type": "box","layout": "horizontal","contents": [{"type": "box","layout": "vertical","contents": [
                      {"type": "text","text": "{}".format(text),"color": "{}".format(setbot["text"]),"size": "md","wrap": True}
                      ],"spacing": "lg"}]}],"spacing": "xs"}],
                "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","paddingAll": "20px"}],
                "paddingAll": "0px","borderWidth": "3px","cornerRadius": "sm","borderColor": "{}".format(setbot["separator"]),}}]}}
        sendTemplate(to, data)

def Myflex8(to, text, sender):
        thegold = zarifoglu.getContact(sender)
        data = {
            "type":"flex","altText":settings["bayrak"],
            "contents": {"type": "carousel","contents": [
            {"type":"bubble","size":"kilo","hero":{"type":"box","layout":"vertical",
            "contents":[{"type":"image","url": str(zarifoglu.getProfileCoverURL(sender)),"size":"full","aspectMode":"cover","aspectRatio":"2:3"},
            {"type":"text","text":"- KAPAK -","color":"{}".format(setbot["text"]),"align":"center","weight":"bold","offsetBottom":"2px"},
            {"type":"text","text":"- MESAJ -","weight":"bold","position":"absolute","align":"center","color":"{}".format(setbot["text"]),"gravity":"center","size":"lg","offsetStart":"88px"},
            {"type":"box","layout":"vertical",
            "contents":[{"type":"text","text":"{}".format(text),"align":"center","color":"{}".format(setbot["text"]),"offsetTop":"40px","style":"italic","wrap":True,"offsetStart":"-20px","gravity":"bottom","size":"xs"},
            {"type":"image","url":"https://i.ibb.co/RgpWB5N/19c1c7a4aeaf8ce9bbf86957bff00b0b.png","size":"full","offsetTop":"-130px","offsetStart":"-20px","position":"absolute"}],
            "position":"absolute","backgroundColor":"#000000aa","width":"300px","height":"400px"}],
            "backgroundColor":"{}".format(setbot["background"]),
            "borderWidth":"3px",
            "cornerRadius":"10px"
            }}]}}
        sendTemplate(to, data)

def Myflex9(to, text):
        contact = zarifoglu.getContact(zarifogluMID)
        data = {
            "type": "flex","altText": settings["bayrak"],"contents": {"type": "carousel","contents": [{"type": "bubble",
            "body": {"type": "box","layout": "vertical","contents": [
            {"type": "image","url": str(zarifoglu.getProfileCoverURL(zarifogluMID)),"size": "full","aspectMode": "cover","aspectRatio": "2:3","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid},"gravity": "top"},
            {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [
            {"type": "image","url": "https://obs.line-scdn.net/{}".format(contact.pictureStatus),"size": "full","aspectMode": "cover","align": "center","action": {"type": "uri","label": "action","uri": "https://os.line.naver.jp/os/p/{}".format(zarifogluMID)}}],"width": "80px","height": "80px","cornerRadius": "100px","offsetStart": "180px"}],"position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","paddingAll": "20px","paddingBottom": "30px"},
            {"type": "box","layout": "vertical","contents": [{"type": "text","text": "{}".format(text),"color": "{}".format(setbot["text"]),"size": "md","wrap": True,"align": "start","decoration": "none","style": "normal","position": "relative","weight": "bold"}
            ],"position": "absolute","offsetStart": "8px","offsetTop": "14px","offsetEnd": "8px"}],"paddingAll": "0px"}}]}}
        sendTemplate(to,data)

def Myflex10(to, text):
        contact = zarifoglu.getContact(zarifogluMID)
        data = {
            "type": "flex","altText": settings["bayrak"],"contents": {"type": "carousel","contents": [
            {"type": "bubble","size": "giga",
  "body": {
    "type": "box",
    "layout": "vertical",
    "contents": [
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "image",
            "url": "https://i.ibb.co/sv1gGLT/Pics-Art-01-26-02-58-03.png",
            "aspectMode": "fit",
            "size": "xl",
            "action": {"type": "uri","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}
          }
        ],
        "position": "absolute",
        "offsetStart": "100px",
        "paddingAll": "0px",
        "offsetTop": "-50px"
      },
      {
        "type": "box",
        "layout": "horizontal",
        "contents": [
          {
            "type": "text",
            "wrap": True,
            "color": "#ffc000",
            "text": "{}".format(text),
            "size": "sm"
          }
        ],
        "offsetTop": "40px",
        "paddingBottom": "20px",
        "offsetStart": "20px",
        "paddingEnd": "20px"
      },
      {
        "type": "box",
        "layout": "horizontal",
        "contents": [
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://obs.line-scdn.net/{}".format(contact.pictureStatus),
                "aspectMode": "cover",
                "size": "full",
                "action": {
                  "type": "uri",
                  "label": "action",
                  "uri": "https://os.line.naver.jp/os/p/{}".format(zarifogluMID)
                }
              }
            ],
            "cornerRadius": "100px",
            "width": "40px",
            "height": "40px",
            "borderWidth": "2px",
            "borderColor": "#00ff00",
            "offsetStart": "-2px",
            "offsetTop": "5px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "text": "{}".format(contact.displayName),
                "weight": "bold",
                "size": "sm",
                "color": "#ffc000"
              }
            ],
            "offsetTop": "14px"
          }
        ],
        "spacing": "xl",
        "paddingAll": "20px"
      }
    ],
    "paddingAll": "0px",
    "borderColor": "#00ff00",
    "borderWidth": "3px",
    "cornerRadius": "sm"
  },
  "styles": {
    "body": {
      "backgroundColor": "#363636"
    }
  }
}]}}
        sendTemplate(to,data)

def Metalsettings(to, turkish):
    true=True
    turkeyteam = zarifoglu.getContact(zarifogluMID)
    data={"type":"flex","altText":settings["bayrak"],"contents":{
         "type":"bubble","size":"kilo","body":{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.ibb.co/4ghbSPY/Turkey-Team-Zarifoglu-Yapim.jpg","size":"full","aspectMode":"cover","position":"absolute","aspectRatio":"1:3"},
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.imgur.com/wpezeF3.png","size":"full","position":"absolute","offsetTop":"-101px"},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"horizontal","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"horizontal","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus)}],"cornerRadius":"100px","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px","height":"70px","width":"70px"},
         {"type":"box","layout":"vertical","contents":[{"type":"text","text":" ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê ","size":"lg","color":"{}".format(setbot["text"]),"weight":"bold"},{"type":"text","text":"s·¥á ü“ì ô·¥è·¥õ ·¥õ·¥Äs·¥Ä Ä ü·¥Ä èƒ±·¥Ñƒ±sƒ±","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold"}],"offsetStart":"2px"}]}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"separator","color":"{}".format(setbot["text"])},{"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"text","text":turkish,"size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True}]},{"type":"spacer","size":"xxl"}]},{"type":"separator","color":"{}".format(setbot["separator"])}]}]},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"}]}]}],"backgroundColor":"#000000cc","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px"}],"paddingAll":"0px"},
         "styles":{"body":{"backgroundColor":"#000000"}}}}
    sendTemplate(to, data)

def Neonhelp(to):
    true=True
    turkeyteam = zarifoglu.getContact(zarifogluMID)
    data={
        "type":"flex","altText":settings["bayrak"],"contents":{"type": "carousel","contents": [
        {"type":"bubble","size":"kilo","body":{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.ibb.co/4ghbSPY/Turkey-Team-Zarifoglu-Yapim.jpg","size":"full","aspectMode":"cover","position":"absolute","aspectRatio":"1:3"},
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.imgur.com/wpezeF3.png","size":"full","position":"absolute","offsetTop":"-101px"},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"horizontal","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"horizontal","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus)}],"cornerRadius":"100px","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px","height":"70px","width":"70px"},
         {"type":"box","layout":"vertical","contents":[{"type":"text","text":"\n ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê ","size":"lg","color":"{}".format(setbot["text"]),"weight":"bold"},{"type":"text","text":"S·¥á ü“ì ô·¥è·¥õ T·¥ÄÍú±·¥Ä Äƒ±·¥ç·¥Ñƒ±Íú±ƒ±","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold"}],"offsetStart":"5px"}]}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"separator","color":"{}".format(setbot["separator"])},{"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"text","text":" ‚å¨ Self","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Group","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Anlƒ±k","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Profile","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Mention","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Steal","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Kick","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Bcast","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Feature","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Settings","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Status","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ List","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Images","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Timeline","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Protect","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Social","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Wordban","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Friend","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Translate","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Banning","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Memegen","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Utility","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Github","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Support","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True}
         ]},
         {"type":"spacer","size":"xxl"}]},{"type":"separator","color":"{}".format(setbot["separator"])}]}]},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"}]}]}],"backgroundColor":"#000000aa","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px"}],"paddingAll":"0px"},
         "styles":{"body":{"backgroundColor":"#000000"}}},

        {"type":"bubble","size":"kilo","body":{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.ibb.co/4ghbSPY/Turkey-Team-Zarifoglu-Yapim.jpg","size":"full","aspectMode":"cover","position":"absolute","aspectRatio":"1:3"},
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.imgur.com/wpezeF3.png","size":"full","position":"absolute","offsetTop":"-101px"},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"horizontal","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"horizontal","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus)}],"cornerRadius":"100px","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px","height":"70px","width":"70px"},
         {"type":"box","layout":"vertical","contents":[{"type":"text","text":" ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê ","size":"lg","color":"{}".format(setbot["text"]),"weight":"bold"},{"type":"text","text":"S·¥á ü“ì ô·¥è·¥õ T·¥ÄÍú±·¥Ä Äƒ±·¥ç·¥Ñƒ±Íú±ƒ±","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold"}],"offsetStart":"5px"}]}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"separator","color":"{}".format(setbot["separator"])},{"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"text","text":" ‚å¨ Mypicture","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Mycover","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Mycontact","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Mymid","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Myprofile","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Myvideo","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Me","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Me2","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Me3","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Me4","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Me5","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Me6","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Me7","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Me8","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Me9","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Me10","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Bcast Komutlarƒ± ‚å¨ ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Bc <Yazƒ±>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Bc2..Bc10 <Yazƒ±>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Bcontact-[mid]-[Yazƒ±]","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Payla≈ü-PostID'si","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Allbroadcast <Yazƒ±>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Groupcastvoice <Yazƒ±>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Friendcastvoice <Yazƒ±>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Flexgbc <Yazƒ±>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Flexfbc <Yazƒ±>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True}]},
         {"type":"spacer","size":"xxl"}]},{"type":"separator","color":"{}".format(setbot["separator"])}]}]},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"}]}]}],"backgroundColor":"#000000aa","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px"}],"paddingAll":"0px"},
         "styles":{"body":{"backgroundColor":"#000000"}}},

        {"type":"bubble","size":"kilo","body":{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.ibb.co/4ghbSPY/Turkey-Team-Zarifoglu-Yapim.jpg","size":"full","aspectMode":"cover","position":"absolute","aspectRatio":"1:3"},
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.imgur.com/wpezeF3.png","size":"full","position":"absolute","offsetTop":"-101px"},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"horizontal","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"horizontal","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus)}],"cornerRadius":"100px","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px","height":"70px","width":"70px"},
         {"type":"box","layout":"vertical","contents":[{"type":"text","text":" ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê ","size":"lg","color":"{}".format(setbot["text"]),"weight":"bold"},{"type":"text","text":"S·¥á ü“ì ô·¥è·¥õ T·¥ÄÍú±·¥Ä Äƒ±·¥ç·¥Ñƒ±Íú±ƒ±","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold"}],"offsetStart":"5px"}]}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"separator","color":"{}".format(setbot["separator"])},{"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"text","text":" ‚å¨ Changedp Group","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Favoritelist","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Blocklist","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Lurk","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Find <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Song√∂r√ºlme <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Rejectall","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Cancelall","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ √ñzeldavet 1 <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Spamcall <1>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Groups","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Openqr","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Closeqr","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Invite","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Inviteid [Idline]","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Invite <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Countdown <num>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Countforward <num>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Creategroup <name>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Changegn <name>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Get note","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Get note <num>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Mentionnote","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Create note <text>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Get album","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Get album [1] [<|>|-|num]","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True}]},
         {"type":"spacer","size":"xxl"}]},{"type":"separator","color":"{}".format(setbot["separator"])}]}]},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"}]}]}],"backgroundColor":"#000000aa","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px"}],"paddingAll":"0px"},
         "styles":{"body":{"backgroundColor":"#000000"}}},

        {"type":"bubble","size":"kilo","body":{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.ibb.co/4ghbSPY/Turkey-Team-Zarifoglu-Yapim.jpg","size":"full","aspectMode":"cover","position":"absolute","aspectRatio":"1:3"},
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.imgur.com/wpezeF3.png","size":"full","position":"absolute","offsetTop":"-101px"},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"horizontal","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"horizontal","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus)}],"cornerRadius":"100px","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px","height":"70px","width":"70px"},
         {"type":"box","layout":"vertical","contents":[{"type":"text","text":" ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê ","size":"lg","color":"{}".format(setbot["text"]),"weight":"bold"},{"type":"text","text":"S·¥á ü“ì ô·¥è·¥õ T·¥ÄÍú±·¥Ä Äƒ±·¥ç·¥Ñƒ±Íú±ƒ±","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold"}],"offsetStart":"5px"}]}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"separator","color":"{}".format(setbot["separator"])},{"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"text","text":"  < Anlƒ±k Komutlarƒ± >","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Autoread On 3","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Autoread Off 3","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Vir√ºs","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Crashhit","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Etiket","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Mention Mc","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Sesegelin [Sayƒ±]","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Sese√ßƒ±k [Sayƒ±] [@]","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Flood on 1 Yazƒ±","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Flood2 on 1 Yazƒ±","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Flood3 on 1 Yazƒ±","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Admin:ekle @","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Admin:sil @","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Adminlistesi","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Anlƒ±kdavet:on","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Anlƒ±kdavet:off","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ 1.s√∂zayar","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ 2.s√∂zayar","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ 3.s√∂zayar","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ 4.s√∂zayar","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ 5.s√∂zayar","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ K√ºfret","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ √ñzl√º S√∂z","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True}]},
         {"type":"spacer","size":"xxl"}]},{"type":"separator","color":"{}".format(setbot["separator"])}]}]},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"}]}]}],"backgroundColor":"#000000aa","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px"}],"paddingAll":"0px"},
         "styles":{"body":{"backgroundColor":"#000000"}}},

        {"type":"bubble","size":"kilo","body":{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.ibb.co/4ghbSPY/Turkey-Team-Zarifoglu-Yapim.jpg","size":"full","aspectMode":"cover","position":"absolute","aspectRatio":"1:3"},
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.imgur.com/wpezeF3.png","size":"full","position":"absolute","offsetTop":"-101px"},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"horizontal","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"horizontal","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus)}],"cornerRadius":"100px","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px","height":"70px","width":"70px"},
         {"type":"box","layout":"vertical","contents":[{"type":"text","text":" ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê ","size":"lg","color":"{}".format(setbot["text"]),"weight":"bold"},{"type":"text","text":"S·¥á ü“ì ô·¥è·¥õ T·¥ÄÍú±·¥Ä Äƒ±·¥ç·¥Ñƒ±Íú±ƒ±","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold"}],"offsetStart":"5px"}]}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"separator","color":"{}".format(setbot["separator"])},{"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"text","text":" < Profile Komutlarƒ± >","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Changedp","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Change cover","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Changedp video","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Changevideourl <link>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Updatename <name>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Updatestatus <name>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":"  ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" < Banning Komutlarƒ± > ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Tban <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Tunban <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Tbanlist","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Notag on/off","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Status notag","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Remove notag","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Blacklist","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Purge","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Conban","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Clearban","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":"< Utility Komutlarƒ± > ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Autoadd","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Autoread","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Autorespon","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Autojoin","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Leavemsg","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Welcomemsg","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True}]},
         {"type":"spacer","size":"xxl"}]},{"type":"separator","color":"{}".format(setbot["separator"])}]}]},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"}]}]}],"backgroundColor":"#000000aa","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px"}],"paddingAll":"0px"},
         "styles":{"body":{"backgroundColor":"#000000"}}},


        {"type":"bubble","size":"kilo","body":{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.ibb.co/4ghbSPY/Turkey-Team-Zarifoglu-Yapim.jpg","size":"full","aspectMode":"cover","position":"absolute","aspectRatio":"1:3"},
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.imgur.com/wpezeF3.png","size":"full","position":"absolute","offsetTop":"-101px"},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"horizontal","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"horizontal","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus)}],"cornerRadius":"100px","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px","height":"70px","width":"70px"},
         {"type":"box","layout":"vertical","contents":[{"type":"text","text":" ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê ","size":"lg","color":"{}".format(setbot["text"]),"weight":"bold"},{"type":"text","text":"S·¥á ü“ì ô·¥è·¥õ T·¥ÄÍú±·¥Ä Äƒ±·¥ç·¥Ñƒ±Íú±ƒ±","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold"}],"offsetStart":"5px"}]}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"separator","color":"{}".format(setbot["separator"])},{"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"text","text":" < Kick Komutlarƒ± > ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Kick <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Purge <@>(Korumalarƒ±Atar)","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Slain <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Ulti <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Ass <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Multikick <num><@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Nk <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Skill <name>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Kickass <name>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Reinv <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Invite <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":"< Mention Komutlarƒ± > ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Mention [num|>|<|1-5]","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Mentionname [A-z]","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Mention [A-z]","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Mention [2|@]","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Mentionall","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Yenimention <...>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Check mention","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" < Wordban Komutlarƒ± >","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Wordbanadd <text>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Wordbandel <text>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ List wordban","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True}]},
         {"type":"spacer","size":"xxl"}]},{"type":"separator","color":"{}".format(setbot["text"])}]}]},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"}]}]}],"backgroundColor":"#000000aa","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px"}],"paddingAll":"0px"},
         "styles":{"body":{"backgroundColor":"#000000"}}},

        {"type":"bubble","size":"kilo","body":{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.ibb.co/4ghbSPY/Turkey-Team-Zarifoglu-Yapim.jpg","size":"full","aspectMode":"cover","position":"absolute","aspectRatio":"1:3"},
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.imgur.com/wpezeF3.png","size":"full","position":"absolute","offsetTop":"-101px"},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"horizontal","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"horizontal","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus)}],"cornerRadius":"100px","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px","height":"70px","width":"70px"},
         {"type":"box","layout":"vertical","contents":[{"type":"text","text":" ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê ","size":"lg","color":"{}".format(setbot["text"]),"weight":"bold"},{"type":"text","text":"S·¥á ü“ì ô·¥è·¥õ T·¥ÄÍú±·¥Ä Äƒ±·¥ç·¥Ñƒ±Íú±ƒ±","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold"}],"offsetStart":"5px"}]}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"separator","color":"{}".format(setbot["separator"])},{"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"text","text":" < Kur'an Komutlarƒ± >","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Kur'an Sureleri","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Kur'an [Sure No]","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Kur'an [Sure No] [1|<|>|-]","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" < Steal Komutlarƒ± >","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Rename <@> | <name>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Pict <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Cover <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Profile <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Video <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Name <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Bio <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Contact <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Midclone <mid>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Cloneprofile <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Restoreprofile","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Backupprofile","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Mid <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Whois <name>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Status <name>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True}]},
         {"type":"spacer","size":"xxl"}]},{"type":"separator","color":"{}".format(setbot["text"])}]}]},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"}]}]}],"backgroundColor":"#000000aa","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px"}],"paddingAll":"0px"},
         "styles":{"body":{"backgroundColor":"#000000"}}},

        {"type":"bubble","size":"kilo","body":{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.ibb.co/4ghbSPY/Turkey-Team-Zarifoglu-Yapim.jpg","size":"full","aspectMode":"cover","position":"absolute","aspectRatio":"1:3"},
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.imgur.com/wpezeF3.png","size":"full","position":"absolute","offsetTop":"-101px"},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"horizontal","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"horizontal","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus)}],"cornerRadius":"100px","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px","height":"70px","width":"70px"},
         {"type":"box","layout":"vertical","contents":[{"type":"text","text":" ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê ","size":"lg","color":"{}".format(setbot["text"]),"weight":"bold"},{"type":"text","text":"S·¥á ü“ì ô·¥è·¥õ T·¥ÄÍú±·¥Ä Äƒ±·¥ç·¥Ñƒ±Íú±ƒ±","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold"}],"offsetStart":"5px"}]}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"separator","color":"{}".format(setbot["separator"])},{"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"text","text":" < Timeline Komutlarƒ± >","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Updatepost <text>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Update post [1][time]<text>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Timeline <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Share allpost <num><@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Like <@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":"< Spam Komutlarƒ± >","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Spam 1 [1][enter|text]","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Spam 2 [1][@|]","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Spam 3 [1]<@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Spam 4 [1]<@>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Pc [1] <@>[enter|text]","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" < Images Komutlarƒ± >","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Image <text>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Cosplay <isim>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Viloid <isim>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Imagetext <query>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True}]},
         {"type":"spacer","size":"xxl"}]},{"type":"separator","color":"{}".format(setbot["separator"])}]}]},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"}]}]}],"backgroundColor":"#000000aa","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px"}],"paddingAll":"0px"},
         "styles":{"body":{"backgroundColor":"#000000"}}},

        {"type":"bubble","size":"kilo","body":{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.ibb.co/4ghbSPY/Turkey-Team-Zarifoglu-Yapim.jpg","size":"full","aspectMode":"cover","position":"absolute","aspectRatio":"1:3"},
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.imgur.com/wpezeF3.png","size":"full","position":"absolute","offsetTop":"-101px"},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"horizontal","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"horizontal","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus)}],"cornerRadius":"100px","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px","height":"70px","width":"70px"},
         {"type":"box","layout":"vertical","contents":[{"type":"text","text":" ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê ","size":"lg","color":"{}".format(setbot["text"]),"weight":"bold"},{"type":"text","text":"S·¥á ü“ì ô·¥è·¥õ T·¥ÄÍú±·¥Ä Äƒ±·¥ç·¥Ñƒ±Íú±ƒ±","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold"}],"offsetStart":"5px"}]}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"separator","color":"{}".format(setbot["separator"])},{"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"text","text":"  < Feature Komutlarƒ± >","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ M√ºzik <ƒ∞√ßerik>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Temalar <ƒ∞√ßerik>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Stickerlar <ƒ∞√ßerik>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Karakter <ƒ∞sim>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Astronotnow","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Urban <ƒ∞√ßerik>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Zalgo <ƒ∞sim>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Checkip [ip]","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Gif <ƒ∞√ßerik>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ < Men√º Deƒüi≈üme > ‚å¨","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Fbmod On","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Gsmod On","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Bjkmod On","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Legendmod On","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ √áukurmod On","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Pubgmod On","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ ","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True}]},
         {"type":"spacer","size":"xxl"}]},{"type":"separator","color":"{}".format(setbot["text"])}]}]},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"}]}]}],"backgroundColor":"#000000aa","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px"}],"paddingAll":"0px"},
         "styles":{"body":{"backgroundColor":"#000000"}}},

        {"type":"bubble","size":"kilo","body":{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.ibb.co/4ghbSPY/Turkey-Team-Zarifoglu-Yapim.jpg","size":"full","aspectMode":"cover","position":"absolute","aspectRatio":"1:3"},
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://i.imgur.com/wpezeF3.png","size":"full","position":"absolute","offsetTop":"-101px"},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"horizontal","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"box","layout":"vertical","contents":[{"type":"box","layout":"horizontal","contents":[{"type":"box","layout":"vertical","contents":[
         {"type":"image","url":"https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus)}],"cornerRadius":"100px","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px","height":"70px","width":"70px"},
         {"type":"box","layout":"vertical","contents":[{"type":"text","text":" ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê ","size":"lg","color":"{}".format(setbot["text"]),"weight":"bold"},{"type":"text","text":"S·¥á ü“ì ô·¥è·¥õ T·¥ÄÍú±·¥Ä Äƒ±·¥ç·¥Ñƒ±Íú±ƒ±","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold"}],"offsetStart":"5px"}]}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"separator","color":"{}".format(setbot["separator"])},{"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"},{"type":"box","layout":"vertical","contents":[
         {"type":"text","text":" ‚å¨ < Social Komutlarƒ± > ‚å¨","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Instaprofilev2 [instanick]","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Instaprofile <instanick>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Webtoon","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Fileytmp3 <link>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Fileytmp4 <link>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Smulemp4 <link>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Smulemp3 <link>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Smulefile <link>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Youtubemp3 <link>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Youtubemp4 <link>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ < Translate Komutlarƒ± > ‚å¨","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ T√ºrk√ße: <Yazƒ±>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Rus√ßa: <Yazƒ±>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Hint√ße: <Yazƒ±>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Arap√ßa: <Yazƒ±>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Ingilizce: <Yazƒ±>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Japonca: <Yazƒ±>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Korece: <Yazƒ±>","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True},
         {"type":"text","text":" ‚å¨ Fransƒ±zca: <Yazƒ±>\n\n","size":"sm","color":"{}".format(setbot["text"]),"weight":"bold","align":"start","gravity":"center","wrap":True}]},
         {"type":"spacer","size":"xxl"}]},{"type":"separator","color":"{}".format(setbot["separator"])}]}]},{"type":"spacer","size":"xxl"}]},
         {"type":"box","layout":"vertical","contents":[{"type":"spacer","size":"xxl"}]}]}],"backgroundColor":"#000000aa","borderColor":"{}".format(setbot["separator"]),"borderWidth":"1px"}],"paddingAll":"0px"},
         "styles":{"body":{"backgroundColor":"#000000"}}}
         ]}}
    sendTemplate(to, data)
def formatNumber(num):
    if len(str(num)) < 7:
        return format_number(num)
    millnames = ['', 'T', 'M', 'B', 'T']
    num = float(num)
    millidx = max(0, min(len(millnames)-1, int(math.floor(0 if num == 0 else math.log10(abs(num))/3))))
    return '{:.0f} {}'.format(num/10**(3*millidx), millnames[millidx])
def setInstagramTemplate(username):
    r = requests.get(f'https://www.instagram.com/{username}/?__a=1')
    try:
        data = r.json()
    except Exception:
        return 'Failed display profile user ig, username not found ‚ô™'
    user = data['graphql']['user']
    username = user['username']
    biography = user['biography'] if user['biography'] else ' '
    posts = user['edge_owner_to_timeline_media']['count']
    followers = user['edge_followed_by']['count']
    following = user['edge_follow']['count']
    full_name = user['full_name'] if user['full_name'] else username
    profile_pic = user['profile_pic_url']
    profile_pic_hd = user['profile_pic_url_hd']
    filler = {'type':'filler'}
    link = user['external_url']
    verified = user['is_verified']
    flex = {'type':'flex','altText':username,'contents':{'type':'bubble','header':{'type':'box','layout':'horizontal','paddingAll':'10px','contents':[{'type':'box','layout':'vertical','contents':[{'type':'image','url':'https://pluspng.com/img-png/instagram-png-instagram-png-logo-1455.png','size':'full'}],'width':'25px'},{'type':'text','text':username,'gravity':'center','size':'lg','align':'center','weight':'bold'}]},'body':{'type':'box','layout':'vertical','paddingAll':'10px','contents':[{'type':'box','layout':'horizontal','contents':[{'type':'box','layout':'vertical','contents':[{'type':'image','url':profile_pic,'size':'full','aspectMode':'cover'}],'cornerRadius':'100px','width':'70px','action':{'type':'uri','label':'action','uri':'line://app/1584968724-qzg0aR95?auto=yes&type=image&downloadUrl={0}&previewUrl={0}'.format(profile_pic_hd),'altUri':{'desktop':profile_pic_hd}}},{'type':'box','layout':'vertical','contents':[filler,{'type':'text','text':formatNumber(posts),'align':'center','weight':'bold','size':'sm'},{'type':'text','text':'Posts','align':'center','size':'sm'},filler ]},{'type':'box','layout':'vertical','contents':[filler,{'type':'text','text':formatNumber(followers),'align':'center','weight':'bold','size':'sm'},{'type':'text','text':'Followers','align':'center','size':'sm'},filler ]},{'type':'box','layout':'vertical','contents':[filler,{'type':'text','text':formatNumber(following),'align':'center','weight':'bold','size':'sm'},{'type':'text','text':'Following','align':'center','size':'sm'},filler ]}],'spacing':'sm'},{'type':'text','text':full_name,'weight':'bold','margin':'md','size':'sm'},{'type':'text','text':biography,'margin':'md','size':'sm','wrap':True,'maxLines':3 },{'type':'box','layout':'horizontal','contents':[{'type':'text','text':'Follow','color':'#ffffff','gravity':'center','align':'center','weight':'bold'}],'backgroundColor':'#0097e6','margin':'md','height':'30px','cornerRadius':'3px','action':{'type':'uri','label':'action','uri':'https://www.instagram.com/'+username}}]}}}
    if link:
        flex['contents']['body']['contents'].insert(3, {'type':'text','text':link,'size':'sm','wrap':True,'weight':'bold','color':'#0097e6','action':{'type':'uri','label':'action','uri':link}})
    if verified:
        flex['contents']['header']['contents'].append({'type':'box','layout':'vertical','contents':[{'type':'image','url':'https://imgdb.net/images/7266.png','size':'full'}],'width':'25px'})
    if len(user['edge_owner_to_timeline_media']['edges']):
        feeds_media = user['edge_owner_to_timeline_media']['edges'][:6]
        feeds_media += [filler for _ in range(6-len(feeds_media))]
        feeds_content = {'type':'box','layout':'vertical','spacing':'xs','margin':'md','cornerRadius':'3px','height':'185px','contents':[]}
        parsed_len = len(feeds_media)//3+1
        for point in range(parsed_len):
            contents = {'type':'box','layout':'horizontal','spacing':'xs','contents':[]}
            for feed in feeds_media[point*3:(point+1)*3]:
                if feed == filler:
                    contents['contents'].append(feed)
                else:
                    contents['contents'].append({'type':'image','url':feed['node']['thumbnail_src'],'size':'full','aspectMode':'cover','action':{'type':'uri','label':'action','uri':'https://www.instagram.com/p/'+feed['node']['shortcode']}})
            if contents['contents']:
                feeds_content['contents'].append(contents)
    else:
        feeds_content = {'type':'box','layout':'vertical','spacing':'xs','margin':'md','cornerRadius':'3px','height':'185px','contents':[filler,{'type':'image','url':'https://icon-library.net/images/black-camera-icon/black-camera-icon-3.jpg','size':'xxs'},{'type':'text','text':'No Posts Yet','align':'center','size':'lg'},filler]}
    flex['contents']['body']['contents'].append(feeds_content)
    return flex
def shareall(to, text):
    lol = zarifoglu.getGroupIdsJoined()
    for group in lol:
        zarifoglu.sendPostToTalk(group, text)
        time.sleep(0.7)
    zarifoglu.sendMessage(to, "G√∂nderi {} grupta payla≈üƒ±ldƒ±".format(str(len(lol))))

def toplu√∂zel(to, text):
    ùìèùí∂ùìáùíæùíª = zarifoglu.getAllContactIds()
    for arkada≈ülar in ùìèùí∂ùìáùíæùíª:
        zarifoglu.sendPostToTalk(arkada≈ülar, text)
        time.sleep(0.7)
    zarifoglu.sendMessage(to, "G√∂nderi {} √∂zelde payla≈üƒ±ldƒ±".format(str(len(ùìèùí∂ùìáùíæùíª))))

def bcall(to, text, zarif1):
    thegold = zarifoglu.getGroupIdsJoined()
    for group in thegold:
        Myflex3(group, text + "\n\n[ ‚ò¨Davet Duyurusu‚ò¨ ]")
        time.sleep(4)
        zarifoglu.sendContact(group, zarif1)
        time.sleep(4)
    Myflex3(to, "Ba≈üarƒ±yla {} gruba g√∂nderildi..".format(str(len(thegold))))
#=====================================================================
settings["myProfile"]["displayName"] = zarifogluProfile.displayName
settings["myProfile"]["statusMessage"] = zarifogluProfile.statusMessage
settings["myProfile"]["pictureStatus"] = zarifogluProfile.pictureStatus
cont = zarifoglu.getContact(zarifogluMID)
settings["myProfile"]["videoProfile"] = cont.videoProfile
coverId = zarifoglu.getProfileDetail()["result"]["objectId"]
settings["myProfile"]["coverId"] = coverId
#=====================================================================
with open("ZarifKing/temp.json", "r", encoding="utf_8_sig") as f:
    anu = json.loads(f.read())
    anu.update(settings)
    settings = anu
with open("ZarifKing/wait.json", "r", encoding="utf_8_sig") as f:
    itu = json.loads(f.read())
    itu.update(wait)
    wait = itu
#=====================================================================
pubg = {
    "pubgm": False
}

cukur = {
    "cukurgm": True
}

legend = {
    "legendgm": False
}

fener = {
    "fenergm": False
}

bjk = {
    "bjkgm": False
}

gltsry = {
    "gsgm": False
}
#=====================================================================
#=====================================================================
def delBlocklist(tar="all"):
    try:
        global blockInvite
        if tar == "all":
            blockInvite = []
        else:
            blockInvite.remove(blockInvite[int(tar) - 1])
    except Exception as error:
        logError(error)
def delNotelist(tar="all"):
    try:
        global notegroup
        if tar == "all":
            notegroup = []
        else:
            notegroup.remove(notegroup[int(tar) - 1])
    except Exception as error:
        logError(error)
def delGnamelist(tar="all"):
    try:
        global groupName
        if tar == "all":
            groupName = []
        else:
            groupName.remove(groupName[int(tar) - 1])
    except Exception as error:
        logError(error)
def delQrlist(tar="all"):
    try:
        global groupQr
        if tar == "all":
            groupQr = []
        else:
            groupQr.remove(groupQr[int(tar) - 1])
    except Exception as error:
        logError(error)
def delKicklist(tar="all"):
    try:
        global protectKick
        if tar == "all":
            protectKick = []
        else:
            protectKick.remove(protectKick[int(tar) - 1])
    except Exception as error:
        logError(error)
def delNotelist(tar="all"):
    try:
        global notegroup
        if tar == "all":
            notegroup = []
        else:
            notegroup.remove(notegroup[int(tar) - 1])
    except Exception as error:
        logError(error)
def delNotaglist(tar="all"):
    try:
        global notag
        if tar == "all":
            notag = []
        else:
            notag.remove(notag[int(tar) - 1])
    except Exception as error:
        logError(error)
#=====================================================================
def support(to):
    data={"type":"flex","altText":settings["bayrak"],"contents":{
  "type": "carousel",
  "contents": [
    {
  "type": "bubble",
  "body": {
    "type": "box",
    "layout": "vertical",
    "contents": [
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "spacer"
          },
          {
            "type": "box",
            "layout": "baseline",
            "contents": [
              {
                "type": "icon",
                "url": "https://i.ibb.co/zHkYgV7/left.png",
                "offsetStart": "10px"
              },
              {
                "type": "text",
                "color": "#Ffffff",
                "text": "Friend search",
                "size": "md",
                "offsetStart": "20px"
              }
            ],
            "margin": "md"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "spacer",
                "size": "lg"
              }
            ]
          }
        ],
        "backgroundColor": "#464F69"
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "spacer",
            "size": "xxl"
          },
          {
            "type": "box",
            "layout": "horizontal",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "."
                  }
                ],
                "offsetStart": "10px",
                "cornerRadius": "xl",
                "borderColor": "#adb5bd",
                "borderWidth": "6px",
                "width": "20px",
                "height": "20px"
              },
              {
                "type": "text",
                "text": "ID",
                "offsetStart": "18px"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "."
                  }
                ],
                "width": "20px",
                "height": "20px",
                "cornerRadius": "xl",
                "borderWidth": "6px",
                "backgroundColor": "#adb5bd",
                "offsetEnd": "85px"
              },
              {
                "type": "text",
                "text": "Phone number",
                "offsetEnd": "75px"
              }
            ]
          },
          {
            "type": "spacer"
          }
        ]
      },
      {
        "type": "box",
        "layout": "horizontal",
        "contents": [
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "text": "zarifbirbey",
                "offsetStart": "10px",
                "size": "sm"
              }
            ],
            "borderColor": "#adb5bd",
            "borderWidth": "1px",
            "offsetStart": "10px"
          },
          {
            "type": "spacer",
            "size": "xxl"
          }
        ]
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "filler"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact('u5d854616fc8ea66893e7a85b7cb0b9f1').pictureStatus),
                "aspectMode": "cover",
                "size": "full"
              }
            ],
            "margin": "xxl",
            "cornerRadius": "100px",
            "height": "72px",
            "width": "72px",
            "offsetStart": "110px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "text": "{}".format(zarifoglu.getContact('u5d854616fc8ea66893e7a85b7cb0b9f1').displayName),
                "size": "md",
                "color": "#000000",
                "weight": "bold",
                "align": "center"
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Add Friend",
                        "size": "sm",
                        "color": "#Ffffff",
                        "align": "center"
                      }
                    ],
                    "borderWidth": "1px",
                    "backgroundColor": "#008000",
                    "action": {
                      "type": "uri",
                      "label": "action",
                      "uri": "http://line.me/ti/p/~zarifbirbey"
                    }
                  },
                  {
                    "type": "filler"
                  }
                ],
                "margin": "md"
              }
            ],
            "margin": "md"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "spacer",
                "size": "xxl"
              }
            ],
            "margin": "xxl"
          }
        ],
        "margin": "xxl"
      }
    ],
    "paddingAll": "0px"
  }
},{
  "type": "bubble",
  "body": {
    "type": "box",
    "layout": "vertical",
    "contents": [
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "spacer"
          },
          {
            "type": "box",
            "layout": "baseline",
            "contents": [
              {
                "type": "icon",
                "url": "https://i.ibb.co/zHkYgV7/left.png",
                "offsetStart": "10px"
              },
              {
                "type": "text",
                "color": "#Ffffff",
                "text": "Friend search",
                "size": "md",
                "offsetStart": "20px"
              }
            ],
            "margin": "md"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "spacer",
                "size": "lg"
              }
            ]
          }
        ],
        "backgroundColor": "#464F69"
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "spacer",
            "size": "xxl"
          },
          {
            "type": "box",
            "layout": "horizontal",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "."
                  }
                ],
                "offsetStart": "10px",
                "cornerRadius": "xl",
                "borderColor": "#adb5bd",
                "borderWidth": "6px",
                "width": "20px",
                "height": "20px"
              },
              {
                "type": "text",
                "text": "ID",
                "offsetStart": "18px"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "."
                  }
                ],
                "width": "20px",
                "height": "20px",
                "cornerRadius": "xl",
                "borderWidth": "6px",
                "backgroundColor": "#adb5bd",
                "offsetEnd": "85px"
              },
              {
                "type": "text",
                "text": "Phone number",
                "offsetEnd": "75px"
              }
            ]
          },
          {
            "type": "spacer"
          }
        ]
      },
      {
        "type": "box",
        "layout": "horizontal",
        "contents": [
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "text": "zarifbirbey",
                "offsetStart": "10px",
                "size": "sm"
              }
            ],
            "borderColor": "#adb5bd",
            "borderWidth": "1px",
            "offsetStart": "10px"
          },
          {
            "type": "spacer",
            "size": "xxl"
          }
        ]
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "filler"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact('u5d854616fc8ea66893e7a85b7cb0b9f1').pictureStatus),
                "aspectMode": "cover",
                "size": "full"
              }
            ],
            "margin": "xxl",
            "cornerRadius": "100px",
            "height": "72px",
            "width": "72px",
            "offsetStart": "110px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "text": "{}".format(zarifoglu.getContact('u5d854616fc8ea66893e7a85b7cb0b9f1').displayName),
                "size": "md",
                "color": "#000000",
                "weight": "bold",
                "align": "center"
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Add Friend",
                        "size": "sm",
                        "color": "#Ffffff",
                        "align": "center"
                      }
                    ],
                    "borderWidth": "1px",
                    "backgroundColor": "#008000",
                    "action": {
                      "type": "uri",
                      "label": "action",
                      "uri": "http://line.me/ti/p/~zarifbirbey"
                    }
                  },
                  {
                    "type": "filler"
                  }
                ],
                "margin": "md"
              }
            ],
            "margin": "md"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "spacer",
                "size": "xxl"
              }
            ],
            "margin": "xxl"
          }
        ],
        "margin": "xxl"
      }
    ],
    "paddingAll": "0px"
  }
},{
  "type": "bubble",
  "body": {
    "type": "box",
    "layout": "vertical",
    "contents": [
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "spacer"
          },
          {
            "type": "box",
            "layout": "baseline",
            "contents": [
              {
                "type": "icon",
                "url": "https://i.ibb.co/zHkYgV7/left.png",
                "offsetStart": "10px"
              },
              {
                "type": "text",
                "color": "#Ffffff",
                "text": "Friend search",
                "size": "md",
                "offsetStart": "20px"
              }
            ],
            "margin": "md"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "spacer",
                "size": "lg"
              }
            ]
          }
        ],
        "backgroundColor": "#464F69"
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "spacer",
            "size": "xxl"
          },
          {
            "type": "box",
            "layout": "horizontal",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "."
                  }
                ],
                "offsetStart": "10px",
                "cornerRadius": "xl",
                "borderColor": "#adb5bd",
                "borderWidth": "6px",
                "width": "20px",
                "height": "20px"
              },
              {
                "type": "text",
                "text": "ID",
                "offsetStart": "18px"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "."
                  }
                ],
                "width": "20px",
                "height": "20px",
                "cornerRadius": "xl",
                "borderWidth": "6px",
                "backgroundColor": "#adb5bd",
                "offsetEnd": "85px"
              },
              {
                "type": "text",
                "text": "Phone number",
                "offsetEnd": "75px"
              }
            ]
          },
          {
            "type": "spacer"
          }
        ]
      },
      {
        "type": "box",
        "layout": "horizontal",
        "contents": [
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "text": "zarifbirbey",
                "offsetStart": "10px",
                "size": "sm"
              }
            ],
            "borderColor": "#adb5bd",
            "borderWidth": "1px",
            "offsetStart": "10px"
          },
          {
            "type": "spacer",
            "size": "xxl"
          }
        ]
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "filler"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact('u8894217061510fa60bf2592338441704').pictureStatus),
                "aspectMode": "cover",
                "size": "full"
              }
            ],
            "margin": "xxl",
            "cornerRadius": "100px",
            "height": "72px",
            "width": "72px",
            "offsetStart": "110px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "text": "{}".format(zarifoglu.getContact('u8894217061510fa60bf2592338441704').displayName),
                "size": "md",
                "color": "#000000",
                "weight": "bold",
                "align": "center"
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Add Friend",
                        "size": "sm",
                        "color": "#Ffffff",
                        "align": "center"
                      }
                    ],
                    "borderWidth": "1px",
                    "backgroundColor": "#008000",
                    "action": {
                      "type": "uri",
                      "label": "action",
                      "uri": "http://line.me/ti/p/~zarifbirbey"
                    }
                  },
                  {
                    "type": "filler"
                  }
                ],
                "margin": "md"
              }
            ],
            "margin": "md"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "spacer",
                "size": "xxl"
              }
            ],
            "margin": "xxl"
          }
        ],
        "margin": "xxl"
      }
    ],
    "paddingAll": "0px"
  }}]}}
    sendTemplate(to,data)
def helpss(to):
    ret_ = helpers(to)
    k = len(ret_)//10
    for aa in range(k+1):
        data = {
            "type": "flex",
            "altText": "Help",
            "contents": {
                "type": "carousel",
                "contents": ret_[aa*10 : (aa+1)*10]
            }
        }
        sendTemplate(to, data)
def freesb(to):
	data={"type":"flex","altText":settings["bayrak"],"contents":{
  "type": "carousel",
  "contents": [
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "image",
#            "url": "https://i.ibb.co/kB76BHC/IMG-20191124-115330.jpg",
            "url": str(zarifoglu.getProfileCoverURL(zarifogluMID)),
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "œÅŒ±—áƒ±…îŒ±—è ∆®Œµ ü“ì–≤œÉ—Ç",
                    "size": "xl",
                    "align": "center",
                    "color": "{}".format(setbot["text"]),
                    "weight": "bold"
                  }
                ]
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "spacer",
                    "size": "xxl"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "spacer",
                            "size": "xxl"
                          }
                        ]
                      },
                      {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                          {
                            "type": "text",
                            "text": "Chatbot",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Chatbot"
                            }
                          },
                          {
                            "type": "text",
                            "text": "Feature",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Feature"
                            }
                          },
                          {
                            "type": "text",
                            "text": "Images",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Images"
                            }
                          }
                        ]
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "spacer",
                            "size": "xxl"
                          }
                        ]
                      },
                      {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                          {
                            "type": "text",
                            "text": "Profile",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Profile"
                            }
                          },
                          {
                            "type": "text",
                            "text": "Protect",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Protect"
                            }
                          },
                          {
                            "type": "text",
                            "text": "Social",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Social"
                            }
                          }
                        ]
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "spacer",
                            "size": "xxl"
                          }
                        ]
                      },
                      {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                          {
                            "type": "text",
                            "text": "Timeline",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Timeline"
                            }
                          },
                          {
                            "type": "text",
                            "text": "Translate",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Translate"
                            },
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center"
                          },
                          {
                            "type": "text",
                            "text": "Settings",
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Settings"
                            },
                            "size": "xs",
                            "color": "{}".format(setbot["text"])
                          }
                        ]
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "spacer",
                            "size": "xxl"
                          }
                        ]
                      }
                    ],
                    "borderColor": "{}".format(setbot["separator"]),
                    "borderWidth": "5px"
                  }
                ]
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "backgroundColor": "#000000cc",
            "paddingAll": "20px",
            "paddingTop": "18px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://obs.line-scdn.net/" + zarifoglu.profile.pictureStatus
              }
            ],
            "position": "absolute",
            "offsetTop": "50px",
            "height": "100px",
            "width": "100px",
            "borderWidth": "4px",
            "borderColor": "{}".format(setbot["separator"]),
            "cornerRadius": "100px",
            "offsetStart": "95px"
          }
        ],
        "paddingAll": "0px",
        "cornerRadius": "xl",
        "borderColor": "{}".format(setbot["separator"]),
        "borderWidth": "4px"
      }
    },
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "image",
#            "url": "https://i.ibb.co/6bWK84V/Screenshot-2019-11-24-11-57-59-87.png",
            "url": str(zarifoglu.getProfileCoverURL(zarifogluMID)),
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "œÅŒ±—áƒ±…îŒ±—è ∆®Œµ ü“ì–≤œÉ—Ç",
                    "size": "xl",
                    "align": "center",
                    "color": "{}".format(setbot["text"]),
                    "weight": "bold"
                  }
                ]
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "spacer",
                    "size": "xxl"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "spacer",
                            "size": "xxl"
                          }
                        ]
                      },
                      {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                          {
                            "type": "text",
                            "text": "Banning",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Banning"
                            }
                          },
                          {
                            "type": "text",
                            "text": "Wordban",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Wordban"
                            }
                          },
                          {
                            "type": "text",
                            "text": "Friend",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Friend"
                            }
                          }
                        ]
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "spacer",
                            "size": "xxl"
                          }
                        ]
                      },
                      {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                          {
                            "type": "text",
                            "text": "Self",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Self"
                            }
                          },
                          {
                            "type": "text",
                            "text": "Memegen",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Memegen"
                            }
                          },
                          {
                            "type": "text",
                            "text": "Kick",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Kick"
                            }
                          }
                        ]
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "spacer",
                            "size": "xxl"
                          }
                        ]
                      },
                      {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                          {
                            "type": "text",
                            "text": "Utility",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Utility"
                            }
                          },
                          {
                            "type": "text",
                            "text": "Github",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Github"
                            },
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center"
                          },
                          {
                            "type": "text",
                            "text": "Maker",
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Maker"
                            },
                            "size": "xs",
                            "color": "{}".format(setbot["text"])
                          }
                        ]
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "spacer",
                            "size": "xxl"
                          }
                        ]
                      }
                    ],
                    "borderColor": "{}".format(setbot["separator"]),
                    "borderWidth": "5px"
                  }
                ]
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "backgroundColor": "#000000cc",
            "paddingAll": "20px",
            "paddingTop": "18px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://obs.line-scdn.net/" + zarifoglu.profile.pictureStatus
              }
            ],
            "position": "absolute",
            "offsetTop": "50px",
            "height": "100px",
            "width": "100px",
            "borderWidth": "4px",
            "borderColor": "{}".format(setbot["separator"]),
            "cornerRadius": "100px",
            "offsetStart": "95px"
          }
        ],
        "paddingAll": "0px",
        "cornerRadius": "xl",
        "borderColor": "{}".format(setbot["separator"]),
        "borderWidth": "4px"
      }
    },
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "image",
#            "url": "https://i.ibb.co/0Y6NPwj/IMG-20191124-115313.jpg",
            "url": str(zarifoglu.getProfileCoverURL(zarifogluMID)),
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "œÅŒ±—áƒ±…îŒ±—è ∆®Œµ ü“ì–≤œÉ—Ç",
                    "size": "xl",
                    "align": "center",
                    "color": "{}".format(setbot["text"]),
                    "weight": "bold"
                  }
                ]
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "spacer",
                    "size": "xxl"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "spacer",
                            "size": "xxl"
                          }
                        ]
                      },
                      {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                          {
                            "type": "text",
                            "text": "Group",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Group"
                            }
                          },
                          {
                            "type": "text",
                            "text": "Mention",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Mention"
                            }
                          },
                          {
                            "type": "text",
                            "text": "Steal",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Steal"
                            }
                          }
                        ]
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "spacer",
                            "size": "xxl"
                          }
                        ]
                      },
                      {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                          {
                            "type": "text",
                            "text": "List",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=List"
                            }
                          },
                          {
                            "type": "text",
                            "text": "Bcast",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Bcast"
                            }
                          },
                          {
                            "type": "text",
                            "text": "Leave",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Leave"
                            }
                          }
                        ]
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "spacer",
                            "size": "xxl"
                          }
                        ]
                      },
                      {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                          {
                            "type": "text",
                            "text": "Reboot",
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Reboot"
                            }
                          },
                          {
                            "type": "text",
                            "text": "Timeleft",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Timeleft"
                            },
                            "size": "xs",
                            "color": "{}".format(setbot["text"]),
                            "align": "center"
                          },
                          {
                            "type": "text",
                            "text": "Logout",
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Logout"
                            },
                            "size": "xs",
                            "color": "{}".format(setbot["text"])
                          }
                        ]
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "spacer",
                            "size": "xxl"
                          }
                        ]
                      }
                    ],
                    "borderColor": "{}".format(setbot["separator"]),
                    "borderWidth": "5px"
                  }
                ]
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "backgroundColor": "#000000cc",
            "paddingAll": "20px",
            "paddingTop": "18px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://obs.line-scdn.net/" + zarifoglu.profile.pictureStatus
              }
            ],
            "position": "absolute",
            "offsetTop": "50px",
            "height": "100px",
            "width": "100px",
            "borderWidth": "4px",
            "borderColor": "{}".format(setbot["separator"]),
            "cornerRadius": "100px",
            "offsetStart": "95px"
          }
        ],
        "paddingAll": "0px",
        "cornerRadius": "xl",
        "borderColor": "{}".format(setbot["separator"]),
        "borderWidth": "4px"
      }
    }
  ]
}}
	sendTemplate(to,data)

def test7(to):
    data = {"type":"flex","altText":"Zeryuu Unsend","contents":{"type":"bubble","body":{"type":"box","layout":"vertical","contents":[{"type":"image","url":"https://i.ibb.co/LnxW4fv/border3.png%22,%22size%22:%22full%22,%22aspectMode%22:%22cover%22,%22aspectRatio%22:%2210:12%22,%22backgroundColor%22:%22#7efff5"},{"type":"box","layout":"vertical","contents":[{"type":"text","text":"„Äå Unsend „Äç","align":"center","size":"md"},{"type":"box","layout":"vertical","margin":"lg","contents":[{"type":"box","layout":"horizontal","contents":[{"type":"text","size":"sm","wrap":True,"contents":[{"type":"span","text":"‚ï≠ "},{"type":"span","text":"Detect Status","weight":"bold"}]},{"type":"text","text":"Not Active","size":"sm","wrap":True}]},{"type":"box","layout":"horizontal","contents":[{"type":"text","size":"sm","wrap":True,"contents":[{"type":"span","text":"‚îú "},{"type":"span","text":"Auto Status","weight":"bold"}]},{"type":"text","text":"Not Active","size":"sm","wrap":True}]},{"type":"box","layout":"horizontal","contents":[{"type":"text","size":"sm","wrap":True,"contents":[{"type":"span","text":"‚îú "},{"type":"span","text":"Auto Timer","weight":"bold"}]},{"type":"text","text":"Every 1 Hour","size":"sm","wrap":True}]},{"type":"box","layout":"horizontal","contents":[{"type":"text","size":"sm","wrap":True,"contents":[{"type":"span","text":"‚îú "},{"type":"span","text":"Info","weight":"bold"}]},{"type":"text","text":"Found 8 message send in this room","size":"sm","wrap":True}]},{"type":"text","size":"sm","wrap":True,"contents":[{"type":"span","text":"‚îú "},{"type":"span","text":"Usage","weight":"bold"}]},{"type":"text","text":"‚îÇ ‚å¨ Zeryuu Unsend","size":"sm","wrap":True,"action":{"type":"uri","label":"action","uri":"line://app/1584968724-qzg0aR95?type=text&text=Zeryuu Unsend"}},{"type":"text","text":"‚îÇ ‚å¨ Zeryuu Unsend <num>","size":"sm","wrap":True,"action":{"type":"uri","label":"action","uri":"line://app/1584968724-qzg0aR95?type=text&text=Zeryuu Unsend [num]"}},{"type":"text","text":"‚îÇ ‚å¨ Zeryuu Unsend Detect <on/off>","size":"sm","wrap":True,"action":{"type":"uri","label":"action","uri":"line://app/1584968724-qzg0aR95?type=text&text=Zeryuu Unsend Detect [on/off]"}},{"type":"text","text":"‚îÇ ‚å¨ Zeryuu Unsend Detect Reset","size":"sm","wrap":True,"action":{"type":"uri","label":"action","uri":"line://app/1584968724-qzg0aR95?type=text&text=Zeryuu Unsend Detect Reset"}},{"type":"text","text":"‚îÇ ‚å¨ Zeryuu Unsend Auto <on/off>","size":"sm","wrap":True,"action":{"type":"uri","label":"action","uri":"line://app/1584968724-qzg0aR95?type=text&text=Zeryuu Unsend Auto [on/off]"}},{"type":"text","text":"‚ï∞ ‚å¨ Zeryuu Unsend Timer <seconds>","size":"sm","wrap":True,"action":{"type":"uri","label":"action","uri":"line://app/1584968724-qzg0aR95?type=text&text=Zeryuu%20Unsend%20Timer%20[seconds]"}},{"type":"box","layout":"horizontal","contents":[{"type":"box","layout":"vertical","contents":[{"type":"image","url":"https://obs.line-apps.com/os/p/u787683ce5c9e4dc69d8067573b311a7b%22,%22size%22:%22full%22,%22aspectMode%22:%22cover"}],"width":"40px","height":"40px","cornerRadius":"100px","borderColor":"#a29bfe","borderWidth":"2px"},{"type":"text","text":"Zeryuuüå∫","align":"start","gravity":"center","size":"sm","margin":"xl","weight":"bold"}],"margin":"xxl"}]}],"position":"absolute","paddingAll":"20px"}],"paddingAll":"0px"}}}
    sendTemplate(to, data)

def helpers(to):
    ret_ = []
    ret_.append(
        {
            "styles": {"body": {"backgroundColor": "{}".format(setbot["background"])},"header": {"backgroundColor": "{}".format(setbot["background"])}},
            "type": "bubble",
            "body": {"contents": [{
                "type": "box",
                "layout": "baseline",
                "contents": [
                    {
                        "type": "spacer",
                        "size": "xxl"
                    },
                    {
                        "contents": [{
                        "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                        "size": "xxs",
                        "type": "image",
                        "action": {
                        "type": "uri",
                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Chatbot"
                    }
                }, {
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Feature"
                                                    }
                                                },{
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                   "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Images"
                                                    }
                                                }],
                                                "layout": "horizontal",
                                                "type": "box",
                                                "flex": 1
                                            }, 
                                                                 {
        "type": "box",
        "layout": "horizontal",
        "spacing": "xxl",       
        "contents": [
          {
            "type": "text", 
            "text": 'Chatbot',
            "color": "{}".format(setbot["text"]),
            "size": "xs",
            "align": "center",
          },
          {
            "type": "text",
            "text": 'Feature',
            "color": "{}".format(setbot["text"]),
            "size": "xs",
            "align": "center"
          },
          {
            "type": "text", 
            "text": 'Images',
            "color": "{}".format(setbot["text"]),
            "size": "xs"
          }
        ]
      },
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "contents": [
              {
       "type": "spacer",
       "size": "xl"
     },
              {
                                                "contents": [{
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Profile"
                                                    }
                                                }, {
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Protect"
                                                    }
                                                },{
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Social"
                                                    }
                                                }],
                                                "layout": "horizontal",
                                                "type": "box",
                                                "flex": 1
                                            }, 
                                                                 {
        "type": "box",
        "layout": "horizontal",
        "spacing": "xxl",
        "contents": [
          {
            "type": "text", 
            "text": 'Profile',
            "color": "{}".format(setbot["text"]),
            "size": "xs",
            "align": "center",
          },
          {
            "type": "text",
            "text": 'Protect',
            "color": "{}".format(setbot["text"]),
            "size": "xs",
            "align": "center"
          },
          {
            "type": "text", 
            "text": 'Social',
            "color": "{}".format(setbot["text"]),
            "size": "xs"
          }
        ]
      },
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "contents": [
              {
       "type": "spacer",
       "size": "xl"
     },
              {
                                                "contents": [{
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Timeline"
                                                    }
                                                }, {
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Translate"
                                                    }
                                                },{
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Settings"
                                                    }
                                                }],
                                                "layout": "horizontal",
                                                "type": "box",
                                                "flex": 1
                                            }, 
                                                                 {
        "type": "box",
        "layout": "horizontal",
        "spacing": "xxl",
        "contents": [
          {
            "type": "text", 
            "text": 'Timeline',
            "color": "{}".format(setbot["text"]),
            "size": "xs",
            "align": "center",
          },
          {
            "type": "text",
            "text": 'Translate',
            "color": "{}".format(setbot["text"]),
            "size": "xs",
            "align": "center"
          },
          {
            "type": "text", 
            "text": 'Settings',
            "color": "{}".format(setbot["text"]),
            "size": "xs"
          }
        ]
      },
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "contents": [
              {
       "type": "spacer",
       "size": "xl"
     },
],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          }  
        ],
        "type": "box",
        "spacing": "xs",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "{}".format(setbot["separator"])
      }
    }
    )
    ret_.append(
        {
            "styles": {"body": {"backgroundColor": "{}".format(setbot["background"])},"header": {"backgroundColor": "{}".format(setbot["background"])}},
            "type": "bubble",
            "body": {"contents": [{
                "type": "box",
                "layout": "baseline",
                "contents": [
                    {
                        "type": "spacer",
                        "size": "xxl"
                    },
                    {
                        "contents": [{
                        "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                        "size": "xxs",
                        "type": "image",
                        "action": {
                        "type": "uri",
                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Banning"
                    }
                }, {
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Wordban"
                                                    }
                                                },{
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                   "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Friend"
                                                    }
                                                }],
                                                "layout": "horizontal",
                                                "type": "box",
                                                "flex": 1
                                            }, 
                                                                 {
        "type": "box",
        "layout": "horizontal",
        "spacing": "xxl",       
        "contents": [
          {
            "type": "text", 
            "text": 'Banning',
            "color": "{}".format(setbot["text"]),
            "size": "xs",
            "align": "center",
          },
          {
            "type": "text",
            "text": 'Wordban',
            "color": "{}".format(setbot["text"]),
            "size": "xs",
            "align": "center"
          },
          {
            "type": "text", 
            "text": 'Friend',
            "color": "{}".format(setbot["text"]),
            "size": "xs"
          }
        ]
      },
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "contents": [
              {
       "type": "spacer",
       "size": "xl"
     },
              {
                                                "contents": [{
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Self"
                                                    }
                                                }, {
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Memegen"
                                                    }
                                                },{
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Kick"
                                                    }
                                                }],
                                                "layout": "horizontal",
                                                "type": "box",
                                                "flex": 1
                                            }, 
                                                                 {
        "type": "box",
        "layout": "horizontal",
        "spacing": "xxl",
        "contents": [
          {
            "type": "text", 
            "text": 'Self',
            "color": "{}".format(setbot["text"]),
            "size": "xs",
            "align": "center",
          },
          {
            "type": "text",
            "text": 'Memegen',
            "color": "{}".format(setbot["text"]),
            "size": "xs",
            "align": "center"
          },
          {
            "type": "text", 
            "text": 'Kick',
            "color": "{}".format(setbot["text"]),
            "size": "xs"
          }
        ]
      },
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "contents": [
              {
       "type": "spacer",
       "size": "xl"
     },
              {
                                                "contents": [{
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Utility"
                                                    }
                                                }, {
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Github"
                                                    }
                                                },{
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=About"
                                                    }
                                                }],
                                                "layout": "horizontal",
                                                "type": "box",
                                                "flex": 1
                                            }, 
                                                                 {
        "type": "box",
        "layout": "horizontal",
        "spacing": "xxl",
        "contents": [
          {
            "type": "text", 
            "text": 'Utility',
            "color": "{}".format(setbot["text"]),
            "size": "xs",
            "align": "center",
          },
          {
            "type": "text",
            "text": 'Github',
            "color": "{}".format(setbot["text"]),
            "size": "xs",
            "align": "center"
          },
          {
            "type": "text", 
            "text": 'About',
            "color": "{}".format(setbot["text"]),
            "size": "xs"
          }
        ]
      },
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "contents": [
              {
       "type": "spacer",
       "size": "xl"
     },
],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          }  
        ],
        "type": "box",
        "spacing": "xs",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "{}".format(setbot["separator"])
      }
    }
    )
    ret_.append(
        {
            "styles": {"body": {"backgroundColor": "{}".format(setbot["background"])},"header": {"backgroundColor": "{}".format(setbot["background"])}},
            "type": "bubble",
            "body": {"contents": [{
                "type": "box",
                "layout": "baseline",
                "contents": [
                    {
                        "type": "spacer",
                        "size": "xxl"
                    },
                    {
                        "contents": [{
                        "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                        "size": "xxs",
                        "type": "image",
                        "action": {
                        "type": "uri",
                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Group"
                    }
                }, {
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Mention"
                                                    }
                                                },{
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                   "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Steal"
                                                    }
                                                }],
                                                "layout": "horizontal",
                                                "type": "box",
                                                "flex": 1
                                            }, 
                                                                 {
        "type": "box",
        "layout": "horizontal",
        "spacing": "xxl",       
        "contents": [
          {
            "type": "text", 
            "text": 'Group',
            "color": "{}".format(setbot["text"]),
            "size": "xs",
            "align": "center",
          },
          {
            "type": "text",
            "text": 'Mention',
            "color": "{}".format(setbot["text"]),
            "size": "xs",
            "align": "center"
          },
          {
            "type": "text", 
            "text": 'Steal',
            "color": "{}".format(setbot["text"]),
            "size": "xs"
          }
        ]
      },
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "contents": [
              {
       "type": "spacer",
       "size": "xl"
     },
              {
                                                "contents": [{
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=List"
                                                    }
                                                }, {
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Bcast"
                                                    }
                                                },{
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Leave"
                                                    }
                                                }],
                                                "layout": "horizontal",
                                                "type": "box",
                                                "flex": 1
                                            }, 
                                                                 {
        "type": "box",
        "layout": "horizontal",
        "spacing": "xxl",
        "contents": [
          {
            "type": "text", 
            "text": 'List',
            "color": "{}".format(setbot["text"]),
            "size": "xs",
            "align": "center",
          },
          {
            "type": "text",
            "text": 'Bcast',
            "color": "{}".format(setbot["text"]),
            "size": "xs",
            "align": "center"
          },
          {
            "type": "text", 
            "text": 'Leave',
            "color": "{}".format(setbot["text"]),
            "size": "xs"
          }
        ]
      },
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "contents": [
              {
       "type": "spacer",
       "size": "xl"
     },
              {
                                                "contents": [{
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Reboot"
                                                    }
                                                }, {
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Timeleft"
                                                    }
                                                },{
                                                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                    "size": "xxs",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Logout"
                                                    }
                                                }],
                                                "layout": "horizontal",
                                                "type": "box",
                                                "flex": 1
                                            }, 
                                                                 {
        "type": "box",
        "layout": "horizontal",
        "spacing": "xxl",
        "contents": [
          {
            "type": "text", 
            "text": 'Reboot',
            "color": "{}".format(setbot["text"]),
            "size": "xs",
            "align": "center",
          },
          {
            "type": "text",
            "text": 'Timeleft',
            "color": "{}".format(setbot["text"]),
            "size": "xs",
            "align": "center"
          },
          {
            "type": "text", 
            "text": 'Logout',
            "color": "{}".format(setbot["text"]),
            "size": "xs"
          }
        ]
      },
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "contents": [
              {
       "type": "spacer",
       "size": "xl"
     },
],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          }  
        ],
        "type": "box",
        "spacing": "xs",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "{}".format(setbot["separator"])
      }
    }
    )
    return ret_

def oldflex(to, text):
    data = {
    "type": "flex",
    "altText": text,
    "contents": {
    "type": "bubble",
    "styles": {
    "footer": {
    "backgroundColor": "{}".format(setbot["background"])
    }
    },
    "footer": {
    "type": "box",
    "layout": "vertical",
     "cornerRadius": "xl",
    "borderWidth": "4px",
    "borderColor": "{}".format(setbot["separator"]),
    "spacing": "sm",
    "contents": [
    {
    "type": "box",
    "layout": "baseline",
    "contents": [
    {
    "type": "icon",
    "url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus),
    "size": "lg"
    },
    {
    "type": "text",
    "text": text,
    "color": "{}".format(setbot["text"]),
    "gravity": "center",
    "align":"center",
    "wrap": True,
    "size": "md"
    },
    {
    "type": "icon",
    "url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus),
    "size": "lg"
    }, 
    ]
    }
    ]
    }
    }
    }
    sendTemplate(to, data)
def MyFooter(to, isi):
    data = {
        "type": "text",
        "text": isi,
        "sentBy": {
            "label": settings["bayrak"],
            "iconUrl": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
            "linkUrl": "https://line.me/ti/p/~" + zarifoglu.profile.userid
        }
    }
    sendTemplate(to, data)

def hmmk():
    spam = """
    .1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.
    .1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.
    .1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.
    .1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.0.S.1.
"""
    return spam

def crash1():
    spam = """
	T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0
    T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.00.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.T.U.R.K.E.Y0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0
	  """
    return spam

def mekz(to, isinya):
    data = {
        "type": "flex",
        "altText": settings["bayrak"],
        "contents": {
            "type": "carousel",
            "contents": [
              {
                "type": "bubble",
                "body": {
                "type": "box",
                "layout": "vertical",
                "cornerRadius": "xl",
                "borderWidth": "4px",
                "borderColor": "#FFFFFF",
                "contents": [
                  {
                    "type": "image",
                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                    "size": "full",
                    "aspectMode": "cover",
                    "aspectRatio": "1:1",
                    "gravity": "top"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "box",
                        "layout": "baseline",
                        "contents": [
                          {
                            "type": "text",
                            "text": isinya,
                            "color": "{}".format(setbot["text"]),
                            "wrap": True,
                            "size": "sm",
                            "flex": 0
                          }
                        ],
                        "spacing": "lg"
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "filler"
                          },
                          {
                            "type": "box",
                            "layout": "baseline",
                            "contents": [
                              {
                                "type": "filler"
                              },
                              {
                                "type": "text",
                                "text": settings["bayrak"],
                                "weight": "bold",
                                "action": {
                                  "type": "uri",
                                  "uri": "line://nv/profilePopup/mid=u481a911a50dcd7c30fb3907c8fbe31ba"
                                },
                                "color": "#ffffff",
                                "flex": 0,
                                "offsetTop": "-2px"
                              },
                              {
                                "type": "filler"
                              }
                            ],
                            "spacing": "sm"
                          },
                          {
                            "type": "filler"
                          }
                        ],
                        "borderWidth": "1px",
                        "cornerRadius": "4px",
                        "spacing": "sm",
                        "borderColor": "{}".format(setbot["separator"]),
                        "margin": "xxl",
                        "height": "40px"
                      }
                    ],
                    "position": "absolute",
                    "offsetBottom": "0px",
                    "offsetStart": "0px",
                    "offsetEnd": "0px",
                    "backgroundColor": "#000000cc",
                    "paddingAll": "20px",
                    "paddingTop": "18px"
                  }
                ],
                "paddingAll": "0px"
            }
          } 
        ]
      } 
    }
    sendTemplate(to, data)
def ub64(url):
    hasil = base64.b64encode(url.encode())
    return hasil.decode('utf-8')
def flex(to):
    data = {
                                            "type": "flex","altText": "help Message",
                                            "contents": {
                                                "type": "bubble",
                                                "styles": {
                                                        "header": {"backgroundColor": "{}".format(setbot["background"])},
                                                        "body": {"backgroundColor": "{}".format(setbot["background"]),"separator": True,"separatorColor": "{}".format(setbot["separator"])}, 
                                                        "footer": { "backgroundColor": "{}".format(setbot["background"]),"separator": True,"separatorColor": "{}".format(setbot["separator"])}},
                                                "header": {
                                                    "type": "box",
                                                    "layout": "horizontal",
                                                    "contents": [{
                                                            "type": "box",
                                                            "layout": "vertical",
                                                            "margin": "lg",
                                                            "spacing": "sm",
                                                            "contents": [{
                                                                    "type": "box",
                                                                    "layout": "baseline",
                                                                    "spacing": "sm",
                                                                    "contents": [{
                                                                            "type": "text","align": "center",
                                                                            "text": "HELP MESSAGE",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "weight": "bold",
                                                                            "wrap": True,
                                                                            "size": "xl",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Help"}, 
                                                                            "flex": 5
                                                                        }]}]}]},
                                                "body": {"type": "box","layout": "vertical",
                                                    "contents": [{
                                                            "type": "box",
                                                            "layout": "vertical",
                                                            "margin": "lg",
                                                            "spacing": "sm",
                                                            "contents": [{
                                                                    "type": "box",
                                                                    "layout": "baseline",
                                                                    "spacing": "sm",
                                                                    "contents": [{
                                                                            "type": "text",
                                                                            "text": "Chatbot",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "wrap": True,
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Chatbot"}, 
                                                                            "flex": 0
                                                                        },{
                                                                            "type": "text",
                                                                            "text": "Feature",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Feature"}, 
                                                                            "flex": 5
                                                                 },{
                                                                            "type": "text",
                                                                            "text": "Images",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Images"}, 
                                                                            "flex": 0
}]}]},
                                                        {
                                                            "type": "box",
                                                            "layout": "vertical",
                                                            "margin": "lg",
                                                            "spacing": "sm",
                                                            "contents": [{
                                                                    "type": "box",
                                                                    "layout": "baseline",
                                                                    "spacing": "sm",
                                                                    "contents": [{
                                                                            "type": "text",
                                                                            "text": "Profile",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "wrap": True,
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Profile"}, 
                                                                            "flex": 0
                                                                        },{
                                                                            "type": "text",
                                                                            "text": "Protect",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Protect"}, 
                                                                            "flex": 5
                                                                 },{
                                                                            "type": "text",
                                                                            "text": "Social",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Social"}, 
                                                                            "flex": 0
}]}]},
                                                        {
                                                            "type": "box",
                                                            "layout": "vertical",
                                                            "margin": "lg",
                                                            "spacing": "sm",
                                                            "contents": [{
                                                                    "type": "box",
                                                                    "layout": "baseline",
                                                                    "spacing": "sm",
                                                                    "contents": [{
                                                                            "type": "text",
                                                                            "text": "Timeline",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "wrap": True,
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Timeline"}, 
                                                                            "flex": 0
                                                                        },{
                                                                            "type": "text",
                                                                            "text": "Translate",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Translate"}, 
                                                                            "flex": 5
                                                                 },{
                                                                            "type": "text",
                                                                            "text": "Settings",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Settings"}, 
                                                                            "flex": 0
}]}]},
                                                        {
                                                            "type": "box",
                                                            "layout": "vertical",
                                                            "margin": "lg",
                                                            "spacing": "sm",
                                                            "contents": [{
                                                                    "type": "box",
                                                                    "layout": "baseline",
                                                                    "spacing": "sm",
                                                                    "contents": [{
                                                                            "type": "text",
                                                                            "text": "Banning",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "wrap": True,
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Banning"}, 
                                                                            "flex": 0
                                                                        },{
                                                                            "type": "text",
                                                                            "text": "Wordban",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Wordban"}, 
                                                                            "flex": 5
                                                                 },{
                                                                            "type": "text",
                                                                            "text": "Friend",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Friend"}, 
                                                                            "flex": 0
}]}]},
                                                        {
                                                            "type": "box",
                                                            "layout": "vertical",
                                                            "margin": "lg",
                                                            "spacing": "sm",
                                                            "contents": [{
                                                                    "type": "box",
                                                                    "layout": "baseline",
                                                                    "spacing": "sm",
                                                                    "contents": [{
                                                                            "type": "text",
                                                                            "text": "Self",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "wrap": True,
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Self"}, 
                                                                            "flex": 0
                                                                        },{
                                                                            "type": "text",
                                                                            "text": "Memegen",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Memegen"}, 
                                                                            "flex": 5
                                                                 },{
                                                                            "type": "text",
                                                                            "text": "Kick",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Kick"}, 
                                                                            "flex": 0
}]}]},
                                                        {
                                                            "type": "box",
                                                            "layout": "vertical",
                                                            "margin": "lg",
                                                            "spacing": "sm",
                                                            "contents": [{
                                                                    "type": "box",
                                                                    "layout": "baseline",
                                                                    "spacing": "sm",
                                                                    "contents": [{
                                                                            "type": "text",
                                                                            "text": "Utility",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "wrap": True,
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Utility"}, 
                                                                            "flex": 0
                                                                        },{
                                                                            "type": "text",
                                                                            "text": "Github",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Github"}, 
                                                                            "flex": 5
                                                                 },{
                                                                            "type": "text",
                                                                            "text": "About",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=About"}, 
                                                                            "flex": 0
}]}]},
                                                        {
                                                            "type": "box",
                                                            "layout": "vertical",
                                                            "margin": "lg",
                                                            "spacing": "sm",
                                                            "contents": [{
                                                                    "type": "box",
                                                                    "layout": "baseline",
                                                                    "spacing": "sm",
                                                                    "contents": [{
                                                                            "type": "text",
                                                                            "text": "Group",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "wrap": True,
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Group"}, 
                                                                            "flex": 0
                                                                        },{
                                                                            "type": "text",
                                                                            "text": "Mention",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Mention"}, 
                                                                            "flex": 5
                                                                 },{
                                                                            "type": "text",
                                                                            "text": "Steal",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Steal"}, 
                                                                            "flex": 0
}]}]},
                                                        {
                                                            "type": "box",
                                                            "layout": "vertical",
                                                            "margin": "lg",
                                                            "spacing": "sm",
                                                            "contents": [{
                                                                    "type": "box",
                                                                    "layout": "baseline",
                                                                    "spacing": "sm",
                                                                    "contents": [{
                                                                            "type": "text",
                                                                            "text": "List",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "wrap": True,
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=List"}, 
                                                                            "flex": 0
                                                                        },{
                                                                            "type": "text",
                                                                            "text": "Bcast",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Bcast"}, 
                                                                            "flex": 5
                                                                 },{
                                                                            "type": "text",
                                                                            "text": "Leave",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Leave"}, 
                                                                            "flex": 0
}]}]},
                                                        {
                                                            "type": "box",
                                                            "layout": "vertical",
                                                            "margin": "lg",
                                                            "spacing": "sm",
                                                            "contents": [{
                                                                    "type": "box",
                                                                    "layout": "baseline",
                                                                    "spacing": "sm",
                                                                    "contents": [{
                                                                            "type": "text",
                                                                            "text": "Reboot",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "wrap": True,
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Reboot"}, 
                                                                            "flex": 0
                                                                        },{
                                                                            "type": "text",
                                                                            "text": "Timeleft",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Timeleft"}, 
                                                                            "flex": 5
                                                                 },{
                                                                            "type": "text",
                                                                            "text": "Logout",
                                                                            "align": "center",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "line://app/1597127494-QDP2OlYl?type=fotext&text=Logout"}, 
                                                                            "flex": 0
}]}]},
]},"footer": {"type": "box","layout": "vertical","spacing": "sm",
                                                    "contents": [{"type": "text","align": "center",
                                                                            "text": "USAGE : CLICK OR TYPE",
                                                                            "color": "{}".format(setbot["text"]),
                                                                            "wrap": True,
                                                                            "size": "sm",
                                "action" : {
  "type" : "uri", "uri" : "https://line.me/ti/p/~" + zarifoglu.profile.userid} },{
                                                            "type": "spacer",
                                                            "size": "sm",
                                                        }],
                                                    "flex": 0
                                                }},}
    sendTemplate(to, data)
def youtubeSearchV3(to, query):
        r = requests.get("https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=10&q={}&type=video&key=AIzaSyAF-_5PLCt8DwhYc7LBskesUnsm1gFHSP8".format(query))
        data = r.text
        a = json.loads(data)
        if a["items"] != []:
            ret_ = []
            yt = []
            for music in a["items"]:
                link = music['id']['videoId']
                link = 'https://youtu.be/%s' % link
                ret_.append({
                    "type": "bubble",
                    "header": {
                      "type": "box",
                      "layout": "horizontal",
                      "contents": [{
                        "type": "text",
                        "text": "Hello World",
                        "weight": "bold",
                        "color": "#aaaaaa",
                        "size": "sm"
                      }]
                    },
                    "footer": {
                        "type": "box",
                        "contents": [{
                            "type": "text",
                            "text": "MP4",
                            "action": {
                                "type": "uri",
                                "uri": "line://app/1597127494-QDP2OlYl?type=text&text=%s" % urllib.parse.quote('Youtubemp4 %s' % (link))
                            },
                            "wrap": True,
                            "color": "#aaaaaa",
                            "size": "xs",
                            "align": "center",
                            "weight": "bold"
                        }, {
                            "type": "separator",
                            "color": "#ffffff"
                        }, {
                            "type": "text",
                            "text": "MP3",
                            "action": {
                                "type": "uri",
                                "uri": "line://app/1597127494-QDP2OlYl?type=text&text=%s" % urllib.parse.quote('Youtubemp3 %s' % (link))
                            },
                            "wrap": True,
                            "color": "#aaaaaa",
                            "size": "xs",
                            "align": "center",
                            "weight": "bold"
                        }],
                        "layout": "horizontal"
                    },
                    "styles": {
                        "footer": {
                            "backgroundColor": "{}".format(setbot["background"])
                        },
                        "body": {
                            "backgroundColor": "{}".format(setbot["background"])
                        },
                        "header": {
                          "backgroundColor": "{}".format(setbot["background"])
                        }
                    },
                    "hero": {
                        "type": "image",
                        "url": "https://i.ytimg.com/vi/%s/maxresdefault.jpg" % music['id']['videoId'],
                        "size": "full",
                        "aspectRatio": "4:3"
                    },
                    "body": {
                        "type": "box",
                        "spacing": "md",
                        "layout": "horizontal",
                        "contents": [{
                            "type": "box",
                            "spacing": "none",
                            "flex": 1,
                            "layout": "vertical",
                            "contents": [{
                                "type": "image",
                                "url": "https://cdn2.iconfinder.com/data/icons/social-icons-circular-color/512/youtube-512.png",
                                "aspectMode": "cover",
                                "gravity": "bottom",
                                "size": "sm",
                                "aspectRatio": "1:1",
                                "action": {
                                  "type": "uri",
                                  "uri": "https://www.youtube.com/watch?v=%s" % music['id']['videoId']
                                }
                            }]
                        }, {
                            "type": "separator",
                            "color": "#ffffff"
                        }, {
                            "type": "box",
                            "contents": [{
                                "type": "text",
                                "text": "Title",
                                "color": "#aaaaaa",
                                "size": "md",
                                "weight": "bold",
                                "flex": 1,
                                "gravity": "top"
                            }, {
                                "type": "text",
                                "text": "%s" % music['snippet']['title'],
                                "color": "#ffffff",
                                "size": "sm",
                                "weight": "bold",
                                "flex": 3,
                                "wrap": True,
                                "gravity": "top"
                            }],
                            "flex": 2,
                            "layout": "vertical"
                        }]
                    }
                  }
            )
                yt.append('https://www.youtube.com/watch?v=' +music['id']['videoId'])
            k = len(ret_)//10
            for aa in range(k+1):
                data = {
                        "type": "carousel",
                        "contents": ret_[aa*10 : (aa+1)*10]
                }
                sendFlex(to, '%s sent a youtube' % zarifoglu.getContact(zarifogluMID).displayName ,data)
def sendFlex(to,altText,data):
    dataa = {
        'messages': [ 
    {
        'type': 'flex',
        'altText': altText,
        'contents': data
    }]}
    datta = json.dumps(dataa)
    xyz = LiffChatContext(to)
    xyzz = LiffContext(chat=xyz)
    view = LiffViewRequest('1597127494-QDP2OlYl', xyzz)
    token = zarifoglu.liff.issueLiffView(view)
    url = 'https://api.line.me/message/v3/share'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer %s' % token.accessToken
    }
    return requests.post(url, data=datta, headers=headers)
def mosinglol(to, isi):
    contact = zarifoglu.getContact(zarifogluMID)
    gifnya = ['#FFFFFF','#FF0032']
    true = True
    kontol = {
	    "type": "bubble",
	    "styles": {
		    "hero": {"backgroundColor":"{}".format(setbot["background"])},
		    "body": {"backgroundColor": "{}".format(setbot["background"])},
		    "header": {"backgroundColor": "#FFFFFF"},
		    "footer": {
			    "backgroundColor": "#FFFFFF",
			    "separatorColor": "{}".format(setbot["background"]),
			    "separator": True
		    }
	    },
       "body": {
            "type": "box",
            "layout": "vertical",
            "contents": [
        		{
				    "type": "box",
				    "layout": "baseline",
				    "contents": [
                       {
                          "type": "text",
                           "text": isi,
                           "wrap": True,
                           "align": "start",
                           "gravity": "center",
                           "color": "{}".format(random.choice(gifnya)),
                           "size": "sm",
                           "flex": 0
                        },
                        {
                            "type": "icon",
                            "size": "sm",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png"
                        },
                        {
                            "type": "icon",
                            "size": "sm",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png"
                        },
                        {
                            "type": "icon",
                            "size": "sm",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png"
                        },
                        {
                            "type": "icon",
                            "size": "sm",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png"
                        },
                        {
                            "type": "icon",
                            "size": "sm",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png"
                        },
                        {
                            "type": "icon",
                            "size": "sm",
                            "url": "https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gray_star_28.png"
                        }
				    ]
			    }
		    ]
        },
        "footer": {
            "type": "box",
            "layout": "vertical",
            "spacing": "sm",
            "contents": [
                {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                        {
                            "type": "icon",
                            "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                            "size": "md"
                        },
                        {
                            "type": "text",
                            "text": settings["bayrak"],
                            "align": "center",
                            "color": "{}".format(setbot["background"]),
                            "size": "md"
                        },
                        {
                            "type": "spacer",
                            "size": "sm",
                        }
                    ]
                }
            ]
        }                         
    }
    data = {"type":"flex","altText":settings["bayrak"],"contents":kontol}
    sendTemplate(to, data)

def mosing1(to, isi):
    true = True
    data = {
        "type": "flex",
        "altText": settings["bayrak"],
        "contents": {
            "type": "bubble",
            "styles": {
                "header": {
                    "backgroundColor": "#000000",
                },
                "hero": {
                    "backgroundColor": "#000000"
                },
                "body": {
                    "backgroundColor": "#000000",
                    "separator": True,
                    "separatorColor": "#000000",
                }
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "cornerRadius": "xl",
                "borderWidth": "4px",
                "borderColor": "{}".format(setbot["separator"]),
                "contents": [
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "image",
                        "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                        "aspectMode": "cover",
                        "size": "full"
                      }
                    ],
                    "cornerRadius": "100px",
                    "width": "72px",
                    "height": "72px"
                    },
                    {
                        "type": "separator",
                        "color": "{}".format(setbot["separator"]),
                        "margin": "xxl"
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "margin": "xxl",
                        "spacing": "sm",
                        "contents": [
                            {                                
                                "type": "box",
                                "layout": "horizontal",
                                "contents": [
                                    {
                                        "type": "text",
                                        "text": isi,
                                        "wrap": True,
                                        "align": "start",
                                        "gravity": "center",
                                        "weight": "bold",
                                        "color": "{}".format(setbot["text"]),
                                        "size": "sm"
                                    }
                                ],
                            },
                            {
                                "type": "separator",
                                "color": "{}".format(setbot["separator"]),
                                "margin":"md"
                            }
                        ]                        
                    }
                ]
            }
        }
    }
    sendTemplate(to, data)
def mosingxx(to, isi):
    true = True
    data={"type":"flex","altText":settings["bayrak"],"contents":{
  "type": "bubble",
  "body": {
    "type": "box",
    "layout": "vertical",
    "contents": [
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "box",
            "layout": "baseline",
            "contents": [
              {
                "type": "icon",
                "url": "https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png",
                "offsetStart": "20px"
              },
              {
                "type": "text",
                "text": settings["bayrak"],
                "size": "xl",
                "color": "{}".format(setbot["text"]),
                "weight": "bold",
                "align": "center"
              },
              {
                "type": "icon",
                "url": "https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png",
                "offsetEnd": "20px"
              }
            ],
            "borderColor": "{}".format(setbot["separator"]),
            "borderWidth": "2px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "spacer",
                "size": "xxl"
              }
            ]
          },
          {
            "type": "separator",
            "color": "{}".format(setbot["separator"])
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "spacer",
                "size": "xxl"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": isi,
                    "weight": "bold",
                    "align": "start",
                    "gravity": "center",
                    "wrap": true,
                    "color": "{}".format(setbot["text"]),
                    "size": "sm"
                  }
                ]
              }
            ]
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "spacer"
              }
            ]
          },
          {
            "type": "separator",
            "color": "{}".format(setbot["separator"])
          }
        ]
      }
    ],
    "cornerRadius": "xl",
    "borderColor": "{}".format(setbot["separator"]),
    "borderWidth": "4px"
  },
  "styles": {
    "body": {
      "backgroundColor":"{}".format(setbot["background"])
    }
  }
}}
    sendTemplate(to, data)
def mosing(to, isi):
    true=True
    data={"type":"flex","altText":settings["bayrak"],"contents":{
  "type": "bubble",
  "body": {
    "type": "box",
    "layout": "vertical",
    "contents": [
      {
        "type": "box",
        "layout": "horizontal",
        "contents": [
          {
            "type": "box",
            "layout": "horizontal",
            "contents": [
              {
                "type": "image",
                "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif"
              }
            ],
            "width": "40px",
            "height": "40px",
            "borderWidth": "2px",
            "borderColor": "{}".format(setbot["separator"]),
            "cornerRadius": "100px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "text": settings["bayrak"],
                "weight": "bold",
                "size": "xl",
                "color": "{}".format(setbot["text"]),
                "wrap": true
              }
            ],
            "margin": "lg"
          }
        ]
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "spacer",
            "size": "lg"
          },
          {
            "type": "separator",
            "color": "{}".format(setbot["separator"])
          },
          {
            "type": "spacer",
            "size": "lg"
          }
        ],
        "margin": "md"
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "text",
            "text": isi, 
            "size": "sm",
            "weight": "bold",
            "wrap": true,
            "align": "start",
            "gravity": "center",
            "color": "{}".format(setbot["text"])
          }
        ]
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "spacer",
            "size": "lg"
          },
          {
            "type": "separator",
            "color": "{}".format(setbot["separator"])
          }
        ]
      }
    ],
    "borderWidth": "4px",
    "borderColor": "{}".format(setbot["separator"]),
    "cornerRadius": "xl"
  },
  "styles": {
    "body": {
      "backgroundColor":"{}".format(setbot["background"])
    }
  }
}}
    sendTemplate(to, data)

def helpalay(to):
    data={"type":"flex","altText":settings["bayrak"],"contents":{
  "type": "carousel",
  "contents": [
    {
  "type": "bubble",
  "body": {
    "type": "box",
    "layout": "vertical",
    "borderWidth": "4px",
    "borderColor": "{}".format(setbot["helpseparator"]),
    "cornerRadius": "xl",
    "contents": [
      {
        "type": "image",
        "url": "https://i.ibb.co/JxrVHwr/Pics-Art-12-07-05-46-40.jpg",
        "size": "full",
        "aspectMode": "cover",
        "aspectRatio": "1:1",
        "gravity": "center"
      },
      {
        "type": "box",
        "layout": "horizontal",
        "contents": [
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": settings["bayrak"],
                    "size": "lg",
                    "color": "{}".format(setbot["text"]),
                    "weight": "bold",
                    "align": "center",
                    "offsetStart": "15px"
                  }
                ]
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Selfbots Edition",
                    "size": "sm",
                    "color": "{}".format(setbot["text"]),
                    "weight": "bold",
                    "align": "center"
                  }
                ]
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "spacer"
                  }
                ],
                "margin": "xs"
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Chatbot",
                        "size": "sm",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Feature"
                        }
                      }
                    ],
                    "offsetStart": "0px"
                  },
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Feature",
                        "size": "sm",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Feature"
                        }
                      }
                    ],
                    "offsetStart": "10px"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "margin": "md"
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Images",
                        "size": "sm",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Images"
                        }
                      },
                      {
                        "type": "spacer"
                      }
                    ],
                    "offsetStart": "0px"
                  },
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Profile",
                        "size": "sm",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Profile"
                        }
                      }
                    ],
                    "offsetStart": "10px"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "margin": "xl"
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Protect",
                        "size": "sm",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Protect"
                        }
                      }
                    ],
                    "offsetStart": "0px"
                  },
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Social",
                        "size": "sm",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Social"
                        }
                      }
                    ],
                    "offsetStart": "10px"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "margin": "sm"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "spacer",
                    "size": "xxl"
                  },
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Translate",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Translate"
                        }
                      }
                    ],
                    "margin": "lg",
                    "offsetEnd": "20px"
                  },
                  {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "text",
                            "text": "Timeline",
                            "size": "sm",
                            "color": "{}".format(setbot["helptext"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Timeline"
                            }
                          }
                        ],
                        "offsetEnd": "20px"
                      },
                      {
                        "type": "filler"
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "text",
                            "text": "Settings",
                            "size": "sm",
                            "color": "{}".format(setbot["helptext"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Settings"
                            }
                          }
                        ],
                        "offsetEnd": "40px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "margin": "md"
                  }
                ],
                "margin": "md"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  }
                ],
                "margin": "sm"
              }
            ],
            "spacing": "xs"
          }
        ],
        "position": "absolute",
        "offsetBottom": "0px",
        "offsetStart": "0px",
        "offsetEnd": "0px",
        "paddingAll": "20px"
      }
    ],
    "paddingAll": "0px"
  }
},
{

  "type": "bubble",
  "body": {
    "type": "box",
    "layout": "vertical",
    "borderWidth": "4px",
    "borderColor": "{}".format(setbot["helpseparator"]),
    "cornerRadius": "xl",
    "contents": [
      {
        "type": "image",
        "url": "https://i.ibb.co/JxrVHwr/Pics-Art-12-07-05-46-40.jpg",
        "size": "full",
        "aspectMode": "cover",
        "aspectRatio": "1:1",
        "gravity": "center"
      },
      {
        "type": "box",
        "layout": "horizontal",
        "contents": [
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": settings["bayrak"],
                    "size": "lg",
                    "color": "{}".format(setbot["text"]),
                    "weight": "bold",
                    "align": "center",
                    "offsetStart": "15px"
                  }
                ]
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Selfbots Edition",
                    "size": "sm",
                    "color": "{}".format(setbot["text"]),
                    "weight": "bold",
                    "align": "center"
                  }
                ]
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "spacer"
                  }
                ],
                "margin": "xs"
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Banning",
                        "size": "sm",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Banning"
                        }
                      }
                    ],
                    "offsetStart": "0px"
                  },
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Wordban",
                        "size": "sm",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Wordban"
                        }
                      }
                    ],
                    "offsetStart": "10px"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "margin": "md"
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Friend",
                        "size": "sm",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Friend"
                        }
                      },
                      {
                        "type": "spacer"
                      }
                    ],
                    "offsetStart": "0px"
                  },
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Self",
                        "size": "sm",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Self"
                        }
                      }
                    ],
                    "offsetStart": "10px"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "margin": "xl"
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Memegen",
                        "size": "sm",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Memegen"
                        }
                      }
                    ],
                    "offsetStart": "0px"
                  },
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Kick",
                        "size": "sm",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Kick"
                        }
                      }
                    ],
                    "offsetStart": "10px"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "margin": "sm"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "spacer",
                    "size": "xxl"
                  },
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Utility",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Utility"
                        }
                      }
                    ],
                    "margin": "lg",
                    "offsetEnd": "20px"
                  },
                  {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "text",
                            "text": "Github",
                            "size": "sm",
                            "color": "{}".format(setbot["helptext"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Github"
                            }
                          }
                        ],
                        "offsetEnd": "20px"
                      },
                      {
                        "type": "filler"
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "text",
                            "text": "About",
                            "size": "sm",
                            "color": "{}".format(setbot["helptext"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=About"
                            }
                          }
                        ],
                        "offsetEnd": "40px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "margin": "md"
                  }
                ],
                "margin": "md"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  }
                ],
                "margin": "sm"
              }
            ],
            "spacing": "xs"
          }
        ],
        "position": "absolute",
        "offsetBottom": "0px",
        "offsetStart": "0px",
        "offsetEnd": "0px",
        "paddingAll": "20px"
      }
    ],
    "paddingAll": "0px"
  }
},
{

  "type": "bubble",
  "body": {
    "type": "box",
    "layout": "vertical",
    "borderWidth": "4px",
    "borderColor": "{}".format(setbot["helpseparator"]),
    "cornerRadius": "xl",
    "contents": [
      {
        "type": "image",
        "url": "https://i.ibb.co/JxrVHwr/Pics-Art-12-07-05-46-40.jpg",
        "size": "full",
        "aspectMode": "cover",
        "aspectRatio": "1:1",
        "gravity": "center"
      },
      {
        "type": "box",
        "layout": "horizontal",
        "contents": [
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": settings["bayrak"],
                    "size": "lg",
                    "color": "{}".format(setbot["text"]),
                    "weight": "bold",
                    "align": "center",
                    "offsetStart": "15px"
                  }
                ]
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Selfbots Edition",
                    "size": "sm",
                    "color": "{}".format(setbot["text"]),
                    "weight": "bold",
                    "align": "center"
                  }
                ]
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "spacer"
                  }
                ],
                "margin": "xs"
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Group",
                        "size": "sm",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Group"
                        }
                      }
                    ],
                    "offsetStart": "0px"
                  },
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Mention",
                        "size": "sm",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Mention"
                        }
                      }
                    ],
                    "offsetStart": "10px"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "margin": "md"
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Steal",
                        "size": "sm",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Steal"
                        }
                      },
                      {
                        "type": "spacer"
                      }
                    ],
                    "offsetStart": "0px"
                  },
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "List",
                        "size": "sm",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=List"
                        }
                      }
                    ],
                    "offsetStart": "10px"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "margin": "xl"
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Bcast",
                        "size": "sm",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Bcast"
                        }
                      }
                    ],
                    "offsetStart": "0px"
                  },
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Leave",
                        "size": "sm",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Leave"
                        }
                      }
                    ],
                    "offsetStart": "10px"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "margin": "sm"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "spacer",
                    "size": "xxl"
                  },
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Reboot",
                        "color": "{}".format(setbot["helptext"]),
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Reboot"
                        }
                      }
                    ],
                    "margin": "lg",
                    "offsetEnd": "20px"
                  },
                  {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "text",
                            "text": "Timeleft",
                            "size": "sm",
                            "color": "{}".format(setbot["helptext"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Timeleft"
                            }
                          }
                        ],
                        "offsetEnd": "20px"
                      },
                      {
                        "type": "filler"
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "text",
                            "text": "Logout",
                            "size": "sm",
                            "color": "{}".format(setbot["helptext"]),
                            "align": "center",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Logout"
                            }
                          }
                        ],
                        "offsetEnd": "40px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "margin": "md"
                  }
                ],
                "margin": "md"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  }
                ],
                "margin": "sm"
              }
            ],
            "spacing": "xs"
          }
        ],
        "position": "absolute",
        "offsetBottom": "0px",
        "offsetStart": "0px",
        "offsetEnd": "0px",
        "paddingAll": "20px"
      }
    ],
    "paddingAll": "0px"
  }
}]}}
    sendTemplate(to, data)
    
def mosings(to, isi):
    true = True
    data = {
        "type": "flex","altText": settings["bayrak"],"contents": {"type": "bubble","styles":{ 
        "body": {"backgroundColor": "{}".format(setbot["background"]),"separator": True,"separatorColor": "{}".format(setbot["separator"]),},
        "footer": {"backgroundColor": "{}".format(setbot["separator"]),"separator": True}},
        "body": {"type": "box","layout": "vertical","cornerRadius": "xl","borderWidth": "4px","borderColor": "{}".format(setbot["separator"]),"contents": [
       {"type": "image","url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif","size": "full","aspectMode": "cover","aspectRatio": "1:1","gravity": "top",
       "position": "absolute","offsetBottom": "0px","offsetStart":"0px","offsetEnd": "0px",},
       {"type": "text","text": settings["bayrak"],"weight": "bold","size": "xxl","color": "{}".format(setbot["text"]),"margin": "md"},
       {"type": "text","text": "Selfbots Edition","weight": "bold","size": "sm","color": "{}".format(setbot["text"]),"wrap": true},
       {"type": "separator","color": "{}".format(setbot["separator"]),"margin": "xxl"},
       {"type": "box","layout": "vertical","margin": "xxl","spacing": "sm",
       "contents": [{"type": "box","layout": "horizontal","contents": [
       {"type": "text","text": isi,"wrap": True,"align": "start","gravity": "center","weight": "bold","color": "{}".format(setbot["text"]),"size": "sm"}],},
       {"type": "separator","color": "{}".format(setbot["separator"]),"margin":"md"}]}]}}}
    sendTemplate(to, data)
def mosinga(to, isi):
    true = True
    data = {
        "type": "flex",
        "altText": settings["bayrak"],
        "contents": {
            "type": "bubble",
            "styles": {
                "header": {
                    "backgroundColor": "{}".format(setbot["background"])
                },
                "hero": {
                    "backgroundColor": "{}".format(setbot["background"])
                },
                "body": {
                    "backgroundColor": "#FFFFFF",
                    "separator": True,
                    "separatorColor": "#FFFFFF"
                },
                "footer": {
                    "backgroundColor": "{}".format(setbot["background"]),
                    "separator": True
                }
            },
            "body": {
                "type": "box",
                "layout": "vertical",
                "contents": [
                    {
                        "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                        "type": "image"
                    },
                    {
                        "type": "separator",
                        "margin": "xxl"
                    },
                    {
                        "type": "box",
                        "layout": "vertical",
                        "margin": "xxl",
                        "spacing": "sm",
                        "contents": [
                            {
                                "type": "box",
                                "layout": "horizontal",
                                "contents": [
                                    {
                                        "type": "text",
                                        "text": isi,
                                        "wrap": True,
                                        "align": "start",
                                        "gravity": "center",
                                        "weight": "bold",
                                        "color": "{}".format(setbot["background"]),
                                        "size": "sm"
                                    }
                                ]
                            },
                            {
                                "type": "separator",
                                "margin":"md"
                            }
                        ]
                    }
                ]
            }
        }
    }
    sendTemplate(to, data)

def helppubg(to):
  if pubg["pubgm"] == True:
    data={"type":"flex","altText":"Help Message","contents":{
  "type": "carousel",
  "contents": [
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "#ffffff",
        "contents": [
          {
            "type": "image",
            "url": "https://s19.directupload.net/images/191108/radrdz2h.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "  HELP - MESSAGE",
                    "size": "xl",
                    "color": "#ffffff",
                    "weight": "bold"
                  }
                ],
                    "type": "box",
                    "spacing": "sm",
                    "layout": "vertical"
                 }, 
                 {
                    "type": "separator",
                    "color": "#ffffff"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Men√ºler",
                    "weight": "bold",
                    "color": "#ffffff",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Media",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "New",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Profile",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Remote",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Lurk",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Grouplist",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Self",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Settings",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],
                        "action": {
                        "type": "uri",
                        "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                      },

                        "color": "#ffffff",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "#ffffff",
                "margin": "xxl",
                "height": "40px"
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "paddingAll": "20px",
            "paddingTop": "18px"
          }
        ],
        "paddingAll": "0px"
      }
    },
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "#ffffff",
        "contents": [
          {
            "type": "image",
            "url": "https://s19.directupload.net/images/191108/r59oirdj.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "  HELP - MESSAGE",
                    "size": "xl",
                    "color": "#ffffff",
                    "weight": "bold"
                  }
                ],
                    "type": "box",
                    "spacing": "sm",
                    "layout": "vertical"
                 }, 
                 {
                    "type": "separator",
                    "color": "#ffffff"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Utility",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Banning",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Friend",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Translate",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Timeline",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Kick",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Speed",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Wordban",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Broadcast",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],
                        "action": {
                        "type": "uri",
                        "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                      },

                        "color": "#ffffff",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "#ffffff",
                "margin": "xxl",
                "height": "40px"
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "paddingAll": "20px",
            "paddingTop": "18px"
          }
        ],
        "paddingAll": "0px"
      }
    },
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "#ffffff",
        "contents": [
          {
            "type": "image",
            "url": "https://s19.directupload.net/images/191108/lg7brx9m.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "  HELP - MESSAGE",
                    "size": "xl",
                    "color": "#ffffff",
                    "weight": "bold"
                  }
                ],
                    "type": "box",
                    "spacing": "sm",
                    "layout": "vertical"
                 }, 
                 {
                    "type": "separator",
                    "color": "#ffffff"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Mention",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Group",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Steal",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "List",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
},
                  {
                    "type": "text",
                    "text": "About",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Restart",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Pubgmod On",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "√áukurmod on",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Legendmod On",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],
                        "action": {
                        "type": "uri",
                        "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                      },

                        "color": "#ffffff",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "#ffffff",
                "margin": "xxl",
                "height": "40px"
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "paddingAll": "20px",
            "paddingTop": "18px"
          }
        ],
        "paddingAll": "0px"
      }
    }
  ]}}
    sendTemplate(to, data)

def helpcukur(to):
  if cukur["cukurgm"] == True:
    data={"type":"flex","altText":"Help Message","contents":{
  "type": "carousel",
  "contents": [
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "#ffffff",
        "contents": [
          {
            "type": "image",
            "url": "https://s19.directupload.net/images/191106/xd44ungq.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "  HELP - MESSAGE",
                    "size": "xl",
                    "color": "#ffffff",
                    "weight": "bold"
                  }
                ],
                    "type": "box",
                    "spacing": "sm",
                    "layout": "vertical"
                 }, 
                 {
                    "type": "separator",
                    "color": "#ffffff"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Men√ºler",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Media",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "New",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Profile",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Remote",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Lurk",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Grouplist",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Self",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Settings",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],
                        "action": {
                        "type": "uri",
                        "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                      },

                        "color": "#ffffff",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "#ffffff",
                "margin": "xxl",
                "height": "40px"
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "paddingAll": "20px",
            "paddingTop": "18px"
          }
        ],
        "paddingAll": "0px"
      }
    },
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "#ffffff",
        "contents": [
          {
            "type": "image",
            "url": "https://s19.directupload.net/images/191106/f7jafhf7.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "  HELP - MESSAGE",
                    "size": "xl",
                    "color": "#ffffff",
                    "weight": "bold"
                  }
                ],
                    "type": "box",
                    "spacing": "sm",
                    "layout": "vertical"
                 }, 
                 {
                    "type": "separator",
                    "color": "#ffffff"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Utility",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Banning",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Friend",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Translate",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Timeline",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Kick",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Speed",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Wordban",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Broadcast",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],
                        "action": {
                        "type": "uri",
                        "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                      },

                        "color": "#ffffff",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "#ffffff",
                "margin": "xxl",
                "height": "40px"
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "paddingAll": "20px",
            "paddingTop": "18px"
          }
        ],
        "paddingAll": "0px"
      }
    },
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "#ffffff",
        "contents": [
          {
            "type": "image",
            "url": "https://s19.directupload.net/images/191106/6w8nzvp4.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "  HELP - MESSAGE",
                    "size": "xl",
                    "color": "#ffffff",
                    "weight": "bold"
                  }
                ],
                    "type": "box",
                    "spacing": "sm",
                    "layout": "vertical"
                 }, 
                 {
                    "type": "separator",
                    "color": "#ffffff"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Mention",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Group",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Steal",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "List",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "About",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Restart",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Pubgmod On",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "√áukurmod on",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Legendmod On",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],
                        "action": {
                        "type": "uri",
                        "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                      },

                        "color": "#ffffff",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "#ffffff",
                "margin": "xxl",
                "height": "40px"
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "paddingAll": "20px",
            "paddingTop": "18px"
          }
        ],
        "paddingAll": "0px"
      }
    }
  ]}}
    sendTemplate(to, data)

def helplegend(to):
  if legend["legendgm"] == True:
    data={"type":"flex","altText":"Help Message","contents":{
  "type": "carousel",
  "contents": [
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "#ffffff",
        "contents": [
          {
            "type": "image",
            "url": "https://s19.directupload.net/images/191111/mvzbpl7o.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "  HELP - MESSAGE",
                    "size": "xl",
                    "color": "#ffffff",
                    "weight": "bold"
                  }
                ],
                    "type": "box",
                    "spacing": "sm",
                    "layout": "vertical"
                 }, 
                 {
                    "type": "separator",
                    "color": "#ffffff"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Men√ºler",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Media",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "New",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Profile",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Remote",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Lurk",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Grouplist",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Self",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Settings",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],
                        "action": {
                        "type": "uri",
                        "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                      },

                        "color": "#ffffff",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "#ffffff",
                "margin": "xxl",
                "height": "40px"
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "paddingAll": "20px",
            "paddingTop": "18px"
          }
        ],
        "paddingAll": "0px"
      }
    },
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "#ffffff",
        "contents": [
          {
            "type": "image",
            "url": "https://s19.directupload.net/images/191111/2oq2vgw2.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "  HELP - MESSAGE",
                    "size": "xl",
                    "color": "#ffffff",
                    "weight": "bold"
                  }
                ],
                    "type": "box",
                    "spacing": "sm",
                    "layout": "vertical"
                 }, 
                 {
                    "type": "separator",
                    "color": "#ffffff"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Utility",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Banning",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Friend",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Translate",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Timeline",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Kick",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Speed",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Wordban",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Broadcast",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],
                        "action": {
                        "type": "uri",
                        "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                      },

                        "color": "#ffffff",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "#ffffff",
                "margin": "xxl",
                "height": "40px"
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "paddingAll": "20px",
            "paddingTop": "18px"
          }
        ],
        "paddingAll": "0px"
      }
    },
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "#ffffff",
        "contents": [
          {
            "type": "image",
            "url": "https://s19.directupload.net/images/191111/owmtu5l7.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "  HELP - MESSAGE",
                    "size": "xl",
                    "color": "#ffffff",
                    "weight": "bold"
                  }
                ],
                    "type": "box",
                    "spacing": "sm",
                    "layout": "vertical"
                 }, 
                 {
                    "type": "separator",
                    "color": "#ffffff"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Mention",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Group",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Steal",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "List",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "About",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Restart",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Pubgmod On",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "√áukurmod on",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Legendmod On",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],
                        "action": {
                        "type": "uri",
                        "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                      },

                        "color": "#ffffff",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "#ffffff",
                "margin": "xxl",
                "height": "40px"
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "paddingAll": "20px",
            "paddingTop": "18px"
          }
        ],
        "paddingAll": "0px"
      }
    }
  ]}}
    sendTemplate(to, data)

def helpfener(to):
  if fener["fenergm"] == True:
    data={"type":"flex","altText":"Help Message","contents":{
  "type": "carousel",
  "contents": [
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "#ffffff",
        "contents": [
          {
            "type": "image",
            "url": "https://i.ibb.co/QPg248m/Turkey-Team-Created-By-Zarifoglu-3.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "  HELP - MESSAGE",
                    "size": "xl",
                    "color": "#ffffff",
                    "weight": "bold"
                  }
                ],
                    "type": "box",
                    "spacing": "sm",
                    "layout": "vertical"
                 }, 
                 {
                    "type": "separator",
                    "color": "#ffffff"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Men√ºler",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Media",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "New",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Profile",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Remote",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Lurk",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Grouplist",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Self",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Settings",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],
                        "action": {
                        "type": "uri",
                        "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                      },

                        "color": "#ffffff",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "#ffffff",
                "margin": "xxl",
                "height": "40px"
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "paddingAll": "20px",
            "paddingTop": "18px"
          }
        ],
        "paddingAll": "0px"
      }
    },
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "#ffffff",
        "contents": [
          {
            "type": "image",
            "url": "https://i.ibb.co/D9yZv0m/Turkey-Team-Created-By-Zarifoglu-7.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "  HELP - MESSAGE",
                    "size": "xl",
                    "color": "#ffffff",
                    "weight": "bold"
                  }
                ],
                    "type": "box",
                    "spacing": "sm",
                    "layout": "vertical"
                 }, 
                 {
                    "type": "separator",
                    "color": "#ffffff"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Utility",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Banning",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Friend",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Translate",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Timeline",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Kick",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Speed",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Wordban",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Broadcast",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],
                        "action": {
                        "type": "uri",
                        "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                      },

                        "color": "#ffffff",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "#ffffff",
                "margin": "xxl",
                "height": "40px"
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "paddingAll": "20px",
            "paddingTop": "18px"
          }
        ],
        "paddingAll": "0px"
      }
    },
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "#ffffff",
        "contents": [
          {
            "type": "image",
            "url": "https://i.ibb.co/YhghwBT/Turkey-Team-Created-By-Zarifoglu-11.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "  HELP - MESSAGE",
                    "size": "xl",
                    "color": "#ffffff",
                    "weight": "bold"
                  }
                ],
                    "type": "box",
                    "spacing": "sm",
                    "layout": "vertical"
                 }, 
                 {
                    "type": "separator",
                    "color": "#ffffff"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Mention",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Group",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Steal",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "List",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "About",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Restart",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Pubgmod On",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "√áukurmod on",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Legendmod On",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],
                        "action": {
                        "type": "uri",
                        "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                      },

                        "color": "#ffffff",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "#ffffff",
                "margin": "xxl",
                "height": "40px"
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "paddingAll": "20px",
            "paddingTop": "18px"
          }
        ],
        "paddingAll": "0px"
      }
    }
  ]}}
    sendTemplate(to, data)

def helpbjk(to):
  if bjk["bjkgm"] == True:
    data={"type":"flex","altText":"Help Message","contents":{
  "type": "carousel",
  "contents": [
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "#ffffff",
        "contents": [
          {
            "type": "image",
            "url": "https://i.ibb.co/1QGnC5w/Turkey-Team-Created-By-Zarifoglu-28.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "  HELP - MESSAGE",
                    "size": "xl",
                    "color": "#ffffff",
                    "weight": "bold"
                  }
                ],
                    "type": "box",
                    "spacing": "sm",
                    "layout": "vertical"
                 }, 
                 {
                    "type": "separator",
                    "color": "#ffffff"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Men√ºler",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Media",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "New",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Profile",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Remote",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Lurk",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Grouplist",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Self",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Settings",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],
                        "action": {
                        "type": "uri",
                        "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                      },

                        "color": "#ffffff",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "#ffffff",
                "margin": "xxl",
                "height": "40px"
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "paddingAll": "20px",
            "paddingTop": "18px"
          }
        ],
        "paddingAll": "0px"
      }
    },
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "#ffffff",
        "contents": [
          {
            "type": "image",
            "url": "https://i.ibb.co/12JZ9Ly/Turkey-Team-Created-By-Zarifoglu-27.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "  HELP - MESSAGE",
                    "size": "xl",
                    "color": "#ffffff",
                    "weight": "bold"
                  }
                ],
                    "type": "box",
                    "spacing": "sm",
                    "layout": "vertical"
                 }, 
                 {
                    "type": "separator",
                    "color": "#ffffff"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Utility",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Banning",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Friend",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Translate",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Timeline",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Kick",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Speed",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Wordban",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Broadcast",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],
                        "action": {
                        "type": "uri",
                        "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                      },

                        "color": "#ffffff",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "#ffffff",
                "margin": "xxl",
                "height": "40px"
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "paddingAll": "20px",
            "paddingTop": "18px"
          }
        ],
        "paddingAll": "0px"
      }
    },
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "#ffffff",
        "contents": [
          {
            "type": "image",
            "url": "https://i.ibb.co/NmWCZhw/Turkey-Team-Created-By-Zarifoglu-29.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "  HELP - MESSAGE",
                    "size": "xl",
                    "color": "#ffffff",
                    "weight": "bold"
                  }
                ],
                    "type": "box",
                    "spacing": "sm",
                    "layout": "vertical"
                 }, 
                 {
                    "type": "separator",
                    "color": "#ffffff"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Mention",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Group",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Steal",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "List",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "About",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Restart",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Pubgmod On",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "√áukurmod on",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Legendmod On",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],
                        "action": {
                        "type": "uri",
                        "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                      },

                        "color": "#ffffff",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "#ffffff",
                "margin": "xxl",
                "height": "40px"
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "paddingAll": "20px",
            "paddingTop": "18px"
          }
        ],
        "paddingAll": "0px"
      }
    }
  ]}}
    sendTemplate(to, data)

def helpggs(to):
  if gltsry["gsgm"] == True:
    data={"type":"flex","altText":"Help Message","contents":{
  "type": "carousel",
  "contents": [
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "#ffffff",
        "contents": [
          {
            "type": "image",
            "url": "https://i.ibb.co/gzyKyC7/Turkey-Team-Created-By-Zarifoglu-14.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "  HELP - MESSAGE",
                    "size": "xl",
                    "color": "#ffffff",
                    "weight": "bold"
                  }
                ],
                    "type": "box",
                    "spacing": "sm",
                    "layout": "vertical"
                 }, 
                 {
                    "type": "separator",
                    "color": "#ffffff"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Men√ºler",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Media",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "New",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Profile",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Remote",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Lurk",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Grouplist",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Self",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Settings",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],
                        "action": {
                        "type": "uri",
                        "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                      },

                        "color": "#ffffff",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "#ffffff",
                "margin": "xxl",
                "height": "40px"
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "paddingAll": "20px",
            "paddingTop": "18px"
          }
        ],
        "paddingAll": "0px"
      }
    },
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "#ffffff",
        "contents": [
          {
            "type": "image",
            "url": "https://i.ibb.co/GxLyfSr/Turkey-Team-Created-By-Zarifoglu-15.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "  HELP - MESSAGE",
                    "size": "xl",
                    "color": "#ffffff",
                    "weight": "bold"
                  }
                ],
                    "type": "box",
                    "spacing": "sm",
                    "layout": "vertical"
                 }, 
                 {
                    "type": "separator",
                    "color": "#ffffff"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Utility",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Banning",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Friend",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Translate",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Timeline",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Kick",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Speed",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Wordban",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Broadcast",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],
                        "action": {
                        "type": "uri",
                        "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                      },

                        "color": "#ffffff",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "#ffffff",
                "margin": "xxl",
                "height": "40px"
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "paddingAll": "20px",
            "paddingTop": "18px"
          }
        ],
        "paddingAll": "0px"
      }
    },
    {
      "type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "cornerRadius": "xl",
        "borderWidth": "4px",
        "borderColor": "#ffffff",
        "contents": [
          {
            "type": "image",
            "url": "https://i.ibb.co/844FWZq/Turkey-Team-Created-By-Zarifoglu-16.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "2:3",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "  HELP - MESSAGE",
                    "size": "xl",
                    "color": "#ffffff",
                    "weight": "bold"
                  }
                ],
                    "type": "box",
                    "spacing": "sm",
                    "layout": "vertical"
                 }, 
                 {
                    "type": "separator",
                    "color": "#ffffff"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Mention",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Group",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Steal",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "List",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "About",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Restart",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Pubgmod On",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "√áukurmod on",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  },
                  {
                    "type": "text",
                    "text": "Legendmod On",
                    "color": "#ffffff",
                    "weight": "bold",
                    "size": "md",
                    "flex": 0
                  }
                ],
                "spacing": "lg"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "baseline",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "text",
                        "text": settings["bayrak"],
                        "action": {
                        "type": "uri",
                        "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                      },

                        "color": "#ffffff",
                        "flex": 0,
                        "offsetTop": "-2px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "borderWidth": "1px",
                "cornerRadius": "4px",
                "spacing": "sm",
                "borderColor": "#ffffff",
                "margin": "xxl",
                "height": "40px"
              }
            ],
            "position": "absolute",
            "offsetBottom": "0px",
            "offsetStart": "0px",
            "offsetEnd": "0px",
            "paddingAll": "20px",
            "paddingTop": "18px"
          }
        ],
        "paddingAll": "0px"
      }
    }
  ]}}
    sendTemplate(to, data)
###############
def Metal(to, turkish):
    true=True
    data={"type":"flex","altText":settings["bayrak"],"contents":{
  "type": "bubble",
  "hero": {
    "type": "box",
    "layout": "vertical",
    "contents": [
      {
        "type": "image",
        "url": "https://i.pinimg.com/564x/a7/07/bc/a707bcd9ace28bd25e49dc40c4f81720.jpg",
        "size": "full",
        "aspectMode": "cover",
        "aspectRatio": "2:2"
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "text",
            "wrap": True,
            "weight": "bold",
            "color": "{}".format(setbot["text"]),
            "offsetTop": "10px",
            "margin": "md",
            "offsetStart": "5px",
            "text": turkish
          }
        ],
        "position": "absolute",
        "backgroundColor": "#00000060",
        "offsetTop": "30px",
        "offsetStart": "30px",
        "width": "240px",
        "height": "240px",
        "borderWidth": "2px",
        "borderColor": "{}".format(setbot["separator"]),
        "cornerRadius": "20px"
      },
      {
        "type": "text",
        "text": settings["bayrak"],
        "weight": "bold",
        "position": "absolute",
        "size": "lg",
        "offsetTop": "4px",
        "offsetStart": "50px",
        "color": "{}".format(setbot["text"]),
        "align": "center",
        "gravity": "center"
      }
    ],
    "borderWidth": "3px",
    "cornerRadius": "17px",
    "borderColor": "{}".format(setbot["separator"]),
    "backgroundColor": "{}".format(setbot["background"])
  }
}
}
    sendTemplate(to, data)

###############
def sendTemplate(group, data):
    xyz = LiffChatContext(group)
    xyzz = LiffContext(chat=xyz)
    view = LiffViewRequest('1597127494-QDP2OlYl', xyzz)
    token = zarifoglu.liff.issueLiffView(view)
    url = 'https://api.line.me/message/v3/share'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer %s' % token.accessToken
    }
    data = {"messages":[data]}
    requests.post(url, headers=headers, data=json.dumps(data))
def sendTemplate(to, data):
    xyz = LiffChatContext(to)
    xyzz = LiffContext(chat=xyz)
    view = LiffViewRequest('1597127494-QDP2OlYl', xyzz)
    token = zarifoglu.liff.issueLiffView(view)
    url = 'https://api.line.me/message/v3/share'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer %s' % token.accessToken
    }
    data = {"messages":[data]}
    requests.post(url, headers=headers, data=json.dumps(data))
def flexin(to, data):
    xyz = LiffChatContext(to)
    xyzz = LiffContext(chat=xyz)
    view = LiffViewRequest('1597127494-QDP2OlYl', xyzz)
    token = zarifoglu.liff.issueLiffView(view)
    url = 'https://api.line.me/message/v3/share'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer %s' % token.accessToken
    }
    data = {"messages":[data]}
    requests.post(url, headers=headers, data=json.dumps(data))
def bcTemplate(gr, data):
    xyz = LiffChatContext(gr)
    xyzz = LiffContext(chat=xyz)
    view = LiffViewRequest('1597127494-QDP2OlYl', xyzz)
    token = zarifoglu.liff.issueLiffView(view)
    url = 'https://api.line.me/message/v3/share'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer %s' % token.accessToken
    }
    data = {"messages":[data]}
    requests.post(url, headers=headers, data=json.dumps(data))
def bcTemplate2(friend, data):
    xyz = LiffChatContext(friend)
    xyzz = LiffContext(chat=xyz)
    view = LiffViewRequest('1597127494-QDP2OlYl', xyzz)
    token = zarifoglu.liff.issueLiffView(view)
    url = 'https://api.line.me/message/v3/share'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer %s' % token.accessToken
    }
    data = {"messages":[data]}
    requests.post(url, headers=headers, data=json.dumps(data))

def sendCarousel(to, data):
    data = json.dumps(data)
    xyz = LiffChatContext(to)
    xyzz = LiffContext(chat=xyz)
    view = LiffViewRequest('1597127494-QDP2OlYl', xyzz)
    token = zarifoglu.liff.issueLiffView(view)
    url = 'https://api.line.me/message/v3/share'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer %s' % token.accessToken
    }
    return requests.post(url, data=data, headers=headers)
def nhentai(to,msg,liffnya,cmd):
    try:
        msg.text = cmd
        lururl = 'https://app-1536548990.000webhostapp.com/apis.php?images='
        if ' page ' not in msg.text:return
        if cmd.startswith('nhentai page '):
            k = cmd.split('page ')[1].split(' ')
            website = requests.get("https://nhentai.net?page={}".format(k[0]))
        else:
            h = cmd.split('page ')[0][len('nhentai '):]
            k = cmd.split('page ')[1].split(' ')
            website = requests.get("https://nhentai.net?page={}".format(h,k[0]))
        data = BeautifulSoup(website.content, "lxml")
        dataDoujins = []
        b = ' „Äå Nhentai „Äç'
        ss = []
        hh = []
        gh = []
        gg = []
        ret_ = []
        for listAllDoujins in data.findAll("div", {"class":"container index-container"}):
            for getUrl in listAllDoujins.findAll("div", {"class":"gallery"}):
                for get in getUrl.find_all('a'):gh.append("https://nhentai.net{}".format(get.get('href')))
                for gets in getUrl.find_all('img'):
                    if 'https://t.nhentai.net/galleries/' in gets['src']:
                        gg.append(gets['src'])
                    else:
                        pass
            for getTitle in listAllDoujins.findAll("div", {"class":"caption"}):
                title = getTitle.text
                dataDoujins.append(title)
        if len(k) == 1:
            if int(k[0]) == 1:no = 0
            else:no = (int(k[0])-1)*25
            for c in range(0,len(dataDoujins)):
                no+=1
                ret_.append({"thumbnailImageUrl": lururl+gg[c],"imageSize": "contain","imageAspectRatio": "square","title": 'Rank {}'.format(no),"text": '{} '.format(dataDoujins[c][:55]),"actions": [{"type": "uri","label": "Go Page","uri": gh[c]}]})
            ks = len(ret_)//10
            for aa in range(ks+1):
                data = {"messages": [{"type": "template","altText": "Turkey sent a template.","template": {"type": "carousel","columns": ret_[aa*10 : (aa+1)*10]}}]}
                aas = sendCarousel(to,data)
        if len(k) == 2:
            if int(k[0]) == 1:g = int(k[1])-1
            else:g = int(k[1])-1;g= (((int(k[0])*25-25)//(int(k[0])-1))-(-int(k[1])+25*int(k[0])))-1
            zarifoglu.sendMessage(to,' „Äå Nhentai „Äç\nStatus: Uploading Doujin {} From nhentai'.format(dataDoujins[g]))
            website = requests.get("{}1/".format(gh[g]))
            data = BeautifulSoup(website.content, "lxml")
            for getJson in data.findAll("script")[2]:
                imgs = re.search(r"gallery\s*:\s*(\{.+\}),", getJson)
                imgs = json.loads(imgs.group(1))
                idx = imgs.get("media_id")
                images = []
                cdn = lururl+"https://i.nhentai.net/galleries/"
                ext = {"j": "jpg", "p": "png", "g": "gif"}
                for n, i in enumerate(imgs.get("images", {}).get("pages", [])):
                    hh = "{}{}/{}.{}".format(cdn, idx, n + 1, ext.get(i.get("t")))
                    ret_.append({"imageUrl": lururl+hh,"action": {"type": "uri","label": "View detail","uri": hh}})
                k = len(ret_)//10
                for aa in range(k+1):
                    data = {"messages": [{"type": "template","altText": "Turkey sent a template.","template": {"type": "image_carousel","columns": ret_[aa*10 : (aa+1)*10]}}]}
                    sendCarousel(to,data)
                zarifoglu.sendMessage(to,' „Äå Nhentai „Äç\nSuccess Send {} pict From Nhentai'.format(len(ret_)))
    except Exception as e:
        print(e)
#=====================================================================
def entod_in(to, mid):
    try:
        zarifoglu.kickoutFromGroup(to, [mid])
        zarifoglu.findAndAddContactsByMid(mid)
        zarifoglu.inviteIntoGroup(to, [mid])
        zarifoglu.cancelGroupInvitation(to,[mid])
    except Exception as e:
        print(e)
#=====================================================================
def restartBot():
    print ("[ INFO ] BOT RESETTED")
    backupData()
    python = sys.executable
    os.execl(python, python, *sys.argv)
#=====================================================================
def runtime(secs):
    mins, secs = divmod(secs,60)
    hours, mins = divmod(mins,60)
    days, hours = divmod(hours, 24)
    return '%02d d %02d h %02d m %02d s' % (days, hours, mins, secs)
#=====================================================================
def blekedok(t:int=None):
    r = requests.get('https://www.webtoons.com/id/genre')
    soup = BeautifulSoup(r.text,'html5lib')
    data = soup.find_all(class_='card_lst')
    return data
def WebtoonDrama(msg,liffnya,cmd):
    msg.text = cmd
    drama = msg.text.split(' ')[1]
    text = msg.text
    for a in DramaEnak(drama,text,msg.to,blekedok(drama),liffnya):sendCarousel(msg.to,a)
def webtoon(to,msg,liffnya):
    data = webtoonk(msg,liffnya)
    sendCarousel(to,data)
def webtoonk(msg,liffnya):
        data = {
                                    "messages": [
                                        {
                                            "type": "flex",
                                            "altText": "Me",
                                            "contents": {
                                                "type": "bubble",
                                                "hero": {
                                                    "type": "image",
                                                    "url": "https://webtoons-static.pstatic.net/image/pc/home/og_en.jpg?dt=2016110702",
                                                    "size": "full",
                                                    "aspectRatio": "1:1",
                                                    "aspectMode": "fit",
                                                },
                                                "body": {
                                                    "type": "box",
                                                    "layout": "vertical",
                                                    "spacing": "md",
                                                    "contents": [
                                                        {
                                                            "type": "text",
                                                            "text": "WEBTOON",
                                                            "weight": "bold",
                                                            "size": "md",
                                                            "margin": "md"
                                                        },
                                                        {
                                                            "type": "separator",
                                                            "color": "#000000",
                                                        },
                                                        {
                                                            "type": "box",
                                                            "layout": "baseline",
                                                            "margin": "md",
                                                            "contents": [
                                                                {
                                                                    "type": "text",
                                                                    "text": " ",
                                                                    "flex": 1,
                                                                    "size": "md",
                                                                    "margin": "md"
                                                                },
                                                                {
                                                                    "type": "text",
                                                                    "text": "| TYPE |",
                                                                    "weight": "bold",
                                                                    "size": "md",
                                                                    "margin": "md",
                                                                    "flex": 2,
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "box",
                                                            "layout": "baseline",
                                                            "margin": "md",
                                                            "contents": [
                                                                {
                                                                    "type": "text",
                                                                    "text": "1.DRAMA",
                                                                    "flex": 1,
                                                                    "size": "md",
                                                                    "margin": "md",
                                                                    "action":   {
                                                                                    "type": "uri",
                                                                                    "uri": "{}webtoon%20drama".format(liffnya['ttt'])
                                                                                }
                                                                },
                                                                {
                                                                    "type": "text",
                                                                    "text": "4.FANTASI",
                                                                    "size": "md",
                                                                    "margin": "md",
                                                                    "flex": 1,
                                                                    "action":   {
                                                                                    "type": "uri",
                                                                                    "uri": "{}webtoon%20fantasi".format(liffnya['ttt'])
                                                                                }
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "box",
                                                            "layout": "baseline",
                                                            "margin": "md",
                                                            "contents": [
                                                                {
                                                                    "type": "text",
                                                                    "text": "2.COMEDY",
                                                                    "flex": 1,
                                                                    "size": "md",
                                                                    "margin": "md",
                                                                    "action":   {
                                                                                    "type": "uri",
                                                                                    "uri": "{}webtoon%20comedy".format(liffnya['ttt'])
                                                                                }
                                                                },
                                                                {
                                                                    "type": "text",
                                                                    "text": "5.ROMANCE",
                                                                    "size": "md",
                                                                    "margin": "md",
                                                                    "flex": 1,
                                                                    "action":   {
                                                                                    "type": "uri",
                                                                                    "uri": "{}webtoon%20romance".format(liffnya['ttt'])
                                                                                }
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "box",
                                                            "layout": "baseline",
                                                            "margin": "md",
                                                            "contents": [
                                                                {
                                                                    "type": "text",
                                                                    "text": "3.THRILLER",
                                                                    "flex": 1,
                                                                    "size": "md",
                                                                    "margin": "md",
                                                                    "action":   {
                                                                                    "type": "uri",
                                                                                    "uri": "{}webtoon%20thriller".format(liffnya['ttt'])
                                                                                }
                                                                },
                                                                {
                                                                    "type": "text",
                                                                    "text": "6.HORROR",
                                                                    "size": "md",
                                                                    "margin": "md",
                                                                    "flex": 1,
                                                                    "action":   {
                                                                                    "type": "uri",
                                                                                    "uri": "{}webtoon%20horror".format(liffnya['ttt'])
                                                                                }
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "separator",
                                                            "color": "#000000",
                                                        },
                                                        {
                                                            "type": "box",
                                                            "layout": "baseline",
                                                            "margin": "md",
                                                            "contents": [
                                                                {
                                                                    "type": "text",
                                                                    "text": " ",
                                                                    "flex": 1,
                                                                    "size": "md",
                                                                    "margin": "md",
                                                                },
                                                                {
                                                                    "type": "text",
                                                                    "text": "| COMMAND |",
                                                                    "size": "md",
                                                                    "margin": "md",
                                                                    "flex": 3,
                                                                    "weight": "bold"
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "separator",
                                                            "color": "#000000",
                                                        },
                                                        {
                                                            "type": "box",
                                                            "layout": "baseline",
                                                            "margin": "md",
                                                            "contents": [
                                                                {
                                                                    "type": "text",
                                                                    "text": "webtoon [type]",
                                                                    "flex": 0,
                                                                    "size": "md",
                                                                    "margin": "md",
                                                                },
                                                            ]
                                                        },
                                                        {
                                                            "type": "separator",
                                                            "color": "#000000",
                                                        },
                                                        {
                                                            "type": "box",
                                                            "layout": "baseline",
                                                            "margin": "md",
                                                            "contents": [
                                                                {
                                                                    "type": "text",
                                                                    "text": "IMPORTANT CLICK TYPE FOR FAST COMMAND",
                                                                    "flex": 0,
                                                                    "size": "md",
                                                                    "margin": "md",
                                                                    "weight": "bold",
                                                                    "wrap": True,
                                                                },
                                                            ]
                                                        },
                                                    ]
                                                },
                                            }
                                        }
                                    ]
                                }
        return data
def DramaEnak(drama,text,to,deff,liffnya):
        if drama in ['drama','fantasi','comedy','sol','romance','thriller','horror']:
            if drama == 'drama':drama = 0
            if drama == 'fantasi':drama = 1
            if drama == 'comedy':drama = 2
            if drama == 'sol':drama = 3
            if drama == 'romance':drama = 4
            if drama == 'thriller':drama = 5
            if drama == 'horror':drama = 6
            data = deff
            ss = []
            h = []
            if len(text.split(' ')) == 6:
                try:
                    if text.split(' ')[3].lower() != 'page':return
                    b = requests.get(data[drama].find_all('a')[int(text.split(' ')[2])-1].get('href'))
                    soup1 = BeautifulSoup(b.text,'html5lib')
                    data2 = soup1.find_all(id='_listUl')
                    data3 = data2[0].find_all('a')
                    b = requests.get(data3[int(text.split(' ')[5])-1].get('href'))
                    soup1 = BeautifulSoup(b.text,'html5lib')
                    date = soup1.select('img._images')
                    for b in range(0,len(date)):
                        url = 'https://app-1536548990.000webhostapp.com/apis.php?aas='+date[b]['data-url']
                        ss.append({
                                                        "type": "bubble",
                                                        "hero": {
                                                            "type": "image",
                                                            "url": url,
                                                            "size": "full",
                                                            "aspectRatio": "1:1",
                                                            "aspectMode": "fit",
                                                        }})
                    k = len(ss)//10
                    h = []
                    for aa in range(k+1):
                        h.append({
                                            "messages": [
                                                {
                                                    "type": "flex",
                                                    "altText": "Webtoon",
                                                    "contents": {
                                                        "type": "carousel",
                                                        "contents": ss[aa*10 : (aa+1)*10]
                                                    }
                                                }
                                            ]
                                        })
                    return h
                except:e = traceback.format_exc();open('w','w').write(str(e))
            if len(text.split(' ')) == 2:
                    date = data[drama].find_all('img')
                    datea = data[drama].find_all(class_='info')
                    for b in range(0,len(date)):
                        url = 'https://app-1536548990.000webhostapp.com/apis.php?aas='+date[b]['src']
                        ss.append({
                                                        "type": "bubble",
                                                        "hero": {
                                                            "type": "image",
                                                            "url": url,
                                                            "size": "full",
                                                            "aspectRatio": "1:1",
                                                            "aspectMode": "fit",
                                                            "action": {
                                                                "type": "uri",
                                                                "uri": "{}webtoon%20{}%20{}%20page%20{}".format(liffnya['ttt'],text.split(' ')[1],len(ss)+1,b+1)
                                                                }
                                                        },
                                                        "body": {
                                                            "type": "box",
                                                            "layout": "vertical",
                                                            "contents": [
                                                                {
                                                                    "type": "box",
                                                                    "layout": "vertical",
                                                                    "margin": "lg",
                                                                    "spacing": "sm",
                                                                    "contents": [
                                                                        {
                                                                            "type": "box",
                                                                            "layout": "baseline",
                                                                            "spacing": "sm",
                                                                            "contents": [
                                                                                {
                                                                                    "type": "text",
                                                                                    "text": "Title",
                                                                                    "color": "#aaaaaa",
                                                                                    "size": "sm",
                                                                                    "flex": 1
                                                                                },
                                                                                {
                                                                                    "type": "text",
                                                                                    "text": "{}".format(datea[b].find_all('p')[0].text),
                                                                                    "color": "#262423",
                                                                                    "wrap": True,
                                                                                    "size": "sm",
                                                                                    "flex": 4
                                                                                },
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "box",
                                                                            "layout": "baseline",
                                                                            "spacing": "sm",
                                                                            "contents": [
                                                                                {
                                                                                    "type": "text",
                                                                                    "text": 'Author:',
                                                                                    "color": "#aaaaaa",
                                                                                    "size": "sm",
                                                                                    "flex": 1
                                                                                },
                                                                                {
                                                                                    "type": "text",
                                                                                    "text": '{}'.format(datea[b].find_all('p')[1].text),
                                                                                    "color": "#262423",
                                                                                    "wrap": True,
                                                                                    "size": "sm",
                                                                                    "flex": 4
                                                                                }
                                                                            ]
                                                                        },
                                                                        {
                                                                            "type": "box",
                                                                            "layout": "baseline",
                                                                            "spacing": "sm",
                                                                            "contents": [
                                                                                {
                                                                                    "type": "text",
                                                                                    "text": 'Likes:',
                                                                                    "color": "#aaaaaa",
                                                                                    "size": "sm",
                                                                                    "flex": 1
                                                                                },
                                                                                {
                                                                                    "type": "text",
                                                                                    "text": '{}'.format(datea[b].find_all('p')[2].find_all('em')[0].text),
                                                                                    "color": "#262423",
                                                                                    "wrap": True,
                                                                                    "size": "sm",
                                                                                    "flex": 4
                                                                                }
                                                                            ]
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "separator",
                                                                    "color": "#000000",
                                                                },
                                                                {
                                                                    "type": "box",
                                                                    "layout": "vertical",
                                                                    "margin": "lg",
                                                                    "spacing": "sm",
                                                                    "contents": [
                                                                        {
                                                                            "type": "text",
                                                                            "text": 'Click The Image For Cek Episode',
                                                                            "color": "#262423",
                                                                            "wrap": True,
                                                                            "size": "md",
                                                                            "weight": "bold",
                                                                        }
                                                                    ]
                                                                },
                                                            ]
                                                        }})
                    k = len(ss)//10
                    h = []
                    for aa in range(k+1):
                        h.append({
                                            "messages": [
                                                {
                                                    "type": "flex",
                                                    "altText": "Webtoon",
                                                    "contents": {
                                                        "type": "carousel",
                                                        "contents": ss[aa*10 : (aa+1)*10]
                                                    }
                                                }
                                            ]
                                        })
                    return h
            if len(text.split(' ')) == 5:
                    if text.split(' ')[3].lower() != 'page':return
                    b = requests.get(data[drama].find_all('a')[int(text.split(' ')[2])-1].get('href')+'&page='+str(int(text.split(' ')[4])))
                    soup1 = BeautifulSoup(b.text,'html5lib')
                    data11 = soup1.find_all(class_='subj')
                    data2 = soup1.find_all(id='_listUl')
                    data3 = data2[0].find_all('a')
                    data4 = data2[0].find_all('img')
                    if len(data4) == 10:jumlah = 10
                    else:jumlah = len(data4)
                    for c in range(0,jumlah):
                        print(data3[c].get('href'))
                        url = 'https://app-1536548990.000webhostapp.com/apis.php?aas='+data4[c]['src']
                        ss.append({
                                                    "type": "bubble",
                                                    "hero": {
                                                        "type": "image",
                                                        "url": url,
                                                        "size": "full",
                                                        "aspectRatio": "1:1",
                                                        "aspectMode": "fit",
                                                    },
                                                    "body": {
                                                        "type": "box",
                                                        "layout": "vertical",
                                                        "contents": [
                                                            {
                                                                "type": "box",
                                                                "layout": "vertical",
                                                                "margin": "lg",
                                                                "spacing": "sm",
                                                                "contents": [
                                                                    {
                                                                        "type": "box",
                                                                        "layout": "baseline",
                                                                        "spacing": "sm",
                                                                        "contents": [
                                                                            {
                                                                                "type": "text",
                                                                                "text": "Title",
                                                                                "color": "#aaaaaa",
                                                                                "size": "sm",
                                                                                "flex": 1
                                                                            },
                                                                            {
                                                                                "type": "text",
                                                                                "text": "{}".format(data11[c+1].text),
                                                                                "color": "#262423",
                                                                                "wrap": True,
                                                                                "size": "sm",
                                                                                "flex": 5
                                                                            }
                                                                        ]
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    },
                                                    "footer": {
                                                        "type": "box",
                                                        "layout": "horizontal",
                                                        "contents": [
                                                            {
                                                                "type": "button",
                                                                "style": "link",
                                                                "action": {
                                                                    "type": "uri",
                                                                    "label": "Go Page",
                                                                    "uri": data3[c].get('href')
                                                                }                                                   
                                                            },
                                                            {
                                                                "type": "button",
                                                                "style": "link",
                                                                "action": {
                                                                    "type": "uri",
                                                                    "label": "Read Online",
                                                                    "uri": "{}webtoon%20{}%20{}%20page%20{}%20{}".format(liffnya['ttt'],text.split(' ')[1],text.split(' ')[2],c+6,c+1)
                                                                }
                                                            }
                                                        ],
                                                    }})
                    data = {
                                        "messages": [
                                            {
                                                "type": "flex",
                                                "altText": "Webtoon",
                                                "contents": {
                                                    "type": "carousel",
                                                    "contents": ss
                                                }
                                            }
                                        ]
                                    }
                    return [data]
def anunanu(to,s,liffnya,j=''):
    try:
        if j == '':
            data = {"messages": [{"type": "image","originalContentUrl": s,"previewImageUrl": s,"sentBy":{"label":"zarifoglu","iconUrl":"https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus),"linkUrl":"https://line.me/ti/p/zMankMvx69"}}]}
        else:
            data = {"messages": [{"type": "image","originalContentUrl": s,"previewImageUrl": s,"animated":True,"extension":"gif","sentBy":{"label":"Turkey","iconUrl":"https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus),"linkUrl":"https://line.me/ti/p/zMankMvx69"}}]}
        sendCarousel(to,data)
    except Exception as e:
        print(e)
def anuanu(to,s,liffnya,j=''):
    try:
        if j == '':
            data = {"messages": [{"type": "video","originalContentUrl": s,"previewImageUrl": s}]}
        else:
            data = {"messages": [{"type": "video","originalContentUrl": s,"previewImageUrl": s}]}
        sendCarousel(to,data)
    except Exception as e:
        print(e)
def webtoon(to,msg,liffnya):
    data = webtoonk(msg,liffnya)
    sendCarousel(to,data)
def sendCarousel(to,col):
    col = json.dumps(col)
    xyz = LiffChatContext(to)
    xyzz = LiffContext(chat=xyz)
    view = LiffViewRequest('1597127494-QDP2OlYl', xyzz)
    token = zarifoglu.issueLiffView(view)
    url = 'https://api.line.me/message/v3/share'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer %s' % token.accessToken
    }
    return requests.post(url, data=col, headers=headers)
def picFinder(name):    
        try:
            rgram = requests.get('http://www.instagram.com/{}'.format(name))
            rgram.raise_for_status()
            selenaSoup=BeautifulSoup(rgram.text,'html.parser')
            pageJS = selenaSoup.select('script')
            for i, j in enumerate(pageJS):
                pageJS[i]=str(j)
            picInfo = sorted(pageJS,key=len, reverse=True)[0]
            allPics = json.loads(str(picInfo)[52:-10])['entry_data']['ProfilePage'][0]
            return allPics
        except requests.exceptions.HTTPError:
            return '\t \t ### ACCOUNT MISSING ###'
def instagramku(msg,liffnya,tksop,ss):
        data = {
                                    "messages": [
                                        {
                                            "type": "flex",
                                            "altText": "INSTAGRAM",
                                            "contents": {
                                                "type": "bubble",
                                                "header": {
                                                    "type": "box",
                                                    "layout": "horizontal",
                                                    "contents": [
                                                        {
                                                            "type": "text",
                                                            "text": "{}".format(ss['full_name']),
                                                            "weight": "bold",
                                                            "color": "#262423",
                                                            "size": "sm"
                                                        }
                                                    ]
                                                },
                                                "hero": {
                                                    "type": "image",
                                                    "url": "{}".format(ss['profile_pic_url_hd']),
                                                    "size": "full",
                                                    "aspectRatio": "1:1",
                                                },
                                                "body": {
                                                    "type": "box",
                                                    "layout": "vertical",
                                                    "contents": [
                                                        {
                                                            "type": "text",
                                                            "text": "INSTAGRAM PROFILE",
                                                            "weight": "bold",
                                                            "size": "md",
                                                            "margin": "md"
                                                        },
                                                        {
                                                            "type": "separator",
                                                            "color": "#000000",
                                                        },
                                                        {
                                                            "type": "box",
                                                            "layout": "vertical",
                                                            "margin": "lg",
                                                            "spacing": "sm",
                                                            "contents": [
                                                                {
                                                                    "type": "box",
                                                                    "layout": "baseline",
                                                                    "spacing": "sm",
                                                                    "contents": [
                                                                        {
                                                                            "type": "text",
                                                                            "text": "Nama",
                                                                            "color": "#aaaaaa",
                                                                            "size": "sm",
                                                                            "flex": 3
                                                                        },
                                                                        {
                                                                            "type": "text",
                                                                            "text": "{}".format(ss['full_name']),
                                                                            "color": "#262423",
                                                                            "size": "sm",
                                                                            "wrap": True,
                                                                            "flex": 5
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "box",
                                                                    "layout": "baseline",
                                                                    "spacing": "sm",
                                                                    "contents": [
                                                                        {
                                                                            "type": "text",
                                                                            "text": "Username",
                                                                            "color": "#aaaaaa",
                                                                            "size": "sm",
                                                                            "flex": 3
                                                                        },
                                                                        {
                                                                            "type": "text",
                                                                            "text": "{}".format(tksop),
                                                                            "color": "#262423",
                                                                            "size": "sm",
                                                                            "wrap": True,
                                                                            "flex": 5
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "box",
                                                                    "layout": "baseline",
                                                                    "spacing": "sm",
                                                                    "contents": [
                                                                        {
                                                                            "type": "text",
                                                                            "text": "Bio",
                                                                            "color": "#aaaaaa",
                                                                            "size": "sm",
                                                                            "flex": 3
                                                                        },
                                                                        {
                                                                            "type": "text",
                                                                            "text": "{}".format(ss['biography']),
                                                                            "color": "#262423",
                                                                            "wrap": True,
                                                                            "size": "sm",
                                                                            "flex": 5
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "box",
                                                                    "layout": "baseline",
                                                                    "spacing": "sm",
                                                                    "contents": [
                                                                        {
                                                                            "type": "text",
                                                                            "text": "Private",
                                                                            "color": "#aaaaaa",
                                                                            "size": "sm",
                                                                            "flex": 3
                                                                        },
                                                                        {
                                                                            "type": "text",
                                                                            "text": "{}".format(ss['is_private']),
                                                                            "color": "#262423",
                                                                            "wrap": True,
                                                                            "size": "sm",
                                                                            "flex": 5
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "box",
                                                                    "layout": "baseline",
                                                                    "spacing": "sm",
                                                                    "contents": [
                                                                        {
                                                                            "type": "text",
                                                                            "text": "Followers",
                                                                            "color": "#aaaaaa",
                                                                            "size": "sm",
                                                                            "flex": 3
                                                                        },
                                                                        {
                                                                            "type": "text",
                                                                            "text": "{}".format(humanize.intcomma(ss['edge_followed_by']['count'])),
                                                                            "color": "#262423",
                                                                            "wrap": True,
                                                                            "size": "sm",
                                                                            "flex": 5
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "box",
                                                                    "layout": "baseline",
                                                                    "spacing": "sm",
                                                                    "contents": [
                                                                        {
                                                                            "type": "text",
                                                                            "text": "Following",
                                                                            "color": "#aaaaaa",
                                                                            "size": "sm",
                                                                            "flex": 3
                                                                        },
                                                                        {
                                                                            "type": "text",
                                                                            "text": "{}".format(humanize.intcomma(ss['edge_follow']['count'])),
                                                                            "color": "#262423",
                                                                            "wrap": True,
                                                                            "size": "sm",
                                                                            "flex": 5
                                                                        }
                                                                    ]
                                                                },
                                                                {
                                                                    "type": "box",
                                                                    "layout": "baseline",
                                                                    "spacing": "sm",
                                                                    "contents": [
                                                                        {
                                                                            "type": "text",
                                                                            "text": "Post",
                                                                            "color": "#aaaaaa",
                                                                            "size": "sm",
                                                                            "flex": 3
                                                                        },
                                                                        {
                                                                            "type": "text",
                                                                            "text": "{}".format(humanize.intcomma(ss['edge_owner_to_timeline_media']['count'])),
                                                                            "color": "#262423",
                                                                            "wrap": True,
                                                                            "size": "sm",
                                                                            "flex": 5
                                                                        }
                                                                    ]
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "footer": {
                                                    "type": "box",
                                                    "layout": "vertical",
                                                    "contents": [{
                                                        "type": "box",
                                                        "layout": "horizontal",
                                                        "contents": [{
                                                            "type": "button",
                                                            "flex": 2,
                                                            "style": "primary",
                                                            "color": "#FF2B00",
                                                            "height": "sm",
                                                            "action": {
                                                                "type": "uri",
                                                                "label": "POST",
                                                                "uri": "{}instagram%20post%20{}".format(liffnya['ttt'],tksop)
                                                            }
                                                        }, {
                                                            "flex": 3,
                                                            "type": "button",
                                                            "margin": "sm",
                                                            "style": "primary",
                                                            "color": "#097500",
                                                            "height": "sm",
                                                            "action": {
                                                                "type": "uri",
                                                                "label": "STORY",
                                                                "uri": '{}instagram%20story%20{}'.format(liffnya['ttt'],tksop)
                                                            }
                                                            }]
                                                        }, {
                                                        "type": "button",
                                                        "margin": "sm",
                                                        "style": "primary",
                                                        "color": "#0874DE",
                                                        "height": "sm",
                                                        "action": {
                                                            "type": "uri",
                                                            "label": "GO TO PAGE",
                                                            "uri": 'https://www.instagram.com/{}'.format(tksop)
                                                        }
                                                    }]
                                                }
                                            }
                                        }
                                    ]
                                }
        return data
def igsearch(msg,liffnya,cmd):
        to = msg.to
        msg.text = msg.text
        text = msg.text.split(' ')[1]
        data = picFinder(text)
        if len(msg.text.split(' ')) == 2:
            try:
                asd = data['graphql']['user']
                data = instagramku(msg,liffnya,text,asd)
                sendCarousel(msg.to,data)
            except:
                text = traceback.format_exc()
                return zarifoglu.sendMessage(to,"Status: 404\nReason: Instagram {}".format(text))
        if len(cmd.split(' ')) == 3:
            if 'https' in msg.text:
                print(msg.text)
                a = msg.text.split(' ')[2]
                print(a)
                url = requests.get(a)
                soup = BeautifulSoup(url.text, 'html.parser')
                z = soup.find('body')
                y = z.find('script')
                v = y.text.strip().replace('window._sharedData =', '').replace(';', '')
                d = json.loads(v)
                ret_ = []
                e = d['entry_data']['PostPage'][0]['graphql']['shortcode_media']
                if 'edge_sidecar_to_children' in e:
                    like = e['edge_media_preview_like']['count']
                    caption = e['edge_media_to_caption']['edges']
                    for zz in caption:
                        anu = zz['node']['text']
                    comment = e['edge_media_to_comment']['count']
                    bla = e['edge_media_to_comment']
                    for ib in bla['edges']:
                        komen = ib['node']['text']
                        usrname = ib['node']['owner']['username']
                    for a in e['edge_sidecar_to_children']['edges']:
                        if a['node']['is_video'] == True:
                            prev = a['node']['display_url']
                            vid = a['node']['video_url']
                            view = a['node']['video_view_count']
                        else:
                            pict = a['node']['display_url']
                        try:
                            ret_.append({"type": "bubble","header": {"type": "box","layout": "vertical","contents": [{"type": "text","text": "INSTAGRAM POST","weight": "bold"}]},"footer": {"type": "box","layout": "vertical","spacing": "sm","contents": [{"type": "button","style": "link","height": "sm","action": {"type": "uri","label": "Send Video","uri": "line://app/1597127494-QDP2OlYl?type=video&ocu={}&piu={}".format(vid,prev)}},]},"hero": {"type": "image","url": prev,"size": "full","aspectRatio": "1:1","aspectMode": "fit"},"body": {"type": "box","layout": "vertical","contents": [{"type": "text","text": "POST INFO","weight": "bold","size":"md","margin":"md"},{"type":"separator","color":"#000000"},{"type": "box","layout": "vertical","margin": "lg","spacing": "sm","contents": [{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Caption","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(anu),"color": "#262423","size": "sm","wrap": True,"flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Likes","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(like)),"color": "#262423","size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Comment","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(comment)),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "From","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "@{}".format(usrname),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Text","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(komen),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "View count","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(view)),"color": "#262423","wrap": True,"size": "sm","flex": 5}]}]}]}})
                        except:
                            ret_.append({"type": "bubble","header": {"type": "box","layout": "vertical","contents": [{"type": "text","text": "INSTAGRAM POST","weight": "bold"}]},"footer": {"type": "box","layout": "vertical","spacing": "sm","contents": [{"type": "button","style": "link","height": "sm","action": {"type": "uri","label": "Send Image","uri": "line://app/1597127494-QDP2OlYl?type=image&img={}".format(pict)}},]},"hero": {"type": "image","url": pict,"size": "full","aspectRatio": "1:1","aspectMode": "fit"},"body": {"type": "box","layout": "vertical","contents": [{"type": "text","text": "POST INFO","weight": "bold","size":"md","margin":"md"},{"type":"separator","color":"#000000"},{"type": "box","layout": "vertical","margin": "lg","spacing": "sm","contents": [{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Caption","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(anu),"color": "#262423","size": "sm","wrap": True,"flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Likes","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(like)),"color": "#262423","size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Comment","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(comment)),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "From","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "@{}".format(usrname),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Text","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(komen),"color": "#262423","wrap": True,"size": "sm","flex": 5}]}]}]}})
                    k = len(ret_)//10
                    for aa in range(k+1):
                        data = {"messages": [{"type": "flex","altText": "Turkey sent a flex.","contents": {"type": "carousel","contents": ret_[aa*10 : (aa+1)*10]}}]}
                        sendCarousel(to,data)
                else:
                    like = e['edge_media_preview_like']['count']
                    caption = e['edge_media_to_caption']['edges']
                    for zz in caption:
                        anu = zz['node']['text']
                    comment = e['edge_media_to_comment']['count']
                    bla = e['edge_media_to_comment']
                    for ib in bla['edges']:
                        komen = ib['node']['text']
                        usrname = ib['node']['owner']['username']
                    if e['is_video'] == True:
                        durasi = e['video_duration']
                        view = e['video_view_count']
                        ret_.append({"type": "bubble","header": {"type": "box","layout": "vertical","contents": [{"type": "text","text": "INSTAGRAM POST","weight": "bold"}]},"footer": {"type": "box","layout": "vertical","spacing": "sm","contents": [{"type": "button","style": "link","height": "sm","action": {"type": "uri","label": "Send Video","uri": "line://app/1597127494-QDP2OlYl?type=video&ocu={}&piu={}".format(e['video_url'],e['display_url'])}},]},"hero": {"type": "image","url": e['display_url'],"size": "full","aspectRatio": "1:1","aspectMode": "fit"},"body": {"type": "box","layout": "vertical","contents": [{"type": "text","text": "POST INFO","weight": "bold","size":"md","margin":"md"},{"type":"separator","color":"#000000"},{"type": "box","layout": "vertical","margin": "lg","spacing": "sm","contents": [{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Caption","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(anu),"color": "#262423","size": "sm","wrap": True,"flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Likes","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(like)),"color": "#262423","size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Comment","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(comment)),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "From","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "@{}".format(usrname),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Text","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(komen),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "View count","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(view)),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Duration","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{} Second".format(humanize.intcomma(durasi)),"color": "#262423","wrap": True,"size": "sm","flex": 5}]}]}]}})
                    else:
                        ret_.append({"type": "bubble","header": {"type": "box","layout": "vertical","contents": [{"type": "text","text": "INSTAGRAM POST","weight": "bold"}]},"footer": {"type": "box","layout": "vertical","spacing": "sm","contents": [{"type": "button","style": "link","height": "sm","action": {"type": "uri","label": "Send Image","uri": "line://app/1597127494-QDP2OlYl?type=image&img={}".format(e['display_url'])}},]},"hero": {"type": "image","url": e['display_url'],"size": "full","aspectRatio": "1:1","aspectMode": "fit"},"body": {"type": "box","layout": "vertical","contents": [{"type": "text","text": "POST INFO","weight": "bold","size":"md","margin":"md"},{"type":"separator","color":"#000000"},{"type": "box","layout": "vertical","margin": "lg","spacing": "sm","contents": [{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Caption","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(anu),"color": "#262423","size": "sm","wrap": True,"flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Likes","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(like)),"color": "#262423","size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Comment","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(comment)),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "From","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "@{}".format(usrname),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Text","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(komen),"color": "#262423","wrap": True,"size": "sm","flex": 5}]}]}]}})
                    k = len(ret_)//10
                    for aa in range(k+1):
                        data = {"messages": [{"type": "flex","altText": "Turkey sent a flex.","contents": {"type": "carousel","contents": ret_[aa*10 : (aa+1)*10]}}]}
                        sendCarousel(to,data)
            else:
                k = InstagramScraper()
                results = k.profile_page_recent_posts('https://www.instagram.com/{}/?hl=id'.format(msg.text.split(' ')[2]))
                try:
                    ret_ = []
                    for i in results:
                        url = i['thumbnail_src']
                        ret_.append({"type": "bubble","hero": {"type": "image","url": url,"size": "full","aspectRatio": "1:1","aspectMode": "fit",},"footer": {"type": "box","layout": "vertical","spacing": "sm","contents": [{"type": "button","style": "link","height": "sm","action": {"type": "uri","label": "Post Detail","uri": "{}instagram%20post%20{}%20{}".format(liffnya["ttt"],msg.text.split(" ")[2],len(ret_))}},],}})
                    k = len(ret_)//10
                    for aa in range(k+1):
                        data = {"messages": [{"type": "flex","altText": "Turkey sent a flex.","contents": {"type": "carousel","contents": ret_[aa*10 : (aa+1)*10]}}]}
                        sendCarousel(to,data)
                except Exception as e:
                    traceback.print_tb(e.__traceback__)
        if(cmd.startswith('instagram post ') and len(cmd.split(' ')) == 4):
            k = InstagramScraper()
            results = k.profile_page_recent_posts('https://www.instagram.com/{}/?hl=id'.format(msg.text.split(' ')[2]))
            ret = []
            no = 0
            for i in results:
                no += 1
                ret.append(i['shortcode'])
            url = requests.get('https://www.instagram.com/p/{}'.format(ret[int(msg.text.split(' ')[3])]))
            soup = BeautifulSoup(url.text, 'html.parser')
            z = soup.find('body')
            y = z.find('script')
            v = y.text.strip().replace('window._sharedData =', '').replace(';', '')
            d = json.loads(v)
            ret_ = []
            e = d['entry_data']['PostPage'][0]['graphql']['shortcode_media']
            if 'edge_sidecar_to_children' in e:
                like = e['edge_media_preview_like']['count']
                caption = e['edge_media_to_caption']['edges']
                for zz in caption:
                    anu = zz['node']['text']
                comment = e['edge_media_to_comment']['count']
                bla = e['edge_media_to_comment']
                for ib in bla['edges']:
                    komen = ib['node']['text']
                    usrname = ib['node']['owner']['username']
                for a in e['edge_sidecar_to_children']['edges']:
                    if a['node']['is_video'] == True:
                        prev = a['node']['display_url']
                        vid = a['node']['video_url']
                        view = a['node']['video_view_count']
                    else:
                        pict = a['node']['display_url']
                    try:
                        ret_.append({"type": "bubble","header": {"type": "box","layout": "vertical","contents": [{"type": "text","text": "INSTAGRAM POST","weight": "bold"}]},"footer": {"type": "box","layout": "vertical","spacing": "sm","contents": [{"type": "button","style": "link","height": "sm","action": {"type": "uri","label": "Send Video","uri": "line://app/1597127494-QDP2OlYl?type=video&ocu={}&piu={}".format(vid,prev)}},]},"hero": {"type": "image","url": prev,"size": "full","aspectRatio": "1:1","aspectMode": "fit"},"body": {"type": "box","layout": "vertical","contents": [{"type": "text","text": "POST INFO","weight": "bold","size":"md","margin":"md"},{"type":"separator","color":"#000000"},{"type": "box","layout": "vertical","margin": "lg","spacing": "sm","contents": [{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Caption","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(anu),"color": "#262423","size": "sm","wrap": True,"flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Likes","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(like)),"color": "#262423","size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Comment","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(comment)),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "From","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "@{}".format(usrname),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Text","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(komen),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "View count","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(view)),"color": "#262423","wrap": True,"size": "sm","flex": 5}]}]}]}})
                    except:
                        ret_.append({"type": "bubble","header": {"type": "box","layout": "vertical","contents": [{"type": "text","text": "INSTAGRAM POST","weight": "bold"}]},"footer": {"type": "box","layout": "vertical","spacing": "sm","contents": [{"type": "button","style": "link","height": "sm","action": {"type": "uri","label": "Send Image","uri": "line://app/1597127494-QDP2OlYl?type=image&img={}".format(pict)}},]},"hero": {"type": "image","url": pict,"size": "full","aspectRatio": "1:1","aspectMode": "fit"},"body": {"type": "box","layout": "vertical","contents": [{"type": "text","text": "POST INFO","weight": "bold","size":"md","margin":"md"},{"type":"separator","color":"#000000"},{"type": "box","layout": "vertical","margin": "lg","spacing": "sm","contents": [{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Caption","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(anu),"color": "#262423","size": "sm","wrap": True,"flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Likes","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(like)),"color": "#262423","size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Comment","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(comment)),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "From","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "@{}".format(usrname),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Text","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(komen),"color": "#262423","wrap": True,"size": "sm","flex": 5}]}]}]}})
                k = len(ret_)//10
                for aa in range(k+1):
                    data = {"messages": [{"type": "flex","altText": "Turkey sent a flex.","contents": {"type": "carousel","contents": ret_[aa*10 : (aa+1)*10]}}]}
                    sendCarousel(to,data)
            else:
                like = e['edge_media_preview_like']['count']
                caption = e['edge_media_to_caption']['edges']
                for zz in caption:
                    anu = zz['node']['text']
                comment = e['edge_media_to_comment']['count']
                bla = e['edge_media_to_comment']
                for ib in bla['edges']:
                    komen = ib['node']['text']
                    usrname = ib['node']['owner']['username']
                if e['is_video'] == True:
                    durasi = e['video_duration']
                    view = e['video_view_count']
                    ret_.append({"type": "bubble","header": {"type": "box","layout": "vertical","contents": [{"type": "text","text": "INSTAGRAM POST","weight": "bold"}]},"footer": {"type": "box","layout": "vertical","spacing": "sm","contents": [{"type": "button","style": "link","height": "sm","action": {"type": "uri","label": "Send Video","uri": "line://app/1597127494-QDP2OlYl?type=video&ocu={}&piu={}".format(e['video_url'],e['display_url'])}},]},"hero": {"type": "image","url": e['display_url'],"size": "full","aspectRatio": "1:1","aspectMode": "fit"},"body": {"type": "box","layout": "vertical","contents": [{"type": "text","text": "POST INFO","weight": "bold","size":"md","margin":"md"},{"type":"separator","color":"#000000"},{"type": "box","layout": "vertical","margin": "lg","spacing": "sm","contents": [{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Caption","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(anu),"color": "#262423","size": "sm","wrap": True,"flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Likes","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(like)),"color": "#262423","size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Comment","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(comment)),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "From","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "@{}".format(usrname),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Text","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(komen),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "View count","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(view)),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Duration","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{} Second".format(humanize.intcomma(durasi)),"color": "#262423","wrap": True,"size": "sm","flex": 5}]}]}]}})
                else:
                    ret_.append({"type": "bubble","header": {"type": "box","layout": "vertical","contents": [{"type": "text","text": "INSTAGRAM POST","weight": "bold"}]},"footer": {"type": "box","layout": "vertical","spacing": "sm","contents": [{"type": "button","style": "link","height": "sm","action": {"type": "uri","label": "Send Image","uri": "line://app/1597127494-QDP2OlYl?type=image&img={}".format(e['display_url'])}},]},"hero": {"type": "image","url": e['display_url'],"size": "full","aspectRatio": "1:1","aspectMode": "fit"},"body": {"type": "box","layout": "vertical","contents": [{"type": "text","text": "POST INFO","weight": "bold","size":"md","margin":"md"},{"type":"separator","color":"#000000"},{"type": "box","layout": "vertical","margin": "lg","spacing": "sm","contents": [{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Caption","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(anu),"color": "#262423","size": "sm","wrap": True,"flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Likes","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(like)),"color": "#262423","size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Comment","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(humanize.intcomma(comment)),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "From","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "@{}".format(usrname),"color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Text","color": "#aaaaaa","size": "sm","flex": 3},{"type": "text","text": "{}".format(komen),"color": "#262423","wrap": True,"size": "sm","flex": 5}]}]}]}})
                k = len(ret_)//10
                for aa in range(k+1):
                    data = {"messages": [{"type": "flex","altText": "Turkey sent a flex.","contents": {"type": "carousel","contents": ret_[aa*10 : (aa+1)*10]}}]}
                    sendCarousel(to,data)
        if(cmd.startswith('instagram story ')):
            a = requests.get("https://rest.farzain.com/api/ig_story.php?id={}&apikey=aguzzzz748474848&beta".format(msg.text.split(' ')[2])).text
            a = json.loads(a)
            ret_ = []
            s = [c for c in a['pict_url']]
            for b in a['video_url']:
                print(b)
                if b == 'None':
                    pass
                ret_.append({"type": "bubble","hero": {"type": "image","url": "https://boteater.vip/jpg-5quup28a.jpg","size": "full","aspectRatio": "1:1","aspectMode": "fit",},"footer": {"type": "box","layout": "vertical","spacing": "sm","contents": [{"type": "button","style": "link","height": "sm","action": {"type": "uri","label": "Send Video","uri": "line://app/1597127494-QDP2OlYl?type=video&ocu={}&piu=https://image.freepik.com/free-vector/instagram-icon_1057-2227.jpg".format(b)}},],}})
            k = len(ret_)//10
            for aa in range(k+1):
                data = {"messages": [{"type": "flex","altText": "Turkey sent a flex.","contents": {"type": "carousel","contents": ret_[aa*10 : (aa+1)*10]}}]}
                sendCarousel(to,data)

def cytmp4(url):
    import pafy
    vid = pafy.new(url,basic=False)
    result = vid.streams[-1]
    return result.url
def cytmp3(url):
    import pafy
    vid = pafy.new(url,basic=False)
    result = vid.audiostreams[-1]
    return result.url

def YoutubeTempat(liffnya,to,meta,dfghj,links,linkss):
    return {"messages": [{"type": "flex","altText": "Youtube","contents": {"type": "bubble","header": {"type": "box","layout": "horizontal","contents": [{"type": "text","text": "Youtube","weight": "bold","color": "#aaaaaa","size": "sm"}]},"hero": {"type": "image","url": meta['thumbnail'],"size": "full","aspectRatio": "20:13","aspectMode": "fit","action": {"type": "uri","uri": dfghj}},"body": {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","margin": "lg","spacing": "sm","contents": [{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Title","color": "#aaaaaa","size": "sm","flex": 1},{"type": "text","text": "{}".format(meta['title']),"color": "#262423","wrap": True,"size": "sm","flex": 5}]}]}]},"footer": {"type": "box","layout": "horizontal","spacing": "sm","contents": [{"type": "button","style": "link","height": "sm","action": {"type": "uri","label": "Send Video","uri": "line://app/1597127494-QDP2OlYl?type=video&ocu={}&piu={}".format(links,meta['thumbnail'])}},{"type": "button","style": "link","height": "sm","action": {"type": "uri","label": "Send Audio","uri": "line://app/1597127494-QDP2OlYl?type=audio&link={}".format(linkss)}}],"flex": 0}}}]}

def imagegoogle(to,liffnya,cmd):
    a = image_search(zarifoglu.adityasplittext(cmd))
    b = random.choice([a[:10],a[10:20],a[20:30],a[30:40],a[40:50],a[50:60],a[60:70],a[70:80]])
    a = b
    ret_ = []
    gimagesa(a,ret_)
    k = len(ret_)//10
    for aa in range(k+1):
        data = {"messages": [{"type": "flex","altText": "image","contents": {"type": "carousel","contents": ret_[aa*10 : (aa+1)*10]}}]}
        h = sendCarousel(to,data)
    return h
def image_search(query):
    images = zarifoglu.adityarequestweb('https://api.eater.pw/googleimg?search={}'.format(query))
    return images["result"]
def gimagesa(a,ret_):
        for i in a:
            if '.gif' in i['img']:
                links = 'line://app/1606644641-DAwvRm5p?type=images&imgs='
            else:
                links = 'line://app/1606644641-DAwvRm5p?type=image&img='
            ret_.append({
                                                "type": "bubble",
                                                "hero": {
                                                    "type": "image",
                                                    "url": i,
                                                    "size": "full",
                                                    "aspectRatio": "1:1",
                                                    "aspectMode": "fit",
                                                },
                                                "footer": {
                                                    "type": "box",
                                                    "layout": "vertical",
                                                    "spacing": "sm",
                                                    "contents": [
                                                        {
                                                            "type": "button",
                                                            "style": "link",
                                                            "height": "sm",
                                                            "action": {
                                                                "type": "uri",
                                                                "label": "Send Image",
                                                                "uri": "{}{}".format(links,i)
                                                            }                                                   
                                                        },
                                                    ],
                                                }})
        return ret_
#=====================================================================
def NoteCreate(to,cmd,msg):
    h = []
    s = []
    if cmd == 'mentionnote':
        sakui = zarifoglu.getProfile()
        group = zarifoglu.getGroup(msg.to);nama = [contact.mid+'||//{}'.format(contact.displayName) for contact in group.members];nama.remove(sakui.mid+'||//{}'.format(sakui.displayName))
        data = nama
        k = len(data)//20
        for aa in range(k+1):
            nos = 0
            if aa == 0:dd = '‚ï≠„Äå Mention Note „Äç‚îÄ';no=aa
            else:dd = '‚îú„Äå Mention Note „Äç‚îÄ';no=aa*20
            msgas = dd
            for i in data[aa*20 : (aa+1)*20]:
                no+=1
                if no == len(data):msgas+='\n‚ï∞{}. @'.format(no)
                else:msgas+='\n‚îÇ{}. @'.format(no)
            msgas = msgas
            for i in data[aa*20 : (aa+1)*20]:
                gg = []
                dd = ''
                for ss in msgas:
                    if ss == '@':
                        dd += str(ss)
                        gg.append(dd.index('@'))
                        dd = dd.replace('@',' ')
                    else:
                        dd += str(ss)
                s.append({'type': "RECALL", 'start': gg[nos], 'end': gg[nos]+1, 'mid': str(i.split('||//')[0])})
                nos +=1
            h = zarifoglu.createPostGroup(msgas,msg.to,holdingTime=None,textMeta=s)
    else:
        cmd = cmd.replace(msg.text[:12],'')
        if 'MENTION' in msg.contentMetadata.keys()!= None:
            mention = ast.literal_eval(msg.contentMetadata['MENTION'])
            mentionees = mention['MENTIONEES']
            no = 0
            for mention in mentionees:
                ask = no
                nama = str(zarifoglu.getContact(mention["M"]))
                h.append(str(cmd.replace('@{}'.format(nama),'@')))
                for b in h:
                    cmd = str(b)
                gg = []
                dd = ''
                for ss in cmd:
                    if ss == '@':
                        dd += str(ss)
                        gg.append(dd.index('@'))
                        dd = dd.replace('@',' ')
                    else:
                        dd += str(ss)
                s.append({'type': "RECALL", 'start': gg[no], 'end': gg[no]+1, 'mid': str(mention["M"])})
                no +=1
        h = zarifoglu.createPostGroup(cmd,msg.to,holdingTime=None,textMeta=s)
#=====================================================
def sendMessageCustom(to, text, icon , name):
    annda = {'MSG_SENDER_ICON': icon,
        'MSG_SENDER_NAME':  name,
    }
    zarifoglu.sendMessage(to, text, contentMetadata=annda)
def sendMessageCustomContact(to, icon, name, mid):
    annda = { 'mid': mid,
    'MSG_SENDER_ICON': icon,
    'MSG_SENDER_NAME':  name,
    }
    zarifoglu.sendMessage(to, '', annda, 13)    
def sendMention(to, mid, firstmessage='', lastmessage=''):
    try:
        arrData = ""
        text = "%s " %(str(firstmessage))
        arr = []
        mention = "@zarifce "
        slen = str(len(text))
        elen = str(len(text) + len(mention) - 1)
        arrData = {'S':slen, 'E':elen, 'M':mid}
        arr.append(arrData)
        text += mention + str(lastmessage)
        try:
            zarifoglu.sendMessage(to, text, {'MSG_SENDER_NAME': zarifoglu.getContact(mid).displayName,'MSG_SENDER_ICON': "http://dl.profile.line-cdn.net/" + zarifoglu.getContact(mid).pictureStatus,'MENTION': str('{"MENTIONEES":' + json.dumps(arr) + '}')}, 0)
        except Exception as e:
            zarifoglu.sendMessage(to, text, {'MSG_SENDER_NAME': zarifoglu.getContact("u5d854616fc8ea66893e7a85b7cb0b9f1").displayName,'MSG_SENDER_ICON': 'http://dl.profile.line-cdn.net/' + zarifoglu.getContact("u5d854616fc8ea66893e7a85b7cb0b9f1").pictureStatus,'MENTION': str('{"MENTIONEES":' + json.dumps(arr) + '}')}, 0)
    except Exception as error:
        print(error)
def sendMention2(to, mid, firstmessage='', lastmessage=''):
    try:
        arrData = ""
        text = "%s " %(str(firstmessage))
        arr = []
        mention = "@zarif "
        slen = str(len(text))
        elen = str(len(text) + len(mention) - 1)
        arrData = {'S':slen, 'E':elen, 'M':mid}
        arr.append(arrData)
        text += mention + str(lastmessage)
        try:
            zarifoglu.sendMessage2(to, text, {'MSG_SENDER_NAME': zarifoglu.getContact(mid).displayName,'MSG_SENDER_ICON': "http://dl.profile.line-cdn.net/" + zarifoglu.getContact(mid).pictureStatus,'MENTION': str('{"MENTIONEES":' + json.dumps(arr) + '}')}, 0)
        except Exception as e:
            zarifoglu.sendMessage2(to, text, {'MSG_SENDER_NAME': zarifoglu.getContact(mid).displayName,'MSG_SENDER_ICON': 'http://dl.profile.line-cdn.net/' + zarifoglu.getContact(mid).pictureStatus,'MENTION': str('{"MENTIONEES":' + json.dumps(arr) + '}')}, 0)
    except Exception as error:
        print(error)
#=====================================================
def fileYtMp4(to, link):
    subprocess.getoutput('youtube-dl --format mp4 --output FileYoutube.mp4 {}'.format(link))
    try:
        zarifoglu.sendFile(to, "FileYoutube.mp4")
        time.sleep(4)
        os.remove('FileYoutube.mp4')
    except Exception as e:
        zarifoglu.sendMessage(to, ' „Äå ERROR „Äç')
def fileYtMp3(to, link):
    subprocess.getoutput('youtube-dl --extract-audio --audio-format mp3 --output FileYoutube.mp3 {}'.format(link))
    try:
        zarifoglu.sendFile(to, 'FileYoutube.mp3')
        time.sleep(4)
        os.remove('FileYoutube.mp3')
    except Exception as e:
        zarifoglu.sendMessage(to, ' „Äå ERROR „Äç')
def changeVideoAndPictureProfile(pict, vids):
    try:
        files = {'file': open(vids, 'rb')}
        obs_params = zarifoglu.genOBSParams({'oid': zarifogluMID, 'ver': '2.0', 'type': 'video', 'cat': 'vp.mp4'})
        data = {'params': obs_params}
        r_vp = zarifoglu.server.postContent('{}/talk/vp/upload.nhn'.format(str(zarifoglu.server.LINE_OBS_DOMAIN)), data=data, files=files)
        if r_vp.status_code != 201:
            return "Failed update profile"
        zarifoglu.updateProfilePicture(pict, 'vp')
        return "Success update profile"
    except Exception as e:
        raise Exception("Error change video and picture profile {}".format(str(e)))
def youtubeMp4(to, link):
    subprocess.getoutput('youtube-dl --format mp4 --output TeamAnuBot.mp4 {}'.format(link))
    try:
        zarifoglu.sendVideo(to, "TeamAnuBot.mp4")
        time.sleep(4)
        os.remove('TeamAnuBot.mp4')
    except Exception as e:
        Myflex5(to, ' „Äå ERROR „Äç\nMungkin Link Nya Salah GaN~')
def youtubeMp3(to, link):
    subprocess.getoutput('youtube-dl --extract-audio --audio-format mp3 --output TeamAnuBot.mp3 {}'.format(link))
    try:
        zarifoglu.sendAudio(to, 'TeamAnuBot.mp3')
        time.sleep(4)
        os.remove('TeamAnuBot.mp3')
    except Exception as e:
        Myflex5(to, ' „Äå ERROR „Äç\nMungkin Link Nya Salah GaN~')
def google_url_shorten(url):
    req_url = 'https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyAzrJV41pMMDFUVPU0wRLtxlbEU-UkHMcI'
    payload = {'longUrl': url}
    headers = {'content-type': 'application/json'}
    r = requests.post(req_url, data=json.dumps(payload), headers=headers)
    resp = json.loads(r.text)
    return resp['id'].replace("https://","")
#=====================================================================
def sendMentionFooter(to, mid, firstmessage, lastmessage):
    try:
        arrData = ""
        text = "%s " %(str(firstmessage))
        arr = []
        mention = "@LopeAgri"
        slen = str(len(text))
        elen = str(len(text) + len(mention))
        arrData = {'S':slen, 'E':elen, 'M':mid}
        arr.append(arrData)
        text += mention + str(lastmessage)
        nama = "{}".format(zarifoglu.getContact(zarifogluMID).displayName)
        img = "http://dl.profile.line-cdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus)
        ticket = "https://line.me/ti/p/{}".format(zarifoglu.getUserTicket().id)
        zarifoglu.sendMessage(to, text, {'AGENT_LINK': ticket, 'AGENT_ICON': img, 'AGENT_NAME': nama, 'MENTION': str('{"MENTIONEES":' + json.dumps(arr) + '}')}, 0)
    except Exception as error:
        logError(error)
        zarifoglu.sendMessage(to, "[ INFO ] Error :\n" + str(error))
#=====================================================================
def getTimeLine(to, mid):
        data = zarifoglu.getHomeProfile(mid)
        if data['result'] != []:
            try:
                no = 1
                a = " „Äå Timeline „Äç\nCreated by : @!"#+str(data['result']['homeInfo']['userInfo']['nickname'])
                for i in data['result']['feeds']:
                    gtime = i['post']['postInfo']['createdTime']
                    timeCreated = []
                    timeCreated.append(time.strftime("%d-%m-%Y [ %H:%M:%S ]", time.localtime(int(gtime) / 1000)))
                    try:
                        desc ="\n\n" + str(no) + ". Text : "+str(i['post']['contents']['text'])
                    except:
                        desc ="\n\n" + str(no) + ". Text : None"
                    a += str(desc)
                    a +="\n    Total Like : "+str(i['post']['postInfo']['likeCount'])
                    a +="\n    Total Comment : "+str(i['post']['postInfo']['commentCount'])
                    a +="\n    Created on : "+str(timeCreated[0])+"\n"
                    no = (no+1)
                a +="\n\nTotal Post : "+str(data['result']['homeInfo']['postCount'])+" Post."
                return mentions(to,str(a), [mid])
            except:
                return mentions(to, "@! not have timeline", [mid])
#=====================================================================
def mentions(to, text="", mids=[]):
    arrData = ""
    arr = []
    mention = "@PydrGans  "
    if mids == []:
        raise Exception("Invalid mids")
    if "@!" in text:
        if text.count("@!") != len(mids):
            raise Exception("Invalid mids")
        texts = text.split("@!")
        textx = ""
        for mid in mids:
            textx += str(texts[mids.index(mid)])
            slen = len(textx)
            elen = len(textx) + 15
            arrData = {'S':str(slen), 'E':str(elen - 4), 'M':mid}
            arr.append(arrData)
            textx += mention
        textx += str(texts[len(mids)])
    else:
        textx = ""
        slen = len(textx)
        elen = len(textx) + 15
        arrData = {'S':str(slen), 'E':str(elen - 4), 'M':mids[0]}
        arr.append(arrData)
        textx += mention + str(text)
    zarifoglu.sendMessage(to, textx, {'AGENT_NAME':'LINE OFFICIAL', 'AGENT_LINK': 'line://ti/p/~{}'.format(zarifoglu.getProfile().userid), 'AGENT_ICON': "http://dl.profile.line-cdn.net/" + zarifoglu.getContact("u5d854616fc8ea66893e7a85b7cb0b9f1").picturePath, 'MENTION': str('{"MENTIONEES":' + json.dumps(arr) + '}')}, 0)
#=====================================================================
def load():
    global images
    global stickers
    with open("ZarifKing/image.json","r") as fp:
        images = json.load(fp)
    with open("ZarifKing/sticker.json","r") as fp:
        stickers = json.load(fp)
def sendStickers(to, sver, spkg, sid):
    contentMetadata = {
        'STKVER': sver,
        'STKPKGID': spkg,
        'STKID': sid
    }
    zarifoglu.sendMessage(to, '', contentMetadata, 7)
def sendSticker(to, mid, sver, spkg, sid):
    contentMetadata = {
        'MSG_SENDER_NAME': zarifoglu.getContact(mid).displayName,
        'MSG_SENDER_ICON': 'http://dl.profile.line-cdn.net/' + zarifoglu.getContact(mid).pictureStatus,
        'STKVER': sver,
        'STKPKGID': spkg,
        'STKID': sid
    }
    zarifoglu.sendMessage(to, '', contentMetadata, 7)
def sendImage(to, path, name="image"):
    try:
        if settings["server"] == "VPS":
            zarifoglu.sendImageWithURL(to, str(path))
    except Exception as error:
        logError(error)
#=====================================================================
def cloneProfile(mid):
    contact = zarifoglu.getContact(mid)
    if contact.videoProfile == None:
        profile = zarifoglu.getProfile()
        profile.displayName, profile.statusMessage = contact.displayName, contact.statusMessage
        zarifoglu.updateProfile(profile)
        pict = zarifoglu.downloadFileURL('http://dl.profile.line-cdn.net/' + contact.pictureStatus, saveAs="tmp/pict.bin")
        zarifoglu.updateProfilePicture(pict)
    else:
        profile = zarifoglu.getProfile()
        profile.displayName, profile.statusMessage = contact.displayName, contact.statusMessage
        zarifoglu.updateProfile(profile)
        pict = zarifoglu.downloadFileURL('http://dl.profile.line-cdn.net/' + contact.pictureStatus, saveAs="tmp/pict.bin")
        vids = zarifoglu.downloadFileURL( 'http://dl.profile.line-cdn.net/' + contact.pictureStatus + '/vp', saveAs="tmp/video.bin")
        changeVideoAndPictureProfile(pict, vids)
    coverId = zarifoglu.getProfileDetail(mid)['result']['objectId']
    zarifoglu.updateProfileCoverById(coverId)
def backupProfile():
    profile = zarifoglu.getContact(zarifogluMID)
    if settings['myProfile']['videoProfile'] == None:
        settings['myProfile']['displayName'] = profile.displayName
        settings['myProfile']['pictureStatus'] = profile.pictureStatus
        settings['myProfile']['statusMessage'] = profile.statusMessage
        coverId = zarifoglu.getProfileDetail()['result']['objectId']
        settings['myProfile']['coverId'] = str(coverId)
        pict = zarifoglu.downloadFileURL('http://dl.profile.line-cdn.net/' + profile.pictureStatus, saveAs="tmp/pict.bin")
        zarifoglu.updateProfilePicture(pict)
    else:
        settings['myProfile']['displayName'] = profile.displayName
        settings['myProfile']['pictureStatus'] = profile.pictureStatus
        settings['myProfile']['statusMessage'] = profile.statusMessage
        settings['myProfile']['videoProfile'] = profile.videoProfile
        coverId = indonesiandefacer.getProfileDetail()['result']['objectId']
        settings['myProfile']['coverId'] = str(coverId)
def restoreProfile():
    profile = zarifoglu.getProfile()
    profile.displayName = settings['myProfile']['displayName']
    profile.statusMessage = settings['myProfile']['statusMessage']
    if settings['myProfile']['videoProfile'] == None:
        pict = zarifoglu.downloadFileURL('http://dl.profile.line-cdn.net/' + settings['myProfile']['pictureStatus'], saveAs="tmp/pict.bin")
        zarifoglu.updateProfilePicture(pict)
        zarifoglu.updateProfile(profile)
    else:
        zarifoglu.updateProfile(profile)
        pict = zarifoglu.downloadFileURL('http://dl.profile.line-cdn.net/' + settings['myProfile']['pictureStatus'], saveAs="tmp/pict.bin")
        vids = zarifoglu.downloadFileURL( 'http://dl.profile.line-cdn.net/' + settings['myProfile']['pictureStatus'] + '/vp', saveAs="tmp/video.bin")
        changeVideoAndPictureProfile(pict, vids)
    coverId = settings['myProfile']['coverId']
    zarifoglu.updateProfileCoverById(coverId)
def changeProfileVideo(to):
    if settings['changeProfileVideo']['picture'] == None:
        return zarifoglu.sendMessage(to, "Foto tidak ditemukan")
    elif settings['changeProfileVideo']['video'] == None:
        return zarifoglu.sendMessage(to, "Video tidak ditemukan")
    else:
        path = settings['changeProfileVideo']['video']
        files = {'file': open(path, 'rb')}
        obs_params = zarifoglu.genOBSParams({'oid': zarifoglu.getProfile().mid, 'ver': '2.0', 'type': 'video', 'cat': 'vp.mp4'})
        data = {'params': obs_params}
        r_vp = zarifoglu.server.postContent('{}/talk/vp/upload.nhn'.format(str(zarifoglu.server.LINE_OBS_DOMAIN)), data=data, files=files)
        if r_vp.status_code != 201:
            return zarifoglu.sendMessage(to, "Gagal update profile")
        path_p = settings['changeProfileVideo']['picture']
        settings['changeProfileVideo']['status'] = False
        zarifoglu.updateProfilePicture(path_p, 'vp')
def backProfileVideo():
    path = settings['changeProfileVideo']['video']
    files = {'file': open(path, 'rb')}
    obs_params = zarifoglu.genOBSParams({'oid': zarifoglu.getProfile().mid, 'ver': '2.0', 'type': 'video', 'cat': 'vp.mp4'})
    data = {'params': obs_params }
    r_vp = zarifoglu.server.postContent('{}/talk/vp/upload.nhn'.format(str(zarifoglu.server.LINE_OBS_DOMAIN)), data=data, files=files)
    if r_vp.status_code != 201:
        return zarifoglu.sendMessage(to, "Failed")
    path_p = settings['changeProfileVideo']['picture']
    zarifoglu.updateProfilePicture(path_p, 'vp')
def lol(to,hehe):
    data = {"messages": [{"type": "text","text": hehe,"sentBy":{"label":"Turkey","iconUrl":"https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus),"linkUrl":"https://line.me/ti/p/~" + zarifoglu.profile.userid}}]}
    sendCarousel(to,data)
def pendekin(to,url):
    req_url = 'https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyAzrJV41pMMDFUVPU0wRLtxlbEU-UkHMcI'
    payload = {'longUrl': url}
    headers = {'content-type': 'application/json'}
    r = requests.post(req_url, data=json.dumps(payload), headers=headers)
    resp = json.loads(r.text)
    return resp['id']
#=====================================================================
def speedtest(secs):
    mins, secs = divmod(secs,60)
    hours, mins = divmod(mins,60)
    days, hours = divmod(hours,24)
    weaks, days = divmod(days,7)
    if days == 0:
        return '%02d' % (secs)
    elif days > 0 and weaks == 0:
        return '%02d' %(secs)
    elif days > 0 and weaks > 0:
        return '%02d' %(secs)
#=====================================================================
def change(url):
	import base64
	return base64.b64encode(url.encode()).decode()
#=====================================================================
def tagdia(to, text="",ps='', mids=[]):
        arrData = ""
        arr = []
        mention = "@MentionOrang "
        if mids == []:
            raise Exception("Invalid mids")
        if "@!" in text:
            if text.count("@!") != len(mids):
                raise Exception("Invalid mids")
            texts = text.split("@!")
            textx = ''
            h = ''
            for mid in range(len(mids)):
                h+= str(texts[mid].encode('unicode-escape'))
                textx += str(texts[mid])
                if h != textx:slen = len(textx)+h.count('U0');elen = len(textx)+h.count('U0') + 13
                else:slen = len(textx);elen = len(textx) + 13
                arrData = {'S':str(slen), 'E':str(elen), 'M':mids[mid]}
                arr.append(arrData)
                textx += mention
            textx += str(texts[len(mids)])
        else:
            textx = ''
            slen = len(textx)
            elen = len(textx) + 18
            arrData = {'S':str(slen), 'E':str(elen - 4), 'M':mids[0]}
            arr.append(arrData)
            textx += mention + str(text)
        zarifoglu.sendMessage(to, textx, {'MSG_SENDER_NAME': zarifoglu.getContact(ps).displayName,'MSG_SENDER_ICON': "http://dl.profile.line-cdn.net/" + zarifoglu.getContact(ps).pictureStatus,'MENTION': str('{"MENTIONEES":' + json.dumps(arr) + '}')}, 0)
#=====================================================================
def timeChange(secs):
    mins, secs = divmod(secs,60)
    hours, mins = divmod(mins,60)
    days, hours = divmod(hours,24)
    weeks, days = divmod(days,7)
    months, weeks = divmod(weeks,4)
    text = ""
    if months != 0: text += "%02d Month" % (months)
    if weeks != 0: text += " %02d Week" % (weeks)
    if days != 0: text += " %02d Day" % (days)
    if hours !=  0: text +=  " %02d Hours" % (hours)
    if mins != 0: text += " %02d Minute" % (mins)
    if secs != 0: text += " %02d Seconds" % (secs)
    if text[0] == " ":
        text = text[1:]
    return text

def debug():
    get_profile_time_start = time.time()
    get_profile = zarifoglu.getProfile()
    get_profile_time = time.time() - get_profile_time_start
    return " „Äå  Time  „Äç\n %.5f" % (get_profile_time)
#=====================================================================
def autoresponuy(to,msg,wait):
    to = msg.to
    if msg.to not in wait["GROUP"]['AR']['AP']:
        return
    if msg.to in wait["GROUP"]['AR']['S']:
        zarifoglu.sendMessage(msg.to,text=None,contentMetadata=wait["GROUP"]['AR']['S'][msg.to]['Sticker'], contentType=7)
    if(wait["GROUP"]['AR']['P'][msg.to] in [""," ","\n",None]):
        return
    if '@!' not in wait["GROUP"]['AR']['P'][msg.to]:
        wait["GROUP"]['AR']['P'][msg.to] = '@!'+wait["GROUP"]['AR']['P'][msg.to]
    nama = zarifoglu.getGroup(msg.to).name
    sd = zarifoglu.waktunjir()
    zarifoglu.sendMention(msg.to,wait["GROUP"]['AR']['P'][msg.to].replace('greeting',sd).replace(';',nama),'',[msg._from]*wait["GROUP"]['AR']['P'][msg.to].count('@!'))
def anulurk(to, wait):
    moneys = {}
    for a in wait["setTime"][to].items():
        moneys[a[1]] = [a[0]] if a[1] is not None else idnya
    sort = sorted(moneys)
    sort = sort[0:]
    k = len(sort)//100
    for a in range(k+1):
        if a == 0:no= a;msgas = '‚ï≠„Äå Lurkers „Äç‚îÄ'
        else:no = a*100;msgas = '‚îú„Äå Lurkers „Äç‚îÄ'
        h = []
        for i in sort[a*100 : (a+1)*100]:
            h.append(moneys[i][0])
            no+=1
            a = '{}'.format(humanize.naturaltime(datetime.fromtimestamp(i/1000)))
            if no == len(sort):msgas+='\n‚îÇ{}. @!\n‚ï∞    „Äå {} „Äç'.format(no,a)
            else:msgas+='\n‚îÇ{}. @!\n‚îÇ    „Äå {} „Äç'.format(no,a)
        mentions(to, msgas, h)
def logError(text):
    zarifoglu.log("ERROR 404 !\n" + str(text))
    tz = pytz.timezone("Asia/Istanbul")
    timeNow = datetime.now(tz=tz)
    timeHours = datetime.strftime(timeNow,"(%H:%M)")
    day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]
    hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
    bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
    inihari = datetime.now(tz=tz)
    hr = inihari.strftime('%A')
    bln = inihari.strftime('%m')
    for i in range(len(day)):
        if hr == day[i]: hasil = hari[i]
    for k in range(0, len(bulan)):
        if bln == str(k): bln = bulan[k-1]
    time = hasil + ", " + inihari.strftime('%d') + " - " + bln + " - " + inihari.strftime('%Y') + " | " + inihari.strftime('%H:%M:%S')
    with open("ZarifKing/errorLog.txt","a") as error:
        error.write("\n[%s] %s" % (str(time), text))
#=====================================================================
#def delExpire():
#    if temp_flood != {}:
#        for tmp in temp_flood:
#            if temp_flood[tmp]["expire"] == True:
#                if time.time() - temp_flood[tmp]["time"] >= 3*10:
#                    temp_flood[tmp]["expire"] = False
#                    temp_flood[tmp]["time"] = time.time()
#                    try:
#                        zarifoglu.sendMessage(tmp, "„Äå Detect Flood „Äç\nSelfBot has been Enabled ‚ô™")
#                    except Exception as error:
#                        logError(error)
#=====================================================================
def command(text):
    pesan = text.lower()
    if settings["setKey"] == True:
        if pesan.startswith(settings["keyCommand"]):
            cmd = pesan.replace(settings["keyCommand"],"")
        else:
            cmd = "Undefined command"
    else:
        cmd = text.lower()
    return cmd
#=====================================================================
def removeCmd(cmd, text):
	key = settings["keyCommand"]
	if settings["setKey"] == False: key = ''
	rmv = len(key + cmd) + 1
	return text[rmv:]
#=====================================================================
def backupData():
    try:
        backup = settings
        f = codecs.open('ZarifKing/temp.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        backup = stickers
        f = codecs.open('ZarifKing/sticker.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        backup = images
        f = codecs.open('ZarifKing/image.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        backup = seens
        f = codecs.open('ZarifKing/lastseen.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        backup = wait
        f = codecs.open('ZarifKing/wait.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        backup = contacts
        f = codecs.open('ZarifKing/contact.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        backup = stickers1
        f = codecs.open('ZarifKing/sticker1.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        backup = stickers2
        f = codecs.open('ZarifKing/sticker2.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        backup = anumu
        f = codecs.open('ZarifKing/stickertemp.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        backup = groupName
        f = codecs.open('ZarifKing/groupname.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        backup = groupQr
        f = codecs.open('ZarifKing/groupqr.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        backup = protectKick
        f = codecs.open('ZarifKing/protectkick.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        backup = blockInvite
        f = codecs.open('ZarifKing/blockinvite.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        backup = notag
        f = codecs.open('ZarifKing/notag.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        return True
    except Exception as error:
        logError(error)
        return False
#=====================================================================
async def zarifogluBot(op):
    try:
        if settings["restartPoint"] != None:
            zarifoglu.sendMessage(settings["restartPoint"], 'Activated‚ô™')
            settings["restartPoint"] = None
        if op.type == 0:
            return
        if op.type == 5:
            print ("[ 5 ] NOTIFIED AUTO BLOCK CONTACT")
            if blocked["autoBlock"]:
                zarifoglu.blockContact(op.param1)
                zarifoglu.sendMessage(op.param1, blocked["pesanya"])
        if op.type == 5:
            if(settings["addPesan"] in [""," ","\n",None]):
                return
            if '@!' not in settings["addPesan"]:
                settings["addPesan"] = '@!'+settings["addPesan"]
            sd = zarifoglu.waktunjir()
            zarifoglu.sendMention2(op.param1,settings["addPesan"].replace('greeting',sd),' „Äå Autoadd „Äç\n',[op.param1]*settings["addPesan"].count('@!'))
            msgSticker = settings["messageSticker"]["listSticker"]["addSticker"]
            if msgSticker != None:
                sid = msgSticker["STKID"]
                spkg = msgSticker["STKPKGID"]
                sver = msgSticker["STKVER"]
                sendSticker(op.param1, op.param1, sver, spkg, sid)
            #if settings["autoAdd"] == True:zarifoglu.findAndAddContactsByMid(op.param1)
#=============================================
        if op.type == 11:
            print ("[ 11 ] NOTIFIED UPDATE GROUP")
            if op.param3 == "1" and op.param1 in groupName:
                if op.param2 not in zarifogluMID:
                    try:
                        MyFooter(op.param1,"Don't change name group")
                        try: zarifoglu.kickoutFromGroup(op.param1,[op.param2])
                        except: Myflex5(op.param1, "Limeted")
                        G = zarifoglu.getGroup(op.param1)
                        G.name = groupName[op.param1]
                        zarifoglu.updateGroup(G)
                    except:
                        pass
            if op.param3 == "4" and op.param1 in groupQr:
                if op.param2 not in zarifogluMID:
                    try:
                        MyFooter(op.param1,"Don't playing code QR")
                        try: zarifoglu.kickoutFromGroup(op.param1,[op.param2])
                        except: MyFooter(op.param1, "Limeted")
                        group = zarifoglu.getGroup(op.param1)
                        group.preventedJoinByTicket = True
                        contact = zarifoglu.getContact(op.param2)
                        zarifoglu.updateGroup(group)
                    except:
                        pass
#=====================================================================
        if op.type in [13,124]:
            if zarifoglu.getProfile().mid in op.param3:
                G = zarifoglu.getCompactGroup(op.param1)
                if settings["autoJoin"] == True:
                    if len(G.members) <= wait["Members"]:
                        zarifoglu.acceptGroupInvitation(op.param1)
                        status = zarifoglu.getContact(op.param2)
                        ginfo = zarifoglu.getGroup(op.param1)
                        gold = jointag["jointag"]
                        data = {
                                    "type": "flex","altText": settings["bayrak"],
                                    "contents": {"type": "carousel","contents": [{"type": "bubble",'styles': {"body": {"backgroundColor": "{}".format(setbot["background"])}},
                                    "body": {"type": "box","layout": "vertical","contents": [
                                    {"type": "image","url": "https://obs.line-scdn.net/{}".format(status.pictureStatus),"size": "full","aspectMode": "cover","aspectRatio": "1:1","gravity": "top","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}},
                                    {"type": "box","layout": "vertical","contents": [
                                    {"type": "image","url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus),
                                    "action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid},"aspectMode": "cover"}],
                                    "position": "absolute","cornerRadius": "30px","borderWidth": "2px","borderColor": "{}".format(setbot["separator"]),"width": "60px","height": "60px"},
                                    {"type": "box","layout": "vertical","contents": [
                                    {"type": "box","layout": "vertical","contents": [
                                    {"type": "text","text": "{}".format(status.displayName),"size": "lg","color": "{}".format(setbot["text"]),"weight": "bold","align": "center"},
                                    {"type": "separator","color": "{}".format(setbot["separator"]),"margin": "none"}]},
                                    {"type": "box","layout": "baseline","contents": [
                                    {"type": "text","text": "{}".format(gold),"color": "{}".format(setbot["text"]),"size": "sm","flex": 0,"wrap": True,"style": "italic","weight": "bold"}],"spacing": "lg"}],
                                    "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","backgroundColor": "#000000aa","paddingAll": "20px","paddingTop": "18px"},
                                    {"type": "box","layout": "vertical","contents": [
                                    {"type": "text","text": settings["bayrak"],"color": "{}".format(setbot["text"]),"align": "center","size": "xs","offsetTop": "3px","weight": "bold"}],
                                    "backgroundColor": "#000000aa","height": "25px","width": "120px","cornerRadius": "sm","position": "absolute","offsetEnd": "0px","offsetTop": "18px"}],
                                    "paddingAll": "0px","borderWidth": "3px","borderColor": "{}".format(setbot["separator"]),"cornerRadius": "xl"}}]}}
                        sendTemplate(op.param1, data)
                        zarifoglu.leaveGroup(op.param1)
                    else:
                        zarifoglu.acceptGroupInvitation(op.param1)
                        status = zarifoglu.getContact(op.param2)
                        ginfo = zarifoglu.getGroup(op.param1)
                        gold = jointag["jointag"]
                        data = {
                                    "type": "flex","altText": settings["bayrak"],
                                    "contents": {"type": "carousel","contents": [{"type": "bubble",'styles': {"body": {"backgroundColor": "{}".format(setbot["background"])}},
                                    "body": {"type": "box","layout": "vertical","contents": [
                                    {"type": "image","url": "https://obs.line-scdn.net/{}".format(status.pictureStatus),"size": "full","aspectMode": "cover","aspectRatio": "1:1","gravity": "top","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}},
                                    {"type": "box","layout": "vertical","contents": [
                                    {"type": "image","url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus),
                                    "action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid},"aspectMode": "cover"}],
                                    "position": "absolute","cornerRadius": "30px","borderWidth": "2px","borderColor": "{}".format(setbot["separator"]),"width": "60px","height": "60px"},
                                    {"type": "box","layout": "vertical","contents": [
                                    {"type": "box","layout": "vertical","contents": [
                                    {"type": "text","text": "{}".format(status.displayName),"size": "lg","color": "{}".format(setbot["text"]),"weight": "bold","align": "center"},
                                    {"type": "separator","color": "{}".format(setbot["separator"]),"margin": "none"}]},
                                    {"type": "box","layout": "baseline","contents": [
                                    {"type": "text","text": "{}".format(gold),"color": "{}".format(setbot["text"]),"size": "sm","flex": 0,"wrap": True,"style": "italic","weight": "bold"}],"spacing": "lg"}],
                                    "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","backgroundColor": "{}".format(setbot["background"]),"paddingAll": "20px","paddingTop": "18px"},
                                    {"type": "box","layout": "vertical","contents": [
                                    {"type": "text","text": settings["bayrak"],"color": "{}".format(setbot["text"]),"align": "center","size": "xs","offsetTop": "3px","weight": "bold"}],
                                    "backgroundColor": "{}".format(setbot["background"]),"height": "25px","width": "120px","cornerRadius": "sm","position": "absolute","offsetEnd": "0px","offsetTop": "18px"}],
                                    "paddingAll": "0px","borderWidth": "3px","borderColor": "{}".format(setbot["separator"]),"cornerRadius": "xl"}}]}}
                        sendTemplate(op.param1, data)
            else:pass
#=====================================================================
        if op.type == 15:
            Gr = op.param1
            Tr = zarifoglu.getContact(op.param2).mid
            if wait["auto_invite"] == True:
              try:
                zarifoglu.findAndAddContactsByMid(Tr)
                zarifoglu.inviteIntoGroup(op.param1,admin)
              #except:zarifoglu.sendMessage(Gr, "limit invite")
              except:
                  pass
        if op.type in [22,24]:
            Gr = op.param1
            Tr = zarifoglu.getContact(op.param2).mid
            if wait["auto_room"] == True:
              try:
                #zarifoglu.findAndAddContactsByMid(op.param2)
                zarifoglu.inviteIntoRoom(op.param1,admin)
              #except:zarifoglu.sendMessage(Gr, "limit invite")
              except:
                  pass
#=====================================================================
        if op.type in [13,124]:
            #print (">Gruba davet edildi<")
            if op.param1 in blockInvite:
                if op.param2 not in zarifogluMID:
                    group = zarifoglu.getCompactGroup(op.param1)
                    targets = [contact.mid for contact in group.invitee]
                    for target in targets:
                        if target in op.param3:
                            try:
                                try:
                                    zarifoglu.cancelGroupInvitation(op.param1,[target])
                                    zarifoglu.kickoutFromGroup(op.param1,[op.param2])
                                except:
                                    zarifoglu.kickoutFromGroup(op.param1,[target])
                                    zarifoglu.kickoutFromGroup(op.param1,[op.param2])
                            except:
                                pass
#=====================================================================
        if op.type == 15:
            if op.param1 in wait["GROUP"]['LM']['AP']:
                if op.param1 in wait["GROUP"]['LM']['S']:
                    zarifoglu.sendMessage(op.param2,text=None,contentMetadata=wait["GROUP"]['LM']['S'][op.param1]['Sticker'], contentType=7)
                zarifoglu.sendMention(op.param2, "{}".format(wait["GROUP"]['LM']['P'][op.param1].replace('|',' @!')),' „Äå Leave Detect „Äç\n',[op.param2])
#=====================================================================
        if op.type == 15:
            #print ("[ 15 ] NOTIFIED LEAVE GROUP")
            if lvin["lMessage"] == True:
                mat = zarifoglu.getContact(op.param2)
                fit = zarifoglu.getCompactGroup(op.param1)
                pesanya = lvin["textnya"]
                data={"type":"flex","altText":settings["bayrak"],"contents":{
  "type": "bubble",
  "body": {
    "type": "box",
    "layout": "vertical",
    "contents": [
      {
        "type": "text",
        "text": "LEAVE MESSAGE",
        "size": "md",
        "color": "{}".format(setbot["text"]),
        "weight": "bold",
        "align": "center"
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "spacer"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "separator",
                "color": "{}".format(setbot["separator"]),
                "margin": "md"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "image",
                    "url": "https://obs.line-scdn.net/{}".format(mat.pictureStatus),
                    "align": "center",
                    "size": "xxl",
                    "aspectMode": "fit",
                    "aspectRatio": "2:1",
                    "action": {
                      "type": "uri",
                      "label": "action",
                      "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                    }
                  },
                  {
                    "type": "separator",
                    "color": "{}".format(setbot["background"]),
                    "margin": "lg"
                  },
                  {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Bye bye {}".format(str(mat.displayName)),
                        "size": "sm",
                        "color": "{}".format(setbot["text"]),
                        "weight": "bold",
                        "flex": 0,
                        "align": "center",
                        "wrap": True
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                      {
                        "type": "text",
                        "text": "{}".format(pesanya),
                        "size": "sm",
                        "color": "{}".format(setbot["text"]),
                        "weight": "bold",
                        "flex": 0,
                        "align": "center",
                        "wrap": True
                      }
                    ],
                    "spacing": "sm"
                  }
                ]
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "separator",
                    "color": "{}".format(setbot["separator"]),
                    "margin": "lg"
                  },
                  {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                      {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                          {
                            "type": "image",
                            "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                            "size": "xxs",
                            "align": "start"
                          }
                        ],
                        "width": "25px",
                        "height": "25px",
                        "borderWidth": "2px",
                        "borderColor": "{}".format(setbot["separator"]),
                        "cornerRadius": "xl"
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "spacing": "sm",
                        "contents": [
                          {
                            "type": "text",
                            "text": settings["bayrak"],
                            "size": "md",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "margin": "sm",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                            }
                          }
                        ]
                      }
                    ],
                    "margin": "lg"
                  }
                ],
                "spacing": "sm",
                "margin": "md"
              }
            ]
          }
        ],
        "margin": "sm"
      }
    ],
    "borderColor": "{}".format(setbot["separator"]),
    "cornerRadius": "xl",
    "borderWidth": "4px"
  },
  "styles": {
    "body": {
      "backgroundColor": "{}".format(setbot["background"])
    }
  }
}}
                sendTemplate(op.param1,data)
#=====================================================================
        if op.type == 60:
            #print ("[ 17 ] NOTIFIED INVITE INTO GROUP")
            if wmin["wMessage"] == True:
                mat = zarifoglu.getContact(op.param2)
                fit = zarifoglu.getCompactGroup(op.param1)
                pesanya = wmin["textnya"]
                data={"type":"flex","altText":settings["bayrak"],"contents":{
  "type": "bubble",
  "body": {
    "type": "box",
    "layout": "vertical",
    "contents": [
      {
        "type": "text",
        "text": "WELCOME MESSAGE",
        "size": "md",
        "color": "{}".format(setbot["text"]),
        "weight": "bold",
        "align": "center"
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "spacer"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "separator",
                "color": "{}".format(setbot["separator"]),
                "margin": "md"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "image",
                    "url": "https://obs.line-scdn.net/{}".format(mat.pictureStatus),
                    "align": "center",
                    "size": "xxl",
                    "aspectMode": "fit",
                    "aspectRatio": "2:1",
                    "action": {
                      "type": "uri",
                      "label": "action",
                      "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                    }
                  },
                  {
                    "type": "separator",
                    "color": "{}".format(setbot["background"]),
                    "margin": "lg"
                  },
                  {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Hmm {}".format(str(mat.displayName)),
                        "size": "sm",
                        "color": "{}".format(setbot["text"]),
                        "weight": "bold",
                        "flex": 0,
                        "align": "center",
                        "wrap": True
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Welcome to {}".format(str(fit.name)),
                        "size": "sm",
                        "color": "{}".format(setbot["text"]),
                        "weight": "bold",
                        "flex": 0,
                        "align": "center",
                        "wrap": True
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                      {
                        "type": "text",
                        "text": "{}".format(pesanya),
                        "size": "sm",
                        "color": "{}".format(setbot["text"]),
                        "weight": "bold",
                        "flex": 0,
                        "align": "center",
                        "wrap": True
                      }
                    ],
                    "spacing": "sm"
                  }
                ]
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "separator",
                    "color": "{}".format(setbot["separator"]),
                    "margin": "lg"
                  },
                  {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                      {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                          {
                            "type": "image",
                            "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                            "size": "xxs",
                            "align": "start"
                          }
                        ],
                        "width": "25px",
                        "height": "25px",
                        "borderWidth": "2px",
                        "borderColor": "{}".format(setbot["separator"]),
                        "cornerRadius": "xl"
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "spacing": "sm",
                        "contents": [
                          {
                            "type": "text",
                            "text": settings["bayrak"],
                            "size": "md",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "margin": "sm",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                            }
                          }
                        ]
                      }
                    ],
                    "margin": "lg"
                  }
                ],
                "spacing": "sm",
                "margin": "md"
              }
            ]
          }
        ],
        "margin": "sm"
      }
    ],
    "borderColor": "{}".format(setbot["separator"]),
    "cornerRadius": "xl",
    "borderWidth": "4px"
  },
  "styles": {
    "body": {
      "backgroundColor": "{}".format(setbot["background"])
    }
  }
}}
                sendTemplate(op.param1,data)

        if op.type == 60:
            #print ("[ 17 ] NOTIFIED INVITE INTO GROUP")
            if wmin2["wMessage"] == True:
                thegold = zarifoglu.getContact(op.param2)
                fit = zarifoglu.getCompactGroup(op.param1)
                goldmesaj = wmin2["textnya"]
                data={"type":"flex","altText":settings["bayrak"],"contents":{
                "type":"bubble","styles":{"body":{"backgroundColor":"{}".format(setbot["background"])}},
                "body":{"type":"box","layout":"vertical","spacing":"lg","contents":[{"type":"image","url":"https://i.ibb.co/j65dw8w/Pics-Art-01-24-06-03-30.png","size":"xl","aspectRatio":"6.50:1","aspectMode":"cover",
                "action":{"type":"uri","uri":"https://line.me/ti/p/~" + zarifoglu.profile.userid}},
                {"type":"box","layout":"horizontal","spacing":"xl","contents":[{"type":"image","url":"https://obs.line-scdn.net/{}".format(thegold.pictureStatus),"size":"full","aspectRatio":"1:1","aspectMode":"fit",
                "action":{"type":"uri","uri":"https://line.me/ti/p/~" + zarifoglu.profile.userid}},
                {"type":"text","text":"\nMerhaba {}\n\n{}\n{}".format(str(thegold.displayName),(goldmesaj),(fit.name)),"size":"sm","color":"{}".format(setbot["text"]),"wrap":True}]}]}}}
                sendTemplate(op.param1,data)

#=====================================================================
        if op.type == 60:
            if op.param1 in wait["GROUP"]['WM']['AP']:
                if op.param1 in wait["GROUP"]['WM']['S']:
                    zarifoglu.sendMessage(op.param1,text=None,contentMetadata=wait["GROUP"]['WM']['S'][op.param1]['Sticker'], contentType=7)
                if(wait["GROUP"]['WM']['P'][op.param1] in [""," ","\n",None]):
                    return
                if '@!' not in wait["GROUP"]['WM']['P'][op.param1]:
                    wait["GROUP"]['WM']['P'][op.param1] = '@!'+wait["GROUP"]['WM']['P'][op.param1]
                nama = zarifoglu.getGroup(op.param1).name
                sd = zarifoglu.waktunjir()
                zarifoglu.sendMention(op.param1,wait["GROUP"]['WM']['P'][op.param1].replace('greeting',sd).replace('Greeting',sd).replace(';',nama),' „Äå Welcome Message „Äç\n',[op.param2]*wait["GROUP"]['WM']['P'][op.param1].count('@!'))
        if op.type == 60:
            if op.param2 in wait["blacklist"]:
                try:
                    group = zarifoglu.getGroup(op.param1)
                    group.preventedJoinByTicket = True
                    zarifoglu.updateGroup(group)
                    zarifoglu.kickoutFromGroup(op.param1,[op.param2])
                    group.preventedJoinByTicket = True
                    zarifoglu.updateGroup(group)
                except Exception as e:
                    group = zarifoglu.getGroup(op.param1)
                    group.preventedJoinByTicket = True
                    zarifoglu.kickoutFromGroup(op.param1,[op.param2])
                    zarifoglu.updateGroup(group)
#=====================================================================
        if op.type in [19,61]:
            if op.param1 in protectKick:
                if op.param2 not in zarifogluMID:
                    try:
                        zarifoglu.sendMessage(op.param1, "Kick Detected , Protection on in this Group")
                        try: zarifoglu.kickoutFromGroup(op.param1,[op.param2])
                        except: zarifoglu.sendMessage(op.param1, "Limited")
                        zarifoglu.sendContact(op.param1, op.param2)
                    except:
                        pass
#=====================================================================
        if op.type in [22,24]:
#    	if zarifoglu.getProfile().mid in op.param3:
            if mcroom["leaveMC"] == True:
                zarifoglu.sendMessage(op.param1,"Bo≈üa K√ºrek Sallama !")
                zarifoglu.leaveRoom(op.param1)
        if op.type == 26:
            #print ("[ 26 ] RECEIVE MESSAGE")
            msg = op.message
            text = str(msg.text)
            msg_id = msg.id
            receiver = msg.to
            sender = msg._from
            to = msg.to
            cmd = command(text)
            isValid = True
            setKey = settings["keyCommand"].title()
            if settings["setKey"] == False: setKey = ''
            if isValid != False:
                if msg.contentType == 0 and sender not in zarifogluMID and msg.toType == 2:
                    if 'MENTION' in msg.contentMetadata.keys() != None:
                        if sets["tagsticker"] == True:
                            name = re.findall(r'@(\w+)', msg.text)
                            mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                            mentionees = mention['MENTIONEES']
                            for mention in mentionees:
                                 if zarifogluMID in mention["M"]:
                                      msg = sets["messageStickerz"]["listStickerz"]["responSticker"]
                                      if msg != None:
                                          contact = zarifoglu.getContact(zarifogluMID)
                                          sid = msg['STKID']
                                          spkg = msg['STKPKGID']
                                          a = zarifoglu.shop.getProduct(packageID=int(spkg), language='ID', country='ID')
                                          if a.hasAnimation == True:data = {"type": "template","altText": "{} sent a sticker.".format(zarifoglu.getProfile().displayName),"template": {"type": "image_carousel","columns": [{"imageUrl": "https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/IOS/sticker_animation@2x.png".format(sid),"size": "full","action": {"type": "uri","uri": "http://line.me/S/sticker/{}".format(spkg)}}]}}
                                          else:data = {"type": "template","altText": "{} sent a sticker.".format(zarifoglu.getProfile().displayName),"template": {"type": "image_carousel","columns": [{"imageUrl": "https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/IOS/sticker@2x.png".format(sid),"size": "full","action": {"type": "uri","uri": "http://line.me/S/sticker/{}".format(spkg)}}]}}
                                          sendTemplate(to, data)
                                      else:
                                          contact = zarifoglu.getContact(zarifogluMID)
                                          sid = msg['STKID']
                                          spkg = msg['STKPKGID']
                                          a = zarifoglu.shop.getProduct(packageID=int(spkg), language='ID', country='ID')
                                          if a.hasAnimation == True:data = {"type": "template","altText": "{} sent a sticker.".format(zarifoglu.getProfile().displayName),"template": {"type": "image_carousel","columns": [{"imageUrl": "https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/IOS/sticker_animation@2x.png".format(sid),"size": "full","action": {"type": "uri","uri": "http://line.me/S/sticker/{}".format(spkg)}}]}}
                                          else:data = {"type": "template","altText": "{} sent a sticker.".format(zarifoglu.getProfile().displayName),"template": {"type": "image_carousel","columns": [{"imageUrl": "https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/IOS/sticker@2x.png".format(sid),"size": "full","action": {"type": "uri","uri": "http://line.me/S/sticker/{}".format(spkg)}}]}}
                                          sendTemplate(to, data)
#=====================================================================
        if op.type in [25, 26]:
           # if op.type == 25: print ("[ 25 ] Turkey SEND MESSAGE")
            #else: print ("[ 26 ] Turkey RECEIVE MESSAGE")
            msg = op.message
            text = str(msg.text)
            msg_id = msg.id
            receiver = msg.to
            sender = msg._from
            to = msg.to
            cmd = command(text)
            isValid = True
            setKey = settings["keyCommand"].title()
            if settings["setKey"] == False: setKey = ''
            if isValid != False:
                if msg.toType == 0 and sender != zarifogluMID: to = sender
                else: to = receiver
            if komen["komenan"] == True:
                if msg.contentType == 16:
                    try:
                        purl = msg.contentMetadata["postEndUrl"].split('userMid=')[1].split('&postId=')
                        if purl[1] not in wait['postId']:
                            zarifoglu.likePost(purl[0], purl[1], random.choice([1001,1002,1003,1004,1005]))
                            Myflex5(to, "Your post has been liked")
                            zarifoglu.createComment(purl[0], purl[1], settings["commentPost"])
                            wait['postId'].append(purl[1])
                        else:
                            pass
                    except Exception as e:
                        purl = msg.contentMetadata['postEndUrl'].split('homeId=')[1].split('&postId=')
                        if purl[1] not in wait['postId']:
                            zarifoglu.likePost(msg._from, purl[1], random.choice([1001,1002,1003,1004,1005]))
                            Myflex5(to, "Your post has been liked")
                            zarifoglu.createComment(msg._from, purl[1], settings["commentPost"])
                            wait['postId'].append(purl[1])
                        else:pass
#=====================================================================
        if op.type in [25, 26]:
            if op.type == 25: print ("‚û™ Giden Mesaj ‚èé")
            #else: print ("[ 26 ] RECEIVE MESSAGE")
            else: print ("‚úÆ ‚úµ Gelen Mesaj ‚úµ ‚úÆ")
            msg = op.message               
            text = msg.text
            msg_id = msg.id
            receiver = msg.to             
            sender = msg._from
            contact = zarifoglu.getContact(sender)
            print(contact.displayName,  msg.text)
            s = zarifoglu.getProfile().mid
            setKey = settings["keyCommand"].title()
            if settings["setKey"] == False:
               setKey = ''
            if msg.toType == 0 or msg.toType == 1 or msg.toType == 2:
                if msg.toType == 0:                    	
                    if sender != zarifoglu.profile.mid:
                        to = sender
                    else:
                        to = receiver
                elif msg.toType == 1:
                    to = receiver
                elif msg.toType == 2:
                    to = receiver
                if msg.contentType == 0:
                    if text is None:
                        return
                    else:
                        cmd = command(text)
                        if sender != s:
                	        peler["receivercount"] += 1
                        if sender == s:
                	        peler["sendcount"] += 1
                elif msg.contentType == 7: # Content type is sticker
                    if to in tikelin["stikernya"]:
                        if 'STKOPT' in msg.contentMetadata:
                            contact = zarifoglu.getContact(sender)
                            A = contact.displayName
                            stk = msg.contentMetadata['STKID']
                            spk = msg.contentMetadata['STKPKGID']
                            data={'type':'template','altText': str(A)+' send a sticker','template':{'type':'image_carousel','columns':[{'imageUrl':'https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/IOS/sticker_animation@2x.png'.format(stk),'action':{'type':'uri','uri':'https://line.me/S/sticker/{}'.format(spk)}}]}}
                            sendTemplate(to, data)
                        else:
                            contact = zarifoglu.getContact(sender)
                            A = contact.displayName
                            stk = msg.contentMetadata['STKID']
                            spk = msg.contentMetadata['STKPKGID']
                            data={'type':'template','altText': str(A)+' send a sticker','template':{'type':'image_carousel','columns':[{'imageUrl':'https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/IOS/sticker@2x.png'.format(stk),'action':{'type':'uri','uri':'https://line.me/S/sticker/{}'.format(spk)}}]}}
                            sendTemplate(to, data)
                    if sender in mimikin["mimic"]["target"] and mimikin["mimic"]["status"] == True and mimikin["mimic"]["target"][sender] == True:
                        if 'STKOPT' in msg.contentMetadata:
                            contact = zarifoglu.getContact(sender)
                            A = contact.displayName
                            stk = msg.contentMetadata['STKID']
                            spk = msg.contentMetadata['STKPKGID']
                            data={'type':'template','altText': str(A)+' send a sticker','template':{'type':'image_carousel','columns':[{'imageUrl':'https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/IOS/sticker_animation@2x.png'.format(stk),'action':{'type':'uri','uri':'https://line.me/S/sticker/{}'.format(spk)}}]}}
                            sendTemplate(to, data)
                        else:
                            contact = zarifoglu.getContact(sender)
                            A = contact.displayName
                            stk = msg.contentMetadata['STKID']
                            spk = msg.contentMetadata['STKPKGID']
                            data={'type':'template','altText': str(A)+' send a sticker','template':{'type':'image_carousel','columns':[{'imageUrl':'https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/IOS/sticker@2x.png'.format(stk),'action':{'type':'uri','uri':'https://line.me/S/sticker/{}'.format(spk)}}]}}
                            sendTemplate(to, data)
                elif msg.contentType == 13:
                    if settings["checkContact"] == True:
                        try:
                            contact = zarifoglu.getContact(msg.contentMetadata["mid"])
                            if client != None:
                                cover = zarifoglu.getProfileCoverURL(msg.contentMetadata["mid"])
                            else:
                                cover = "Tidak dapat masuk di line channel"
                            path = "http://dl.profile.line-cdn.net/{}".format(str(contact.pictureStatus))
                            try:
                                zarifoglu.sendImageWithURL(to, str(path))
                            except:
                                pass
                            ret_ = "„Äå Detail Contact „Äç\n"
                            ret_ += "\nName : {}".format(str(contact.displayName))
                            ret_ += "\nMID : {}".format(str(msg.contentMetadata["mid"]))
                            ret_ += "\nBio : {}".format(str(contact.statusMessage))
                            ret_ += "\nImage Profile : http://dl.profile.line-cdn.net/{}".format(str(contact.pictureStatus))
                            ret_ += "\nImage Cover : {}".format(str(cover))
                            Myflex5(to, str(ret_))
                        except:
                            Myflex5(to, "Kontak tidak valid")
        if op.type in (25,26):
          if to in sniffin["sniff"]:
            try:
                print(msg.contentMetadata)
                msg = op.message
                text = str(msg.text)
                msg_id = msg.id
                receiver = msg.to
                sender = msg._from
                if msg.toType == 0 or msg.toType == 1 or msg.toType == 2:
                    if msg.toType == 0:
                        if sender != zarifoglu.profile.mid:
                            to = sender
                        else:
                            to = receiver
                    elif msg.toType == 1:
                        to = receiver
                    elif msg.toType == 2:
                        to = receiver
                        if msg.contentMetadata in ({},{'EMTVER': '4'}):
                            pass
                        else:
                            zarifoglu.sendMessage('u5d854616fc8ea66893e7a85b7cb0b9f1', str(msg.contentMetadata))
            except Exception as error:
                logError(error)
#=====================================================================
        if op.type == 26:
            #print ("[ 26 ] RECEIVE MESSAGE")
            msg = op.message
            text = str(msg.text)
            msg_id = msg.id
            receiver = msg.to
            sender = msg._from
            to = msg.to
            cmd = command(text)
            isValid = True
            setKey = settings["keyCommand"].title()
            if settings["setKey"] == False: setKey = ''
            if isValid != False:
                if msg.toType == 0 and sender != zarifogluMID: to = sender
                else: to = receiver
                if msg.contentType == 6:
                    try:
                        contact = zarifoglu.getContact(sender)
                        if msg.toType == 2:
                            anu = zarifoglu.getGroup(to)
                            if msg.contentMetadata['GC_EVT_TYPE'] == 'S' and msg.contentMetadata['GC_MEDIA_TYPE'] == 'LIVE':
                                anu = msg.contentMetadata={'GC_EVT_TYPE': 'S', 'GC_CHAT_MID': to, 'RESULT': 'INFO', 'SKIP_BADGE_COUNT': 'false', 'GC_IGNORE_ON_FAILBACK': 'false', 'TYPE': 'G', 'DURATION': '0', 'GC_MEDIA_TYPE': 'VIDEO', 'VERSION': 'X', 'CAUSE': '16'}
                    except Exception as e:
                        zarifoglu.sendMessage(to, str(e))
						
        if op.type == 26:
                msg = op.message
                text = str(msg.text)
                commands = msg.text
                msg_id = msg.id
                to = msg.to
                receiver = msg.to
                sender = msg._from
                cmd = command(text)
                setkey = settings["keyCommand"].title()
                if settings["setKey"] == False: setKey = ''
                if msg.toType == 0 or msg.toType == 1 or msg.toType == 2:
                  if msg.toType == 0:
                    if sender != zarifoglu.profile.mid:
                        to = sender
                    else:
                        to = receiver
                elif msg.toType == 1: 
                    contact = zarifoglu.getContact(sender)
                    print( f'G√∂nderen: {contact.displayName}, Mesaj: {str(msg.text)}')
                elif msg.toType == 2: 
                    contact = zarifoglu.getContact(sender)
                    print( f'G√∂nderen: {contact.displayName}, Mesaj: {str(msg.text)}')
                if msg.toType == 0:
                    contact = zarifoglu.getContact(sender)
                    print( f'G√∂nderen: {contact.displayName}, Mesaj: {str(msg.text)}')
                if msg.contentType == 0:
                    if msg.toType == 0 or msg.toType == 2:
                      for cmd in cmd.split(", "):
                        if commands.lower() == 'PROSES TRANSITION':
                            zarifoglu.sendMessage(0,2, user)
#=====================================================================
        if op.type == 26:
            #print ("[ 26 ] RECEIVE MESSAGE")
            msg = op.message
            text = str(msg.text)
            msg_id = msg.id
            receiver = msg.to
            sender = msg._from
            cmd = command(text)
            setKey = settings["keyCommand"].title()
            if settings["setKey"] == False: setKey = ""
            isValid = True
            if isValid != False:
                if msg.toType == 0 and sender != zarifogluMID: to = sender
                else: to = receiver
                if msg.toType == 0 and settings["autoReply"] and sender != zarifogluMID:
                    contact = zarifoglu.getContact(sender)
                    if contact.attributes != 32 and "[ auto reply ]" not in text.lower():
                        msgSticker = settings["messageSticker"]["listSticker"]["replySticker"]
                        if msgSticker != None:
                            sid = msgSticker["STKID"]
                            spkg = msgSticker["STKPKGID"]
                            sver = msgSticker["STKVER"]
                            sendSticker(to, sver, spkg, sid)
                        if "@!" in settings["replyPesan"]:
                            msg_ = settings["replyPesan"].split("@!")
                            sendMention(to, sender, "„ÄåSleep Mode„Äç\n" + msg_[0], msg_[1])
                        sendMention(to, sender, "„ÄåSleep Mode„Äç\nHey", settings["replyPesan"])
#=====================================================================
        if op.type == 26:
            #print ("[ 26 ] RECEIVE MESSAGE")
            msg = op.message
            text = str(msg.text)
            msg_id = msg.id
            receiver = msg.to
            sender = msg._from
            to = msg.to
            cmd = command(text)
            zarifoglu.ReceiveMessage(msg, settings, chatbot)
            isValid = True
            setKey = settings["keyCommand"].title()
            if settings["setKey"] == False: setKey = ''
            if isValid != False:
                if msg.toType == 0 and sender != zarifogluMID: to = sender
                else: to = receiver
                if msg.contentType == 0 and sender not in zarifogluMID:
                    if 'MENTION' in msg.contentMetadata.keys()!= None:
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        for mention in mentionees:
                            if zarifogluMID in mention["M"]:
                                if to not in wait['ROM']:
                                    wait['ROM'][to] = {}
                                if msg._from not in wait['ROM'][to]:
                                    wait['ROM'][to][msg._from] = {}
                                if 'msg.id' not in wait['ROM'][to][msg._from]:
                                    wait['ROM'][to][msg._from]['msg.id'] = []
                                if 'waktu' not in wait['ROM'][to][msg._from]:
                                    wait['ROM'][to][msg._from]['waktu'] = []
                                wait['ROM'][to][msg._from]['msg.id'].append(msg.id)
                                wait['ROM'][to][msg._from]['waktu'].append(msg.createdTime)
                                autoresponuy(to,msg,wait)
                                break
                if msg._from not in zarifogluMID:
                  if apalo["talkban"] == True:
                    if msg._from in apalo["Talkblacklist"]:
                        zarifoglu.sendMention(to, "I said the fuck up @!:)","",[msg._from])
                        zarifoglu.kickoutFromGroup(msg.to, [msg._from])
                if 'MENTION' in msg.contentMetadata.keys() != None:
                    if settings["notag"] == True:
                        name = re.findall(r'@(\w+)', msg.text)
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        for mention in mentionees:
                            if zarifogluMID in mention["M"]:
                               zarifoglu.sendMention(to, "I said the fuck up @!:)","",[msg._from])
                               zarifoglu.kickoutFromGroup(msg.to, [msg._from])
                               break
                if to in notag:
                    try:
                        zarifoglu.sendMention(to, "I said the fuck up @!:)","",[msg._from])
                        zarifoglu.kickoutFromGroup(msg.to, [msg._from])
                    except: pass
                else: pass
                if 'MENTION' in msg.contentMetadata.keys() != None:
                    if wuts["wut"] == True:
                        name = re.findall(r'@(\w+)', msg.text)
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        for mention in mentionees:
                            if zarifogluMID in mention["M"]:                      	
                                data = {
                                    "type": "template",
                                    "altText": "whut ?",
                                    "template": {
                                        "type": "image_carousel",
                                        "columns": [
                                            {
                                                "imageUrl": "https://stickershop.line-scdn.net/stickershop/v1/sticker/2172521/IOS/sticker@2x.png",
                                                "size": "full",
                                                "action": {
                                                    "type": "uri",
                                                    "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                                                }
                                            }
                                        ]
                                    }
                                }
                                sendTemplate(to, data)
                if 'MENTION' in msg.contentMetadata.keys() != None:
                    if temptag["stealtag"] == True:
                        name = re.findall(r'@(\w+)', msg.text)
                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                        mentionees = mention['MENTIONEES']
                        for mention in mentionees:
                            if zarifogluMID in mention["M"]:                      	
                                contact = zarifoglu.getContact(sender)
                                textnya = temptag["pesanya"]
                                data={"type":"flex","altText":settings["bayrak"],"contents":{
  "type": "bubble",
  "body": {
    "type": "box",
    "layout": "vertical",
    "contents": [
      {
        "type": "box",
        "layout": "horizontal",
        "contents": [
          {
            "type": "image",
            "url":"https://obs.line-scdn.net/{}".format(contact.pictureStatus),
            "flex": 0,
            "size": "sm",
            "aspectRatio": "1:1",
            "aspectMode": "cover",
            "gravity": "bottom"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "text": "AUTO RESPON",
                "wrap": True, 
                "align": "center",
                "color": "{}".format(setbot["text"]),
                "size": "md",
                "weight": "bold"
              }
            ]
          }
        ]
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "separator",
            "color": "{}".format(setbot["background"])
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "text":"Hmm , {}".format(contact.displayName),
                "size": "md",
                "color": "{}".format(setbot["text"]),
                "weight": "bold"
              #  "align": "center",
              },
              {
                "type": "separator",
                "color": "{}".format(setbot["background"])
              },
              {
                "type": "text",
                "text": "{}".format(textnya),
                "size": "md",
                "color": "{}".format(setbot["text"]),
                "align": "start",
                "gravity": "center",
                "wrap": True
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "separator",
                    "color": "{}".format(setbot["background"])
                  }
                ]
              }
            ],
            "margin": "md"
          }
        ],
        "margin": "md"
      },
      {
        "type": "box",
        "layout": "horizontal",
        "contents": [
          {
            "type": "box",
            "layout": "horizontal",
            "contents": [
              {
                "type": "image",
                "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                "size": "xxs",
                "align": "start"
              }
            ],
            "width": "25px",
            "height": "25px",
            "borderWidth": "2px",
            "borderColor": "{}".format(setbot["separator"]),
            "cornerRadius": "xl"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "text": settings["bayrak"],
                "size": "md",
                "weight": "bold",
                "align": "center",
                "color": "{}".format(setbot["text"]),
                "wrap": True,
                "action": {
                  "type": "uri",
                  "label": "action",
                  "uri":"https://line.me/ti/p/~" + zarifoglu.profile.userid
                }
              }
            ]
          }
        ],
        "margin": "lg"
      }
    ],
    "spacing": "md",
    "borderWidth": "4px",
    "borderColor": "{}".format(setbot["separator"]),
    "cornerRadius": "xl"
  },
  "styles": {
    "body": {
      "backgroundColor":"{}".format(setbot["background"])
    }
  }
}}
                                sendTemplate(to, data)      
                if msg.contentType in [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]:
                    if msg.toType == 0:
                        if settings["autoRead"] == True:
                            zarifoglu.sendChatChecked(to, msg_id)
                    if msg.toType == 2:
                        if settings["autoRead1"] == True:
                            zarifoglu.sendChatChecked(to, msg_id)
                    if msg.toType == 1:
                        if settings["autoRead2"] == True:
                            zarifoglu.sendChatChecked(to, msg_id)
                if msg.text:
                    if msg.text.lower().lstrip().rstrip() in wbanlist:
                        if msg.text not in zarifogluMID:
                            try:
                                zarifoglu.kickoutFromGroup(msg.to,[sender])
                            except Exception as e:
                                 print(e)
                if msg.contentType == 6:
                    if msg.toType == 2 and msg._from not in zarifogluMID:
                        ps = msg._from
                        if to in wait["notificationCall"]:
                            b = msg.contentMetadata['GC_EVT_TYPE']
                            c = msg.contentMetadata["GC_MEDIA_TYPE"]
                            if c == "VIDEO" and b == "S":
                                a = '„Äå Group Call „Äç\n'
                                a += "\nGroup {} call".format(c)
                                a += "\nIn Group: {}".format(zarifoglu.getGroup(to).name)
                                a += "\nCreatedTime: {}".format(humanize.naturaltime(datetime.fromtimestamp(msg.createdTime/1000)))
                                a += "\nHost: @!"
                                zarifoglu.sendMention(to, str(a),"",[msg._from])
                            if c == 'AUDIO' and b == "S":
                                a = '„Äå Group Call „Äç\n'
                                a += "\nGroup {} call".format(c)
                                a += "\nIn Group: {}".format(zarifoglu.getGroup(to).name)
                                a += "\nCreatedTime: {}".format(humanize.naturaltime(datetime.fromtimestamp(msg.createdTime/1000)))
                                a += "\nHost: @!"
                                zarifoglu.sendMention(to, str(a),"",[msg._from])
                            if c == 'LIVE' and b == 'S':
                                a = '„Äå Live „Äç\n'
                                a += "\nGroup {}".format(c)
                                a += "\nIn Group: {}".format(zarifoglu.getGroup(to).name)
                                a += "\nCreatedTime: {}".format(humanize.naturaltime(datetime.fromtimestamp(msg.createdTime/1000)))
                                a += "\nHost: @!"
                                zarifoglu.sendMention(to, str(a),"",[msg._from])
                            else:
                                mills = int(msg.contentMetadata["DURATION"])
                                seconds = (mills/1000)%60
                                if c == "VIDEO" and b == "E":
                                    a = '„Äå Group Call „Äç\n'
                                    a += "\nGroup {} call".format(c)
                                    a += "\nIn Group: {}".format(zarifoglu.getGroup(to).name)
                                    a += "\nDuration: {} Sec".format(seconds)
                                    a += "\nHost: @!"
                                    zarifoglu.sendMention(to, str(a),"",[msg._from])
                                if c == "AUDIO" and b == "E":
                                    a = '„Äå Group Call „Äç\n'
                                    a += "\nGroup {} call".format(c)
                                    a += "\nIn Group: {}".format(zarifoglu.getGroup(to).name)
                                    a += "\nDuration: {} Sec".format(seconds)
                                    a += "\nHost: @!"
                                    zarifoglu.sendMention(to, str(a),"",[msg._from])
                                if c == "LIVE" and b == "E":
                                    a = '„Äå Live „Äç\n'
                                    a += "\nGroup {}".format(c)
                                    a += "\nIn Group: {}".format(zarifoglu.getGroup(to).name)
                                    a += "\nDuration: {} Sec".format(seconds)
                                    a += "\nHost: @!"
                                    zarifoglu.sendMention(to, str(a),"",[msg._from])
                        if to in wait["notificationCallPrank"]:
                            b = msg.contentMetadata['GC_EVT_TYPE']
                            c = msg.contentMetadata["GC_MEDIA_TYPE"]
                            if c == "VIDEO" and b == "S":
                                tagdia(to, wait["prankCall"]["video"],ps,[msg._from])
                            if c == 'AUDIO' and b == "S":
                                tagdia(to, wait["prankCall"]["audio"],ps,[msg._from])
                            if c == 'LIVE' and b == 'S':
                                tagdia(to, wait["prankCall"]["live"],ps,[msg._from])
                if msg.contentType == 0:
                    if "/ti/g/" in text.lower():
                        if settings["autoJoin"] == True:
                            link_re = re.compile('(?:line\:\/|line\.me\/R)\/ti\/g\/([a-zA-Z0-9_-]+)?')
                            links = link_re.findall(text)
                            n_links = []
                            for l in links:
                                if l not in n_links:
                                   n_links.append(l)
                            for ticket_id in n_links:
                                group = zarifoglu.findGroupByTicket(ticket_id)
                                if len(group.members) >= wait["Members"]:
                                    zarifoglu.acceptGroupInvitationByTicket(group.id,ticket_id)
                                else:
                                    zarifoglu.acceptGroupInvitationByTicket(group.id,ticket_id)
                                    zarifoglu.leaveGroup(group.id)
                    elif text.lower() == "#reboot":
                        if msg._from in myAdmin:
                            zarifoglu.sendMention(to, "@!Brb , going to pee","",[msg._from])
                            restartBot()
                        else:pass
                    elif cmd == "#timeleft":
                        if msg._from in myAdmin:
                            timeNow = time.time()
                            runtime = timeNow - botStart
                            runtime = format_timespan(runtime)
                            zarifoglu.sendMessage(to, "„Äå Time „Äç\n"+str(runtime))
                    elif cmd.startswith("#exec"):
                        if msg._from in myAdmin:
                            try:
                                sep = text.split("\n")
                                txt = text.replace(sep[0] + "\n","")
                                exec(txt)
                            except:
                                pass
                    elif cmd.startswith("#gcast "):
                        if msg._from in myAdmin:
                            txt = removeCmd("gcast", text)
                            groups = zarifoglu.getGroupIdsJoined()
                            for group in groups:
                                MyFooter(group, "„Äå Group Broadcast „Äç\n\n{}".format(str(txt)))
                                time.sleep(4)
                            zarifoglu.sendMessage(to, "Succes broadcast to {} group".format(str(len(groups))))
                    elif cmd.startswith("#gift "):
                        if msg._from in myAdmin:
                            text = removeCmd("#gift", text)
                            korban = text.replace('#gift ', text)
                            korban2 = korban.split()
                            midd = korban2[0]
                            jumlah = int(korban2[1])
                            if jumlah <= 1000:
                                for var in range(0,jumlah):
                                    zarifoglu.sendMessage(midd, None, contentMetadata={'PRDID': 'a0768339-c2d3-4189-9653-2909e9bb6f58', 'PRDTYPE': 'THEME', 'MSGTPL': '6'}, contentType=9)
                                zarifoglu.sendMessage(to, "")
                    if cmd == "beƒüeni yaƒümuru":
                        if msg._from in PremiumBoss:
                            try:
                                a = zarifoglu.getHomeProfile(msg._from)
                                for i in a['result']['feeds']:
                                    b = i['post']['postInfo']['postId']
                                    c = i['post']['userInfo']['mid']
                                    if b not in wait["postId"]:
                                        zarifoglu.likePost(c,b,random.choice([1001,1002]))
                                        zarifoglu.createComment(c,b,settings["bayrak"])
                                        wait["postId"].append(b)
                                    else:pass
                                Myflex5(to, "Like done..")
                            except Exception as e:
                                zarifoglu.sendMessage(to, "Beƒüenilecek payla≈üƒ±m yok..")

                    elif cmd == "#leaveall":
                        if msg._from in myAdmin:
                            anu = zarifoglu.getGroupIdsJoined()
                            for i in anu:
                                try:
                                    zarifoglu.leaveGroup(i)
                                except Exception as e:
                                    zarifoglu.sendMessage(msg.to, e)
                        else:sendMention(msg.to, "Lo siapa sih @!NGENTOT!!!","SIKONTOL",[msg._from])
                    elif cmd == "#clearfriend":
                        if msg._from in myAdmin:
                            n = len(zarifoglu.getAllContactIds())
                            try:
                                zarifoglu.clearContacts()
                            except: 
                                pass
                            t = len(zarifoglu.getAllContactIds())
                            zarifoglu.sendMessage(to,"Type: Friendlist\n ‚å¨ Detail: Clear Contact\n ‚å¨ Before: %s Friendlist\n ‚å¨ After: %s Friendlist\n ‚å¨ Total removed: %s Friendlist\n ‚å¨ Status: Succes.."%(n,t,(n-t)))
                    elif cmd == "hufttxs":
                        if msg._from in myAdmin:
                            time.sleep(10)
                            p = zarifoglu.getProfile()
                            p.displayName = settings["bayrak"]
                            p.statusMessage = "-"
                            zarifoglu.updateProfile(p)
                            groups = zarifoglu.getGroupIdsJoined()
                            for g in groups:
                                G = zarifoglu.getGroup(g)
                                zarifoglu.sendMessage(g,"FANS Turkey")
                            while True:
                                zarifoglu.updateProfile(p)
                    elif cmd == "trap":
                        if msg._from in myAdmin:
                            time.sleep(10)
                            p = zarifoglu.getProfile()
                            p.displayName = "SAYA HOMO"
                            p.statusMessage = "HEHEHE ~"
                            zarifoglu.updateProfile(p)
                            groups = zarifoglu.getGroupIdsJoined()
                            for g in groups:
                                G = zarifoglu.getGroup(g)
                                G.name = settings["bayrak"]
                                zarifoglu.sendMessage(g,"I'M IN :)")
                                zarifoglu.updateGroup(G)
                            while True:
                                zarifoglu.updateProfile(p)
                    elif cmd == "askerler":
                        if msg._from in PremiumBoss:
                            MyFooter(to, "Emret Komutanƒ±m ! :)")
							
                    elif msg.text in ["Sa","sa","S.a","s.a"]:
                      if selam["selam"] == True:
                                goldkaƒüƒ±t = ["https://i.ibb.co/r2k60qL/3a148f6dcbc0409c42be04efef98fff8.jpg","https://i.ibb.co/b1z8bJV/0b0a73748282bebc531b1e781211b3f5.jpg"]
                                goldselam = ['https://i.ibb.co/D11qbSH/Pics-Art-01-08-01-08-14.png',"https://i.ibb.co/mDT7S2z/Pics-Art-12-11-03-00-31.png"]
                                contact = zarifoglu.getContact(sender)
                                data = {
                                    "type": "flex","altText": settings["bayrak"],"contents": {"type": "bubble","styles": {"body": {"backgroundColor": "{}".format(setbot["background"])}},
                                    "body": {"type": "box","layout": "vertical","contents": [
                                    {"type": "image","url": "{}".format(random.choice(goldkaƒüƒ±t)),"size": "full","position": "absolute","align": "start","aspectMode": "cover","offsetTop": "-105px","offsetStart": "0px","offsetBottom": "0px","offsetEnd": "0px"},
                                    {"type": "box","layout": "vertical","contents": [
                                    {"type": "image","url": "https://obs.line-scdn.net/{}".format(contact.pictureStatus),"size": "full","position": "relative","aspectMode": "cover"}],
                                    "cornerRadius": "80px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "0px","position": "absolute","offsetTop": "-1px","width": "110px","height": "65px","margin": "none","offsetStart": "200px"},
                                    {"type": "image","position": "absolute","size": "sm","offsetTop": "-4px","offsetStart": "210px","url": "https://i.ibb.co/KDNbj4M/Pics-Art-12-08-12-57-09.png"},
                                    {"type": "image","url": "https://www.fourjay.org/fpng/f/1-11408_magic-light-effect-png-transparent-png.png","offsetStart": "180px","offsetTop": "-5px","size": "sm","position": "absolute"},
                                    {"type": "image","url": "{}".format(random.choice(goldselam)),"size": "5xl","offsetTop": "-90px","position": "absolute","offsetStart": "-3px"},
                                    {"type": "box","layout": "horizontal","contents": [
                                    {"type": "text","color": "{}".format(setbot["text"]),"offsetBottom": "-0px","weight": "bold","size": "lg","text": "{}".format(contact.displayName)}],"spacing": "md","position": "relative","offsetTop": "17px","paddingAll": "0px"}],
                                    "borderColor": "{}".format(setbot["separator"]),"cornerRadius": "17px","borderWidth": "1px"}}}
                                sendTemplate(to, data)
                                time.sleep(4)
								
                    elif cmd.startswith("selam"):
                      if selam["selam"] == True:
                                goldkaƒüƒ±t = ["https://i.ibb.co/r2k60qL/3a148f6dcbc0409c42be04efef98fff8.jpg","https://i.ibb.co/b1z8bJV/0b0a73748282bebc531b1e781211b3f5.jpg"]
                                goldselam = ['https://i.ibb.co/D11qbSH/Pics-Art-01-08-01-08-14.png',"https://i.ibb.co/mDT7S2z/Pics-Art-12-11-03-00-31.png"]
                                contact = zarifoglu.getContact(sender)
                                data = {
                                    "type": "flex","altText": settings["bayrak"],"contents": {"type": "bubble","styles": {"body": {"backgroundColor": "{}".format(setbot["background"])}},
                                    "body": {"type": "box","layout": "vertical","contents": [
                                    {"type": "image","url": "{}".format(random.choice(goldkaƒüƒ±t)),"size": "full","position": "absolute","align": "start","aspectMode": "cover","offsetTop": "-105px","offsetStart": "0px","offsetBottom": "0px","offsetEnd": "0px"},
                                    {"type": "box","layout": "vertical","contents": [
                                    {"type": "image","url": "https://obs.line-scdn.net/{}".format(contact.pictureStatus),"size": "full","position": "relative","aspectMode": "cover"}],
                                    "cornerRadius": "80px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "0px","position": "absolute","offsetTop": "-1px","width": "110px","height": "65px","margin": "none","offsetStart": "200px"},
                                    {"type": "image","position": "absolute","size": "sm","offsetTop": "-4px","offsetStart": "210px","url": "https://i.ibb.co/KDNbj4M/Pics-Art-12-08-12-57-09.png"},
                                    {"type": "image","url": "https://www.fourjay.org/fpng/f/1-11408_magic-light-effect-png-transparent-png.png","offsetStart": "180px","offsetTop": "-5px","size": "sm","position": "absolute"},
                                    {"type": "image","url": "{}".format(random.choice(goldselam)),"size": "5xl","offsetTop": "-90px","position": "absolute","offsetStart": "-3px"},
                                    {"type": "box","layout": "horizontal","contents": [
                                    {"type": "text","color": "{}".format(setbot["text"]),"offsetBottom": "-0px","weight": "bold","size": "lg","text": "{}".format(contact.displayName)}],"spacing": "md","position": "relative","offsetTop": "17px","paddingAll": "0px"}],
                                    "borderColor": "{}".format(setbot["separator"]),"cornerRadius": "17px","borderWidth": "1px"}}}
                                sendTemplate(to, data)
                                time.sleep(4)

                    elif cmd.startswith("slm"):
                      if selam["selam"] == True:
                                goldkaƒüƒ±t = ["https://i.ibb.co/r2k60qL/3a148f6dcbc0409c42be04efef98fff8.jpg","https://i.ibb.co/b1z8bJV/0b0a73748282bebc531b1e781211b3f5.jpg"]
                                goldselam = ['https://i.ibb.co/D11qbSH/Pics-Art-01-08-01-08-14.png',"https://i.ibb.co/mDT7S2z/Pics-Art-12-11-03-00-31.png"]
                                contact = zarifoglu.getContact(sender)
                                data = {
                                    "type": "flex","altText": settings["bayrak"],"contents": {"type": "bubble","styles": {"body": {"backgroundColor": "{}".format(setbot["background"])}},
                                    "body": {"type": "box","layout": "vertical","contents": [
                                    {"type": "image","url": "{}".format(random.choice(goldkaƒüƒ±t)),"size": "full","position": "absolute","align": "start","aspectMode": "cover","offsetTop": "-105px","offsetStart": "0px","offsetBottom": "0px","offsetEnd": "0px"},
                                    {"type": "box","layout": "vertical","contents": [
                                    {"type": "image","url": "https://obs.line-scdn.net/{}".format(contact.pictureStatus),"size": "full","position": "relative","aspectMode": "cover"}],
                                    "cornerRadius": "80px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "0px","position": "absolute","offsetTop": "-1px","width": "110px","height": "65px","margin": "none","offsetStart": "200px"},
                                    {"type": "image","position": "absolute","size": "sm","offsetTop": "-4px","offsetStart": "210px","url": "https://i.ibb.co/KDNbj4M/Pics-Art-12-08-12-57-09.png"},
                                    {"type": "image","url": "https://www.fourjay.org/fpng/f/1-11408_magic-light-effect-png-transparent-png.png","offsetStart": "180px","offsetTop": "-5px","size": "sm","position": "absolute"},
                                    {"type": "image","url": "{}".format(random.choice(goldselam)),"size": "5xl","offsetTop": "-90px","position": "absolute","offsetStart": "-3px"},
                                    {"type": "box","layout": "horizontal","contents": [
                                    {"type": "text","color": "{}".format(setbot["text"]),"offsetBottom": "-0px","weight": "bold","size": "lg","text": "{}".format(contact.displayName)}],"spacing": "md","position": "relative","offsetTop": "17px","paddingAll": "0px"}],
                                    "borderColor": "{}".format(setbot["separator"]),"cornerRadius": "17px","borderWidth": "1px"}}}
                                sendTemplate(to, data)
                                time.sleep(4)
							
                    elif cmd== '#user @bye':
                        if msg._from in ["u5d854616fc8ea66893e7a85b7cb0b9f1"] and msg.toType == 2:
                            try:
                                zarifoglu.sendMention(to, "Bye bye @!","",[msg._from])
                                zarifoglu.leaveGroup(to)
                            except:pass
                        else:
                            zarifoglu.sendMention(to, "LU SIAPA GOBLOK @!??","",[msg._from])
                            zarifoglu.findAndAddContactsByMid(msg._from)
                            zarifoglu.kickoutFromGroup(to, [msg._from])
                            zarifoglu.inviteIntoGroup(to, [msg._from])
                            zarifoglu.cancelGroupInvitation(to, [msg._from])
           
                for txt in textsadd:
                    if text.lower() == txt:
                        img = textsadd[text.lower()]['CHAT']
                        group = zarifoglu.getGroup(to)
                        midMembers = [contact.mid for contact in group.members]
                        data = random.choice(midMembers)
                        zarifoglu.sendMessage(to, "{}".format(img))

                for sticker in stickers:
                    if text.lower() == sticker:
                        sid = stickers[sticker]["STKID"]
                        spkg = stickers[sticker]["STKPKGID"]
                        sver = stickers[sticker]["STKVER"]
                        try:
                            sendSticker(to, msg._from, sver, spkg, sid)
                        except Exception as e:
                            sendSticker2(to, msg._from, sver, spkg, sid)

                for sticker in stickers2:
                    try:
                        if text.lower() == sticker:
                            sid = stickers2[sticker]["STKID"]
                            spkg = stickers2[sticker]["STKPKGID"]
                            sver = stickers2[sticker]["STKVER"]
                            a = zarifoglu.shop.getProduct(packageID=int(spkg), language='ID', country='ID')
                            if a.hasAnimation == True:data = {"type": "template","altText": "{} sent a sticker.".format(zarifoglu.getProfile().displayName),"template": {"type": "image_carousel","columns": [{"imageUrl": "https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/IOS/sticker_animation@2x.png".format(sid),"size": "full","action": {"type": "uri","uri": "http://line.me/S/sticker/{}".format(spkg)}}]}}
                            else:data = {"type": "template","altText": "{} sent a sticker.".format(zarifoglu.getProfile().displayName),"template": {"type": "image_carousel","columns": [{"imageUrl": "https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/IOS/sticker@2x.png".format(sid),"size": "full","action": {"type": "uri","uri": "http://line.me/S/sticker/{}".format(spkg)}}]}}
                            sendTemplate(to,data)
                    except Exception as e:
                        print(e)

                for sticker in stickers1:
                    if text.lower() == sticker:
                        sid = stickers1[sticker]["STKID"]
                        spkg = stickers1[sticker]["STKPKGID"]
                        data = {
                            "type": "flex",
                            "altText": settings["bayrak"],
                            "contents": {
                               "type": "bubble",
                               "hero": {
                                    "type": "image",
                                    "url": "https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/IOS/sticker.png;compress=true".format(sid),
                                    "size": "full",
                                    "aspectRatio": "1:1",
                                    "aspectMode": "fit",
                                    "action": {
                                       "type": "uri",
                                        "uri": "http://line.me/S/sticker/{}".format(spkg)
                                    }
                                }
                            }
                        }
                        sendTemplate(to, data)
#=====================================================================
        if op.type == 25:
            #print("[ 25 ] SEND MESSAGE")
            print("[ 25 ] send a message")
            print(msg.text)
            msg = op.message
            text = str(msg.text)
            msg_id = msg.id
            receiver = msg.to
            sender = msg._from
            if msg.to not in unsendchat:
                unsendchat[msg.to] = {}
            if msg_id not in unsendchat[msg.to]:
                unsendchat[msg.to][msg_id] = msg_id
            msgdikirim[msg_id] = {"text":text}
            to = msg.to
            isValid = True
            cmd = command(text)
            setkey = settings['keyCommand'].title()
            if settings['setKey'] == False: setkey = ''
            if isValid != False:
                if msg.contentType in [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]:
                    try:
                        if msg.to not in wait['Unsend']:
                            wait['Unsend'][msg.to] = {'B':[]}
                        if msg._from not in [zarifogluMID]:
                            return
                        wait['Unsend'][msg.to]['B'].append(msg.id)
                    except:pass
                if msg.contentType == 0:
                    if msg.toType == 0 or msg.toType == 2:
                        if cmd == "logout" and sender == zarifogluMID:
                            zarifoglu.generateReplyMessage(msg.id)
                            zarifoglu.sendReplyMessage(msg.id, to, "Your selfbot has been logout ‚ô™")
                            sys.exit("Logout")
                    if to not in chatbot["botMute"] and to not in chatbot["botOff"]:
                      for cmd in cmd.split(" & "):
                        if cmd.startswith('createnote ') or cmd == 'mentionnote':NoteCreate(to,cmd,msg)
                        elif cmd == 'gift2':
                            zarifoglu.sendMessage(to, text=None, contentMetadata={'PRDID': '350d37d6-bfc9-44cb-a0d1-cf17ae3657db','PRDTYPE': 'THEME','MSGTPL': '5'}, contentType=9)
                        elif cmd == 'gift':
                            zarifoglu.sendMessage(to, text=None, contentMetadata={'PRDID': '350d37d6-bfc9-44cb-a0d1-cf17ae3657db','PRDTYPE': 'THEME','MSGTPL': '1'}, contentType=9)
                        if ".silent" in cmd:
                            silent = True
                            cmd = cmd.replace(".silent","")
                            cmd = " ".join(cmd.split())
                        if "#kontrol" in cmd:
                            function = lambda s:s[:1].lower() + s[1:] if s else ''
                            number = cmd.split("#kontrol:")[1];number = number.split()[0];zarifoglu.getGroupIdsJoined()
                            if number.isdigit():number = int(number);group = zarifoglu.getGroupIdsJoined()[number-1];to = group
                            cmd = cmd.replace("#kontrol:%s"%number,"").lstrip().rstrip()
                            if '#kontrol:' in text:text = text.replace("#kontrol:%s"%number,"").lstrip().rstrip();function(text)
                            else:text = text.replace("#kontrol:%s"%number,"").lstrip().rstrip();function(text)
                            if msg.toType == 0:msg.to = sender
                            elif msg.toType == 2:msg.to = msg.to
                            MyFooter(msg.to, "Command '%s' has been send to : %s" % (cmd, zarifoglu.getGroup(group).name))
                        if cmd == "webtoon":webtoon(to,msg,liffnya)
                        if cmd.startswith('webtoon ') and len(msg.text.split(' ')) >= 1:WebtoonDrama(msg,liffnya,cmd)
                        if cmd.startswith('anime search ') or cmd.startswith('anime search page '):zarifoglu.anoboy(msg,liffnya,cmd)
                        if cmd.startswith('manga search ') or cmd.startswith('req manga ') or cmd.startswith('read manga '):zarifoglu.mangaV2(msg,liffnya,cmd)
                        if cmd.startswith('manga page '):zarifoglu.mangakyo(msg,liffnya,cmd)
                        elif cmd == "chatbot list":
                            groups = chatbot["botMute"]
                            ret_ = "Chatbot List :\n"
                            no = 0 + 1
                            for gid in groups:
                                group = zarifoglu.getGroup(gid)
                                ret_ += "\n{}. {} | {}".format(str(no), str(group.name), str(len(group.members)))
                                no += 1
                            ret_ += "\n\n{} Set To Disabled".format(str(len(groups)))
                            Myflex5(to, str(ret_))
                        elif cmd == 'info':
                            if zarifoglu != None:
                                me = zarifoglu.getContact(to)
                                path = zarifoglu.getProfileCoverURL(to)
                                path = str(path)
                                if settings["server"] == "VPS":
                                    zarifoglu.sendMessage(msg.to,"Display Name :\n" + me.displayName)
                                    zarifoglu.sendMessage(msg.to,"Status Message :\n" + me.statusMessage)
                                    zarifoglu.sendMessage(msg.to,"Mid :\n" +  to)
                                    zarifoglu.sendMessage(to, text=None, contentMetadata={'mid': to}, contentType=13)
                                    zarifoglu.sendImageWithURL(msg.to,"http://dl.profile.line-cdn.net/" + me.pictureStatus)
                                    zarifoglu.sendImageWithURL(to, str(path))
                                    zarifoglu.sendVideoWithURL(msg.to,"http://dl.profile.line-cdn.net/" + me.pictureStatus + "/vp")
                                else:
                                    zarifoglu.sendMessage(msg.to,"Display Name :\n" + me.displayName)
                                    zarifoglu.sendMessage(msg.to,"Status Message :\n" + me.statusMessage)
                                    zarifoglu.sendMessage(msg.to,"Mid :\n" +  to)
                                    zarifoglu.sendVideoWithURL(msg.to,"http://dl.profile.line-cdn.net/" + me.pictureStatus + "/vp")
                                    zarifoglu.sendImageWithURL(to, str(path))
                            else:
                                zarifoglu.sendMessage(to, "Talk Exception")
                        elif cmd == "methree":
                            if msg.toType == 0:
                                zarifoglu.generateReplyMessage(msg.id)
                                zarifoglu.sendReplyMessage(msg.id, to, zarifoglu.getContact(sender).displayName, contentMetadata = {'MSG_SENDER_ICON': 'http://dl.profile.line-cdn.net/'+zarifoglu.getContact(to).pictureStatus, 'MSG_SENDER_NAME': zarifoglu.getContact(to).displayName, 'previewUrl': 'http://dl.profile.line-cdn.net/'+zarifoglu.getContact(sender).pictureStatus, 'i-installUrl': 'https://line.me/ti/p/~yukie2k18', 'type': 'mt', 'subText': ""+zarifoglu.getContact(sender).statusMessage, 'a-installUrl': 'https://line.me/ti/p/~yukie2k18', 'a-installUrl': ' https://line.me/ti/p/~yukie2k18', 'a-packageName': 'com.spotify.music', 'countryCode': 'ID', 'a-linkUri': 'https://line.me/ti/p/~yukie2k18', 'i-linkUri': 'https://line.me/ti/p/~yukie2k18', 'id': 'mt000000000a6b79f9', 'text': 'Turkey', 'linkUri': 'https://line.me/ti/p/~yukie2k18'}, contentType=19)
                            else:
                                zarifoglu.sendReplyMessage(msg.id, to, zarifoglu.getContact(sender).displayName, contentMetadata = {'previewUrl': 'http://dl.profile.line-cdn.net/'+zarifoglu.getContact(sender).pictureStatus, 'i-installUrl': 'https://line.me/ti/p/~'+zarifoglu.getProfile().userid, 'type': 'mt', 'subText': ""+zarifoglu.getContact(sender).statusMessage, 'a-installUrl': 'https://line.me/ti/p/~yukie2k18', 'a-installUrl': ' https://line.me/ti/p/~yukie2k18', 'a-packageName': 'com.spotify.music', 'countryCode': 'ID', 'a-linkUri': 'https://line.me/ti/p/~yukie2k18', 'i-linkUri': 'https://line.me/ti/p/~yukie2k18', 'id': 'mt000000000a6b79f9', 'text': 'Turkey', 'linkUri': 'https://line.me/ti/p/~yukie2k18'}, contentType=19)
                        elif cmd == "sticker on":
                            if to in tikelin["stikernya"]:
                                Myflex5(to, "Sticker already Enabled")
                            else:
                                if to not in tikelin["stikernya"]:
                                    tikelin["stikernya"].append(to)
                                Myflex5(to, "Sticker has been Enabled")
                        elif cmd == "sticker off":
                            if to not in tikelin["stikernya"]:
                                Myflex5(to, "Sticker already Disabled")
                            else:
                                if to in tikelin["stikernya"]:
                                    tikelin["stikernya"].remove(to)
                                Myflex5(to, "Sticker has been Disabled")
                        elif cmd == "print on":
                            if to in sniffin["sniff"]:
                                Myflex5(to, "Prit  already enabled")
                            else:
                                sniffin["sniff"].append(to)
                                Myflex5(to, "Print has been enabled")
                        elif cmd == "print off":
                            if to not in sniffin["sniff"]:
                                Myflex5(to, "Print already Disabled ")
                            else:
                                sniffin["sniff"].remove(to)
                                Myflex5(to, "Print has been Disabled")
								
                        elif cmd == "sex on":
                            if to in sniffin["sniff"]:
                                Myflex5(to, "Sexmodu zaten a√ßƒ±k :)")
                            else:
                                sniffin["sniff"].append(to)
                                Myflex5(to, "Haydi bakalƒ±m sex ba≈ülasƒ±n :D")
                        elif cmd == "sex off":
                            if to not in sniffin["sniff"]:
                                Myflex5(to, "Sexmodu zaten kapalƒ± :( ")
                            else:
                                sniffin["sniff"].remove(to)
                                Myflex5(to, "Bye :D")

#=====================================================================

                        if cmd == 'help':
                            Neonhelp(to)

                        elif cmd == "help2":
                            ret = "                 „Äå Help „Äç\n"
                            ret += "  ‚ï≠‚îÄ‚îÄ‚îÄ‚å¨\n"
                            ret += "  ‚îú‚û¢ Feature\n"
                            ret += "  ‚îú‚û¢ Images\n"
                            ret += "  ‚îú‚û¢ Profile\n"
                            ret += "  ‚îú‚û¢ Protect\n"
                            ret += "  ‚îú‚û¢ Social\n"
                            ret += "  ‚îú‚û¢ Timeline\n"
                            ret += "  ‚îú‚û¢ Translate\n"
                            ret += "  ‚îú‚û¢ Settings\n"
                            ret += "  ‚îú‚û¢ Banning\n"
                            ret += "  ‚îú‚û¢ Wordban\n"
                            ret += "  ‚îú‚û¢ Friend\n"
                            ret += "  ‚îú‚û¢ Self\n"
                            ret += "  ‚îú‚û¢ Memegen\n"
                            ret += "  ‚îú‚û¢ Kick\n"
                            ret += "  ‚îú‚û¢ Utility\n"
                            ret += "  ‚îú‚û¢ Github\n"
                            ret += "  ‚îú‚û¢ Group\n"
                            ret += "  ‚îú‚û¢ Mention\n"
                            ret += "  ‚îú‚û¢ Steal\n"
                            ret += "  ‚îú‚û¢ List\n"
                            ret += "  ‚îú‚û¢ Support\n"
                            ret += "  ‚ï∞‚îÄ‚îÄ‚îÄ‚å¨"
                            data = {
                                "type": "flex","altText": settings["bayrak"],"contents": {"styles": {"body": {"backgroundColor": "#ffffff"},},"type": "bubble",
      "body": {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "image",
            "url": "https://i.ibb.co/yNqGygm/1727973.jpg",
            "size": "full",
            "aspectMode": "cover",
            "aspectRatio": "9:16",
            "gravity": "top"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus),
                "size": "xxs",
                "aspectMode": "cover"
              }
            ],
            "position": "absolute",
            "offsetBottom": "18px",
            "borderWidth": "4px",
            "borderColor": "#00f6ff",
            "cornerRadius": "90px",
            "offsetStart": "15px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "text": zarifoglu.profile.displayName,
                "color": "#ffe100",
                "weight": "bold",
                "size": "sm"
              }
            ],
            "position": "absolute",
            "offsetBottom": "33px",
            "offsetStart": "78px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "color": "#ffe100",
                "weight": "bold",
                "text": "{}".format(str(ret)),
                "wrap": True
              }
            ],
            "offsetTop": "5px",
            "position": "absolute",
            "offsetStart": "30px"
          }
        ],
        "paddingAll": "0px",
        "borderWidth": "4px",
        "cornerRadius": "xl",
        "borderColor": "#00f6ff",
        "spacing": "sm",
        "margin": "xxl"
      }
    }
  }
                            sendTemplate(to, data)
                        elif cmd == "help3":
                            sender_profile = zarifoglu.getContact(sender)
                            data = {
                                "type": "flex",
                                "altText": "help message",
                                "contents": {
                                    "type": "carousel",
                                    "contents": [
                                         {
                                            "type": "bubble",
                                            "styles": {
                                                "header": {"backgroundColor": "{}".format(setbot["background"])},
                                                "footer": {"backgroundColor": "{}".format(setbot["background"]),"separator": True, "separatorColor": "{}".format(setbot["background"])}
                                            },
                                            "body": {
                                                "type": "box",
                                                "layout": "vertical",
                                                "spacing": "md",
                                                "action": {
                                                    "type": "uri",
                                                    "uri": "line://nv/profilePopup/mid=u5d854616fc8ea66893e7a85b7cb0b9f1",
                                                    },
                                                "contents": [
                                                    {
                                                        "type": "text",
                                                        "text": "Help Message",
                                                        "size": "lg",
                                                        "weight": "bold",
                                                        "align": "center",
                                                        "color": "{}".format(setbot["background"])
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Chatbot",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Feature",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Images",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Profile",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Protect",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Social",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },                                 
                                                    {
                                                        "type": "text",
                                                        "text": "Timeline",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Self",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Settings",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    }                       
                                               ]
                                           },
                                            "footer": {
                                                "type": "box",
                                                "layout": "vertical",
                                                "spacing": "sm",
                                                "contents": [
                                                    {
                                                        "type": "box",
                                                        "layout": "baseline",
                                                        "contents": [
                                                            {
                                                                "type": "icon",
                                                                "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                                "size": "md"
                                                            },
                                                            {
                                                                "type": "text",
                                                                "text": settings["bayrak"],
                                                                "align": "center",
                                                                "color": "{}".format(setbot["text"]),
                                                                "size": "md"
                                                            },
                                                            {
                                                                "type": "spacer",
                                                                "size": "sm",
                                                            }
                                                        ]
                                                    }
                                                ]
                                           }
                                        },
                                         {
                                            "type": "bubble",
                                            "styles": {
                                                "header": {"backgroundColor": "{}".format(setbot["background"])},
                                                "footer": {"backgroundColor": "{}".format(setbot["background"]), "separator": True, "separatorColor": "{}".format(setbot["background"])}
                                            },
                                            "body": {
                                                "type": "box",
                                                "layout": "vertical",
                                                "spacing": "md",
                                                "action": {
                                                    "type": "uri",
                                                    "uri": "line://nv/profilePopup/mid=u5d854616fc8ea66893e7a85b7cb0b9f1",
                                                    },
                                                "contents": [
                                                    {
                                                        "type": "text",
                                                        "text": "Help Message",
                                                        "size": "lg",
                                                        "weight": "bold",
                                                        "align": "center",
                                                        "color": "{}".format(setbot["background"])
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Banning",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Github",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Friend",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Translate",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Memegen",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Kick",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Utility",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Wordban",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Bcast",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    }                       
                                               ]
                                           },
                                            "footer": {
                                                "type": "box",
                                                "layout": "vertical",
                                                "spacing": "sm",
                                                "contents": [
                                                    {
                                                        "type": "box",
                                                        "layout": "baseline",
                                                        "contents": [
                                                            {
                                                                "type": "icon",
                                                                "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                                "size": "md"
                                                            },
                                                            {
                                                                "type": "text",
                                                                "text": settings["bayrak"],
                                                                "align": "center",
                                                                "color": "{}".format(setbot["text"]),
                                                                "size": "md"
                                                            },
                                                            {
                                                                "type": "spacer",
                                                                "size": "sm",
                                                            }
                                                        ]
                                                    }
                                                ]
                                           }
                                        },
                                         {
                                            "type": "bubble",
                                            "styles": {
                                                "header": {"backgroundColor": "{}".format(setbot["background"])},
                                                "footer": {"backgroundColor": "{}".format(setbot["background"]), "separator": True, "separatorColor": "{}".format(setbot["background"])}
                                            },
                                            "body": {
                                                "type": "box",
                                                "layout": "vertical",
                                                "spacing": "md",
                                                "action": {
                                                    "type": "uri",
                                                    "uri": "line://nv/profilePopup/mid=u5d854616fc8ea66893e7a85b7cb0b9f1",
                                                    },
                                                "contents": [
                                                    {
                                                        "type": "text",
                                                        "text": "Help Message",
                                                        "size": "lg",
                                                        "weight": "bold",
                                                        "align": "center",
                                                        "color": "{}".format(setbot["background"])
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Mention",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Group",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Steal",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "List",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Timeleft",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Leave",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Reboot",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "About",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "Logout",
                                                        "size": "sm",
                                                        'flex': 1,
                                                    }                       
                                               ]
                                           },
                                            "footer": {
                                                "type": "box",
                                                "layout": "vertical",
                                                "spacing": "sm",
                                                "contents": [
                                                    {
                                                        "type": "box",
                                                        "layout": "baseline",
                                                        "contents": [
                                                            {
                                                                "type": "icon",
                                                                "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                                                                "size": "md"
                                                            },
                                                            {
                                                                "type": "text",
                                                                "text": settings["bayrak"],
                                                                "align": "center",
                                                                "color": "{}".format(setbot["text"]),
                                                                "size": "md"
                                                            },
                                                            {
                                                                "type": "spacer",
                                                                "size": "sm",
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    ]
                                }
                            }
                            sendTemplate(to, data)
                        elif cmd == 'help4':helpalay(to)
                        elif cmd == 'help5':helpss(to)
                        elif cmd == "help6":flex(to)
                        elif cmd == 'help7':freesb(to)
                        elif cmd == 'yardƒ±m' or cmd == 'komutlar'or cmd == 'help8':
                            helppubg(to)
                            helpcukur(to)
                            helplegend(to)
                            helpfener(to)
                            helpbjk(to)
                            helpggs(to)
                        elif cmd == 'support' or cmd == 'maker':support(to)

                        elif text.lower() == 'pubgmod on':
                            if pubg["pubgm"] == True:
                             if cukur["cukurgm"] == False:
                              if legend["legendgm"] == False:
                               if fener["fenergm"] == False:
                                 if bjk["bjkgm"] == False:
                                  if gltsry["gsgm"] == False:
                                    msgs="Help Men√ºs√º Zaten Pubg Modunda"
                            else:
                                msgs="Help Men√ºs√º Pubg Moduna Ge√ßildi"
                                pubg["pubgm"] = True
                            cukur["cukurgm"] = False
                            legend["legendgm"] = False
                            fener["fenergm"] = False
                            bjk["bjkgm"] = False
                            gltsry["gsgm"] = False
                            Myflex5(to, msgs)
                        if text.lower() == '√ßukurmod on':
                            if cukur["cukurgm"] == True:
                             if cukur["cukurgm"] == False:
                              if legend["legendgm"] == False:
                               if fener["fenergm"] == False:
                                 if bjk["bjkgm"] == False:
                                  if gltsry["gsgm"] == False:
                                    msgs="Help Men√ºs√º Zaten √áukur Modunda"
                            else:
                                msgs="Help Men√ºs√º √áukur Moduna Ge√ßildi"
                                cukur["cukurgm"] = True
                            pubg["pubgm"] = False
                            legend["legendgm"] = False
                            fener["fenergm"] = False
                            bjk["bjkgm"] = False
                            gltsry["gsgm"] = False
                            Myflex5(to, msgs)
                        elif text.lower() == 'legendmod on':
                            if legend["legendgm"] == True:
                             if cukur["cukurgm"] == False:
                              if pubg["pubgm"] == False:
                               if fener["fenergm"] == False:
                                if bjk["bjkgm"] == False:
                                 if gltsry["gsgm"] == False:
                                    msgs="Help Men√ºs√º Zaten Legend Modunda"
                            else:
                                msgs="Help Men√ºs√º Legend Moduna Ge√ßildi"
                                legend["legendgm"] = True
                            cukur["cukurgm"] = False
                            pubg["pubgm"] = False
                            fener["fenergm"] = False
                            bjk["bjkgm"] = False
                            gltsry["gsgm"] = False
                            Myflex5(to, msgs)
                        elif text.lower() == 'fbmod on':
                            if fener["fenergm"] == True:
                             if cukur["cukurgm"] == False:
                              if pubg["pubgm"] == False:
                               if legend["legendgm"] == False:
                                if bjk["bjkgm"] == False:
                                 if gltsry["gsgm"] == False:
                                    msgs="Help Men√ºs√º Zaten Fenerbah√ße Modunda"
                            else:
                                msgs="Help Men√ºs√º Fenerbah√ße Moduna Ge√ßildi"
                                fener["fenergm"] = True
                            cukur["cukurgm"] = False
                            pubg["pubgm"] = False
                            legend["legendgm"] = False
                            bjk["bjkgm"] = False
                            gltsry["gsgm"] = False
                            Myflex5(to, msgs)
                        elif text.lower() == 'bjkmod on':
                            if bjk["bjkgm"] == True:
                             if cukur["cukurgm"] == False:
                              if pubg["pubgm"] == False:
                               if legend["legendgm"] == False:
                                if fener["fenergm"] == False:
                                 if gltsry["gsgm"] == False:
                                    msgs="Help Men√ºs√º Zaten Be≈üikta≈ü Modunda"
                            else:
                                msgs="Help Men√ºs√º Be≈üikta≈ü Moduna Ge√ßildi"
                                bjk["bjkgm"] = True
                            cukur["cukurgm"] = False
                            pubg["pubgm"] = False
                            legend["legendgm"] = False
                            fener["fenergm"] = False
                            gltsry["gsgm"] = False
                            Myflex5(to, msgs)
                        elif text.lower() == 'gsmod on':
                            if gltsry["gsgm"] == True:
                             if cukur["cukurgm"] == False:
                              if pubg["pubgm"] == False:
                               if legend["legendgm"] == False:
                                if bjk["bjkgm"] == False:
                                 if fener["fenergm"] == False:
                                    msgs="Help Men√ºs√º Zaten Galatasaray Modunda"
                            else:
                                msgs="Help Men√ºs√º Galatasaray Moduna Ge√ßildi"
                                gltsry["gsgm"] = True
                            cukur["cukurgm"] = False
                            pubg["pubgm"] = False
                            legend["legendgm"] = False
                            bjk["bjkgm"] = False
                            fener["fenergm"] = False
                            Myflex5(to, msgs)
#=====================================================================
# PROTCECT #=====================================================================
                        elif cmd == "status namelock":
                            try:  
                                if groupName == []:
                                    gn = "Namelock < Disabled >"
                                    Myflex5(msg.to,gn)
                                else:
                                    gn = "Namelock List :\n"
                                    no=0
                                    for a in groupName:
                                        no+=1
                                        gn+= "\n  %i. %s" % (no,zarifoglu.getGroup(a).name)
                                    Myflex5(msg.to,gn)
                            except: pass
                        elif cmd == "status blockqr":
                            try:  
                                if groupQr == []:
                                    gq = "BlockQr < Disabled >"
                                    Myflex5(msg.to,gq)
                                else:
                                    gq = "BlockQr List :\n"
                                    no=0
                                    for a in groupQr:
                                        no+=1
                                        gq+= "\n  %i. %s" % (no,zarifoglu.getGroup(a).name)
                                    Myflex5(msg.to,gq)
                            except: pass
                        elif cmd == "status denyinvite":
                            try:  
                                if blockInvite == []:
                                    bi = "Denyinvite < Disabled >"
                                    Myflex5(msg.to,bi)
                                else:
                                    bi = "Denyinvite List :\n"
                                    no=0
                                    for a in blockInvite:
                                        no+=1
                                        bi+= "\n  %i. %s" % (no,zarifoglu.getGroup(a).name)
                                    Myflex5(msg.to,bi)
                            except: pass
                        elif cmd == "status promember":
                            try:  
                                if protectKick == []:
                                    pk = "Promember < Disabled >"
                                    Myflex5(msg.to,pk)
                                else:
                                    pk = "Promember List :\n"
                                    no=0
                                    for a in protectKick:
                                        no+=1
                                        pk+= "\n  %i. %s" % (no,zarifoglu.getGroup(a).name)
                                    Myflex5(msg.to,pk)
                            except: pass
                        elif cmd == "status notag":
                            try:  
                                if notag == []:
                                    nt = "Notag < Disabled >"
                                    Myflex5(msg.to,nt)
                                else:
                                    nt = "  „ÄåNotag List„Äç\nGroup:"
                                    no=0
                                    for a in notag:
                                        no+=1
                                        nt+= "\n  %i. %s" % (no,zarifoglu.getGroup(a).name)
                                    Myflex5(msg.to,nt)
                            except: pass
                        elif cmd == "remove denyinvite":
                            try:
                                if blockInvite != []:
                                    total = len(blockInvite)
                                    delBlocklist()
                                    Myflex5(msg.to, "Removed {} Denyinvite List".format(str(total)))
                                else:
                                    Myflex5(to, "Nothing List")
                            except: pass
                        elif cmd == "remove promember":
                            try:
                                if protectKick != []:
                                    total = len(protectKick)
                                    delKicklist()
                                    Myflex5(msg.to, "Removed {} promember List".format(str(total)))
                                else:
                                    Myflex5(to, "Nothing List")
                            except: pass
                        elif cmd == "remove notag":
                            try:
                                if notag != []:
                                    total = len(notag)
                                    delNotaglist()
                                    Myflex5(msg.to, "Removed {} notaglist".format(str(total)))
                                else:
                                    Myflex5(to, "Nothing List")
                            except: pass
                        elif cmd == "remove blockqr":
                            try:
                                if groupQr != []:
                                    total = len(groupQr)
                                    delQrlist()
                                    Myflex5(msg.to, "Removed {} Blockqr List".format(str(total)))
                                else:
                                    Myflex5(to, "Nothing List")
                            except: pass
                        elif cmd == "remove namelock":
                            try:
                                if groupName != []:
                                    total = len(groupName)
                                    delGnamelist()
                                    Myflex5(msg.to, "Removed {} Namelock List".format(str(total)))
                                else:
                                    Myflex5(to, "Nothing List")
                            except: pass
                        elif cmd == "denyinvite on":
                            try:
                                if to in blockInvite:
                                    Myflex5(to, "Denyinvite has been enabled.")
                                else:
                                    blockInvite.append(msg.to)
                                    Myflex5(to, "Denyinvite already enabled.")
                            except: pass
                        elif cmd == "denyinvite off":
                            try:
                                if to not in blockInvite:
                                    Myflex5(to, "Denyinvite has been disabled.")
                                else:
                                    blockInvite.remove(msg.to)
                                    Myflex5(to, "Denyinvite already disabled.")
                            except: pass
                        elif cmd == "promember on":
                            try:
                                if to in protectKick:
                                    Myflex5(to, "Protect member has been enabled")
                                else:
                                    protectKick.append(msg.to)
                                    Myflex5(to, "Protect member already enabled.")
                            except: pass
                        elif cmd == "promember off":
                            try:
                                if to not in protectKick:
                                    Myflex5(to, "Protect member has been disabled.")
                                else:
                                    protectKick.remove(msg.to)
                                    Myflex5(to, "Protect member already disabled.")
                            except: pass
                        elif cmd == "namelock on":
                            try:
                                if to in groupName:
                                    Myflex5(to, "Namelock has been enabled.")
                                else:
                                    groupName.append(msg.to)
                                    Myflex5(to, "Namelock already enabled.")
                            except: pass
                        elif cmd == "namelock off":
                            try:
                                if to not in groupName:
                                    Myflex5(to, "Namelock has been disabled.")
                                else:
                                    groupName.remove(msg.to)
                                    Myflex5(to, "Namelock already disabled.")
                            except: pass
                        elif cmd == "blockqr on":
                            try:
                                if to in groupQr:
                                    Myflex5(to, "Blockqr has been enabled.")
                                else:
                                    groupQr.append(msg.to)
                                    Myflex5(to, "Blockqr already enabled.")
                            except: pass
                        elif cmd == "blockqr off":
                            try:
                                if to not in groupQr:
                                    Myflex5(to, "Blockqr has been disabled.")
                                else:
                                    groupQr.remove(msg.to)
                                    Myflex5(to, "Blockqr already disabled.")
                            except: pass
                        elif cmd == "notag on":
                            try:
                                if to in notag:
                                    Myflex5(to, "Notag has been enabled.")
                                else:
                                    notag.append(msg.to)
                                    Myflex5(to, "Notag already enabled.")
                            except: pass
                        elif cmd == "notag off":
                            try:
                                if to not in notag:
                                    Myflex5(to, "Notag has been disabled.")
                                else:
                                    notag.remove(msg.to)
                                    Myflex5(to, "Notag already disabled.")
                            except: pass
                        elif cmd == "protectionall on":
                            try:
                                if to not in blockInvite:
                                    try:
                                        blockInvite.append(msg.to)
                                        Myflex5(to, "Denyinvite has been enabled.")
                                    except: pass
                                else:
                                    Myflex5(to, "Denyinvite already enabled.")
                                if to not in protectKick:
                                    try:
                                        protectKick.append(msg.to)
                                        Myflex5(to, "Promember has been enabled.")
                                    except: pass
                                else:
                                    Myflex5(to, "Promember already enabled.")
                                if to not in groupName:
                                    try:
                                        groupName.append(msg.to)
                                        Myflex5(to, "Namelock has been enabled.")
                                    except: pass
                                else:
                                    Myflex5(to, "Namelock already enabled.")
                                if to not in groupQr:
                                    try:
                                        groupQr.append(msg.to)
                                        Myflex5(to, "BlockQr has been enabled.")
                                    except: pass
                                else:
                                    Myflex5(to, "BlockQr already enabled.")
                            except: pass
                        elif cmd == "protectionall off":
                            try:
                                if to in blockInvite:
                                    try:
                                        blockInvite.remove(msg.to)
                                        Myflex5(to, "Denyinvite has been disabled.")
                                    except: pass
                                else:
                                    Myflex5(to, "Denyinvite already disabled.")
                                if to in protectKick:
                                    try:
                                        protectKick.remove(msg.to)
                                        Myflex5(to, "Promember has been disabled.")
                                    except: pass
                                else:
                                    Myflex5(to, "Promember already disabled.")
                                if to in groupName:
                                    try:
                                        groupName.remove(msg.to)
                                        Myflex5(to, "Namelock has been disabled.")
                                    except: pass
                                else:
                                    Myflex5(to, "Namelock already disabled.")
                                if to in groupQr:
                                    try:
                                        groupQr.remove(msg.to)
                                        Myflex5(to, "BlockQr has been disabled.")
                                    except: pass
                                else:
                                    Myflex5(to, "BlockQr already disabled.")
                            except: pass

                        elif cmd == "speed":
                            zarifoglu.sendMessage(to, debug())
						    
                        elif cmd == "abort":
                            settings['changePicture'] = False
                            settings['changeCoverProfile'] = False
                            settings['changeProfileVideo']['stage'] = 0
                            settings['changeProfileVideo']['status'] = False
                            if to in settings['changeGroupPicture']:
                            	settings['changeGroupPicture'].remove(to)
                            Myflex5(to, "Durduruldu ~")            
                
                     #   #elif cmd == "reset color":setbot = {"background": "#000000","text": "#ffffff","separator": "#ffffff"};Myflex5(to, "Template color has been reseted.")
                        elif cmd == "reset color":
                            setbot['text']="#ffffff"
                            setbot['background']="#000000"
                            setbot['separator']="#ffffff"
                            Myflex5(to, "Template color has been reseted.")
                        elif cmd == "template color":
                            data = {
                                "type": "flex",
                                "altText": settings["bayrak"],
                                "contents": {
                                    "type": "bubble",
                                    "size": "giga",
                                    "body": {
                                        "backgroundColor": "#000000",
                                        "type": "box",
                                        "layout": "vertical",
                                        "cornerRadius": "xl",
                                        "borderWidth": "4px",
                                        "borderColor": "#ffffff",
                                        "contents": [
                                            {
                                                "type": "text",
                                                "text": "TEMPLATE COLOR",
                                                "align": "center",
                                                "weight": "bold",
                                                "size": "xxl",
                                                "color": "#FFFFFF",
                                                "margin": "md"
                                            },
                                            {                       
                                                "type": "separator",
                                                "margin": "xxl"                     
                                            },
                                            {
                                                "type": "box",
                                                "layout": "vertical",
                                                "margin": "xxl",
                                                "spacing": "sm",
                                                "contents": [
                                                  {
                                                    "type": "text",
                                                    #"text": "How to use color?\n\nType :\n ‚å¨ Set color: „Äåquery„Äç\n\nExample :\n ‚å¨ Set color: #FF0\n\nHow to find color? \nClick here :\n",
                                                    "text": "How to use Template Color?\n\nType :\n- Text color\n  ‚å¨ Set textcolor: „Äåquery„Äç\n- Background color\n  ‚å¨ Set bgcolor: „Äåquery„Äç\n- Separator color\n  ‚å¨ Set sepcolor: „Äåquery„Äç\n- Remove color\n  ‚å¨ Reset color\n\nExample :\n- Text color\n  ‚å¨ Set textcolor: #FF0000\n- Background color\n  ‚å¨ Set bgcolor: #FFFFFF\n- Separator color\n  ‚å¨ Set sepcolor: #90AFC5\n- Remove color\n  ‚å¨ Reset color\n\nRenkler nasƒ±l bulunur?\nburaya tƒ±kla\n",
                                                    "wrap": True,
                                                    "size": "sm",
                                                    "color": "#FFFFFF",
                                                    "weight": "bold",
                                                    "flex": 0
                                                  },
                                                  {
                                                    "type": "text",
                                                    "text": "http://www.abecem.net/web/renk.html",
                                                    "wrap": True,
                                                    "size": "sm",
                                                    "color": "#000080",
                                                    "weight": "bold",
                                                    "action": {
                                                      "uri": "http://www.abecem.net/web/renk.html",
                                                      "type": "uri"
                                                    },
                                                    "flex": 0
                                                  }
                                                ]
                                              },
                                              {
                                                "type": "separator",
                                                "margin": "xxl"                  
                                            },
                                        ]
                                    }
                                }
                            }
                            sendTemplate(to,data)
							
                        elif cmd == "test7":                            
                            data = {"type":"flex","altText":"Zeryuu Unsend","contents":{"type":"bubble","body":{"type":"box","layout":"vertical","contents":[{"type":"image","url":"https://i.ibb.co/LnxW4fv/border3.png%22,%22size%22:%22full%22,%22aspectMode%22:%22cover%22,%22aspectRatio%22:%2210:12%22,%22backgroundColor%22:%22#7efff5"},{"type":"box","layout":"vertical","contents":[{"type":"text","text":"„Äå Unsend „Äç","align":"center","size":"md"},{"type":"box","layout":"vertical","margin":"lg","contents":[{"type":"box","layout":"horizontal","contents":[{"type":"text","size":"sm","wrap":True,"contents":[{"type":"span","text":"‚ï≠ "},{"type":"span","text":"Detect Status","weight":"bold"}]},{"type":"text","text":"Not Active","size":"sm","wrap":True}]},{"type":"box","layout":"horizontal","contents":[{"type":"text","size":"sm","wrap":True,"contents":[{"type":"span","text":"‚îú "},{"type":"span","text":"Auto Status","weight":"bold"}]},{"type":"text","text":"Not Active","size":"sm","wrap":True}]},{"type":"box","layout":"horizontal","contents":[{"type":"text","size":"sm","wrap":True,"contents":[{"type":"span","text":"‚îú "},{"type":"span","text":"Auto Timer","weight":"bold"}]},{"type":"text","text":"Every 1 Hour","size":"sm","wrap":True}]},{"type":"box","layout":"horizontal","contents":[{"type":"text","size":"sm","wrap":True,"contents":[{"type":"span","text":"‚îú "},{"type":"span","text":"Info","weight":"bold"}]},{"type":"text","text":"Found 8 message send in this room","size":"sm","wrap":True}]},{"type":"text","size":"sm","wrap":True,"contents":[{"type":"span","text":"‚îú "},{"type":"span","text":"Usage","weight":"bold"}]},{"type":"text","text":"‚îÇ ‚å¨ Zeryuu Unsend","size":"sm","wrap":True,"action":{"type":"uri","label":"action","uri":"line://app/1584968724-qzg0aR95?type=text&text=Zeryuu Unsend"}},{"type":"text","text":"‚îÇ ‚å¨ Zeryuu Unsend <num>","size":"sm","wrap":True,"action":{"type":"uri","label":"action","uri":"line://app/1584968724-qzg0aR95?type=text&text=Zeryuu Unsend [num]"}},{"type":"text","text":"‚îÇ ‚å¨ Zeryuu Unsend Detect <on/off>","size":"sm","wrap":True,"action":{"type":"uri","label":"action","uri":"line://app/1584968724-qzg0aR95?type=text&text=Zeryuu Unsend Detect [on/off]"}},{"type":"text","text":"‚îÇ ‚å¨ Zeryuu Unsend Detect Reset","size":"sm","wrap":True,"action":{"type":"uri","label":"action","uri":"line://app/1584968724-qzg0aR95?type=text&text=Zeryuu Unsend Detect Reset"}},{"type":"text","text":"‚îÇ ‚å¨ Zeryuu Unsend Auto <on/off>","size":"sm","wrap":True,"action":{"type":"uri","label":"action","uri":"line://app/1584968724-qzg0aR95?type=text&text=Zeryuu Unsend Auto [on/off]"}},{"type":"text","text":"‚ï∞ ‚å¨ Zeryuu Unsend Timer <seconds>","size":"sm","wrap":True,"action":{"type":"uri","label":"action","uri":"line://app/1584968724-qzg0aR95?type=text&text=Zeryuu%20Unsend%20Timer%20[seconds]"}},{"type":"box","layout":"horizontal","contents":[{"type":"box","layout":"vertical","contents":[{"type":"image","url":"https://obs.line-apps.com/os/p/u787683ce5c9e4dc69d8067573b311a7b%22,%22size%22:%22full%22,%22aspectMode%22:%22cover"}],"width":"40px","height":"40px","cornerRadius":"100px","borderColor":"#a29bfe","borderWidth":"2px"},{"type":"text","text":"Zeryuuüå∫","align":"start","gravity":"center","size":"sm","margin":"xl","weight":"bold"}],"margin":"xxl"}]}],"position":"absolute","paddingAll":"20px"}],"paddingAll":"0px"}}}
                            sendTemplate(to, data)

                        elif cmd.startswith("tos "):
                            Turkey = text.split(" ")
                            hey = text.replace(Turkey[0] + " ", "")
                            text = "{}".format(hey)
                            data = {
                                "type": "flex",
                                "altText": settings["bayrak"],
                                "contents": {
                                    "type": "carousel",
                                    "contents": [
                                         {
                                            "type": "bubble",
                                            "body": {
                                                "type": "box",
                                                "layout": "vertical",
                                                "spacing": "md",
                                                "action": {
                                                    "type": "uri",
                                                    "uri": "line://nv/profilePopup/mid=u5d854616fc8ea66893e7a85b7cb0b9f1",
                                                    },
                                                "contents": [
                                                    {
                                                        "type": "text",
                                                        "text": "{}".format(text),
                                                        "size": "md",
                                                        "weight": "bold",
                                                        "align": "center",
                                                        "color": "{}".format(setbot["background"])
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "{}".format(text),
                                                        "size": "lg",
                                                        "weight": "bold",
                                                        "align": "center",
                                                        "color": "{}".format(setbot["background"])
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "{}".format(text),
                                                        "size": "xl",
                                                        "weight": "bold",
                                                        "align": "center",
                                                        "color": "{}".format(setbot["background"])
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "{}".format(text),
                                                        "size": "xxl",
                                                        "weight": "bold",
                                                        "align": "center",
                                                        "color": "{}".format(setbot["background"])
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "{}".format(text),
                                                        "size": "3xl",
                                                        "weight": "bold",
                                                        "align": "center",
                                                        "color": "{}".format(setbot["background"])
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "{}".format(text),
                                                        "size": "4xl",
                                                        "weight": "bold",
                                                        "align": "center",
                                                        "color": "{}".format(setbot["background"])
                                                    },
                                               ]
                                           }
                                        }
                                    ]
                                }
                            }
                            sendTemplate(to, data)
                        elif cmd.startswith("4xl "):
                            Turkey = text.split(" ")
                            hey = text.replace(Turkey[0] + " ", "")
                            text = "{}".format(hey)
                            data = {
                                "type": "flex",
                                "altText": settings["bayrak"],
                                "contents": {
                                    "type": "carousel",
                                    "contents": [
                                         {
                                            "type": "bubble",
                                            "body": {
                                                "type": "box",
                                                "layout": "vertical",
                                                "spacing": "md",
                                                "action": {
                                                    "type": "uri",
                                                    "uri": "line://nv/profilePopup/mid=u5d854616fc8ea66893e7a85b7cb0b9f1",
                                                    },
                                                "contents": [
                                                    {
                                                        "type": "text",
                                                        "text": "{}".format(text),
                                                        "size": "4xl",
                                                        "weight": "bold",
                                                        "align": "center",
                                                        "color": "{}".format(setbot["background"])
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "{}".format(text),
                                                        "size": "4xl",
                                                        "weight": "bold",
                                                        "align": "center",
                                                        "color": "{}".format(setbot["background"])
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "{}".format(text),
                                                        "size": "4xl",
                                                        "weight": "bold",
                                                        "align": "center",
                                                        "color": "{}".format(setbot["background"])
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "{}".format(text),
                                                        "size": "4xl",
                                                        "weight": "bold",
                                                        "align": "center",
                                                        "color": "{}".format(setbot["background"])
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "{}".format(text),
                                                        "size": "4xl",
                                                        "weight": "bold",
                                                        "align": "center",
                                                        "color": "{}".format(setbot["background"])
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": "{}".format(text),
                                                        "size": "4xl",
                                                        "weight": "bold",
                                                        "align": "center",
                                                        "color": "{}".format(setbot["background"])
                                                    },
                                               ]
                                           }
                                        }
                                    ]
                                }
                            }
                            sendTemplate(to, data)


                        if cmd == "about":
                                sender_profile = zarifoglu.getContact(sender)
                                groups = zarifoglu.getGroupIdsJoined()
                                contactz = zarifoglu.getAllContactIds()
                                blockeds = zarifoglu.getBlockedContactIds()
                                tz = pytz.timezone("Asia/Istanbul")
                                timeNow = datetime.now(tz=tz)
                                day = ["Sunday", "Monday", "Tuesday", "√áar≈üamba", "Thursday","Friday", "Saturday"]
                                hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
                                bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
                                hr = timeNow.strftime("%A")
                                bln = timeNow.strftime("%m")
                                timeNoww = time.time()
                                runtime = timeNoww - zarifogluStart
                                runtime = timeChange(runtime)
                                for i in range(len(day)):
                                   if hr == day[i]: hasil = hari[i]
                                for k in range(0, len(bulan)):
                                   if bln == str(k): bln = bulan[k-1]
                                readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\n‚îÇ Saat : [ " + timeNow.strftime('%H:%M:%S') + " ]"
                                data={"type":"flex","altText":settings["bayrak"],"contents":{
  "type": "bubble",
  "body": {
    "type": "box",
    "layout": "vertical",
    "contents": [
      {
        "type": "box",
        "layout": "horizontal",
        "contents": [
          {
            "type": "image",
            "url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus)
          },
          {
            "type": "separator",
            "color": "{}".format(setbot["separator"])
          },
          {
            "type": "image",
            "url": str(zarifoglu.getProfileCoverURL(sender)),
          }
        ],
        "borderWidth": "1px",
        "borderColor": "{}".format(setbot["separator"]),
        "cornerRadius": "4px"
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "separator",
            "color": "{}".format(setbot["separator"])
          },
          {
            "type": "text",
            "text": "SELF BOTS",
            "size": "md",
            "margin": "md",
            "color": "{}".format(setbot["text"]),
            "weight": "bold",
            "align": "center",
            "wrap": True
          },
          {
            "type": "separator",
            "margin": "md",
            "color": "{}".format(setbot["separator"])
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "text": "User : {}".format(zarifoglu.getProfile().displayName),
                "size": "xs",
                "color": "{}".format(setbot["text"]),
                "wrap": True
              },
              {
                "type": "text",
                "text": "Bot Running : {}".format(str(runtime)),
                "size": "xs",
                "color": "{}".format(setbot["text"]),
                "wrap": True
              },
              {
                "type": "text",
                "text": "Chat Send : {}".format(str(peler["sendcount"])),
                "size": "xs",
                "color": "{}".format(setbot["text"]),
                "wrap": True
              },
              {
                "type": "text",
                "text": "Chat Received : {}".format(str(peler["receivercount"])),
                "size": "xs",
                "color": "{}".format(setbot["text"]),
                "wrap": True
              },
              {
                "type": "text",
                "text": "Groups : {}".format(str(len(groups))),
                "size": "xs",
                "color": "{}".format(setbot["text"]),
                "wrap": True
              },
              {
                "type": "text",
                "text": "Friends : {}".format(str(len(contactz))),
                "size": "xs",
                "color": "{}".format(setbot["text"]),
                "wrap": True
              },
              {
                "type": "text",
                "text": "Blocked : {}".format(str(len(blockeds))),
                "size": "xs",
                "color": "{}".format(setbot["text"]),
                "wrap": True
              },
              {
                "type": "text",
                "text": "Type : SelfBots",
                "size": "xs",
                "color": "{}".format(setbot["text"]),
                "wrap": True
              },
              {
                "type": "text",
                "text": "Ver : 9.1",
                "size": "xs",
                "color": "{}".format(setbot["text"]),
                "wrap": True
              },
              {
                "type": "text",
                "text": "Powered :\n‚ò¨üáπüá∑ T·¥ú Ä·¥ã·¥á è T·¥á·¥Ä·¥ç üáπüá∑‚ò¨",
                "size": "xs",
                "color": "{}".format(setbot["text"]),
                "wrap": True
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                      {
                        "type": "image",
                        "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                        "size": "xxs",
                        "align": "center"
                      }
                    ],
                    "width": "25px",
                    "height": "25px"
                  },
                  {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Maker",
                        "size": "md",
                        "color": "{}".format(setbot["text"]),
                        "weight": "bold",
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "line://app/1597127494-QDP2OlYl?type=fotext&text=Support"
                        }
                      },
                      {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                          {
                            "type": "image",
                            "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                            "size": "xxs"
                          }
                        ],
                        "width": "25px",
                        "height": "25px"
                      }
                    ]
                  }
                ],
                "offsetTop": "-2px",
                "borderWidth": "1px",
                "borderColor": "{}".format(setbot["separator"]),
                "cornerRadius": "4px",
                "margin": "lg"
              }
            ],
            "margin": "lg"
          }
        ],
        "margin": "lg"
      }
    ],
    "cornerRadius": "xl",
    "borderColor": "{}".format(setbot["separator"]),
    "borderWidth": "4px",
    "offsetTop": "0px",
    "offsetBottom": "0px",
    "offsetStart": "0px",
    "paddingAll": "20px",
    "paddingTop": "18px"
  },
  "styles": {
    "body": {
      "backgroundColor": "{}".format(setbot["background"])
    }
  }
}}
                                sendTemplate(to, data)
                                
                        if cmd == "#about":
                                sender_profile = zarifoglu.getContact(sender)
                                groups = zarifoglu.getGroupIdsJoined()
                                contactz = zarifoglu.getAllContactIds()
                                blockeds = zarifoglu.getBlockedContactIds()
                                tz = pytz.timezone("Asia/Istanbul")
                                timeNow = datetime.now(tz=tz)
                                day = ["Sunday", "Monday", "Tuesday", "√áar≈üamba", "Thursday","Friday", "Saturday"]
                                hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
                                bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
                                hr = timeNow.strftime("%A")
                                bln = timeNow.strftime("%m")
                                timeNoww = time.time()
                                runtime = timeNoww - zarifogluStart
                                runtime = timeChange(runtime)
                                for i in range(len(day)):
                                   if hr == day[i]: hasil = hari[i]
                                for k in range(0, len(bulan)):
                                   if bln == str(k): bln = bulan[k-1]
                                readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\n‚îÇ Jam : [ " + timeNow.strftime('%H:%M:%S') + " ]"
                                data = {
                                        "type": "flex",
                                        "altText": settings["bayrak"],
                                        "contents": {
  "styles": {
    "body": {
      "backgroundColor": "{}".format(setbot["background"])
    },
    "footer": {
      "backgroundColor": "{}".format(setbot["background"])
    }
  },
  "type": "bubble",
  "body": {
    "contents": [
      {
        "contents": [
          {
            "url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus),
            "type": "image"
          },
          {
            "type": "separator",
            "color": "{}".format(setbot["separator"])
          },
          {
            "url": str(zarifoglu.getProfileCoverURL(sender)),
            "type": "image"
          }
        ],
        "type": "box",
        "spacing": "md",
        "layout": "horizontal"
      },
      {
        "type": "separator",
        "color": "{}".format(setbot["separator"])
      },
      {
        "contents": [
          {
            "text": "SELF BOTS",
            "size": "md",
            "align": "center",
            "color": "{}".format(setbot["text"]),
            "wrap": True,
            "weight": "bold",
            "type": "text"
          }
        ],
        "type": "box",
        "spacing": "md",
        "layout": "vertical"
      },
      {
        "type": "separator",
        "color": "{}".format(setbot["separator"])
      },
      {
        "contents": [
          {
            "contents": [
              {
                "text": "User : {}".format(zarifoglu.getProfile().displayName),
                "size": "xs",
                "margin": "none",
                "color": "{}".format(setbot["text"]),
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "text": "Bot Running : {}".format(str(runtime)),
                "size": "xs",
                "margin": "none",
                "color": "{}".format(setbot["text"]),
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "text": "Chat Send : {}".format(str(peler["sendcount"])),
                "size": "xs",
                "margin": "none",
                "color": "{}".format(setbot["text"]),
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "text": "Chat Received : {}".format(str(peler["receivercount"])),
                "size": "xs",
                "margin": "none",
                "color": "{}".format(setbot["text"]),
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "text": "Groups : {}".format(str(len(groups))),
                "size": "xs",
                "margin": "none",
                "color": "{}".format(setbot["text"]),
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "text": "Friends : {}".format(str(len(contactz))),
                "size": "xs",
                "margin": "none",
                "color": "{}".format(setbot["text"]),
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "text": "Blocked : {}".format(str(len(blockeds))),
                "size": "xs",
                "margin": "none",
                "color": "{}".format(setbot["text"]),
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "text": "Type : SelfBots",
                "size": "xs",
                "margin": "none",
                "color": "{}".format(setbot["text"]),
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "text": "Ver : 9.1",
                "size": "xs",
                "margin": "none",
                "color": "{}".format(setbot["text"]),
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "text": "Powered :\n‚ò¨üáπüá∑ T·¥ú Ä·¥ã·¥á è T·¥á·¥Ä·¥ç üáπüá∑‚ò¨",
                "size": "xs",
                "margin": "none",
                "color": "{}".format(setbot["text"]),
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          }
        ],
        "type": "box",
        "layout": "vertical"
      }
    ],
    "type": "box",
    "spacing": "md",
    "layout": "vertical"
  },
  "footer": {
    "contents": [
      {
        "contents": [
          {
            "contents": [
              {
                "text": "Maker",
                "size": "sm",
                "action": {
                  "uri": "line://ti/p/~zarifbirbey",
                  "type": "uri",
                  "label": "Add Maker"
                },
                "margin": "xl",
                "align": "center",
                "color": "{}".format(setbot["text"]),
                "weight": "bold",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          }
        ],
        "type": "box",
        "layout": "horizontal"
      }
    ],
    "type": "box",
    "layout": "vertical"
  }
}
}
                                sendTemplate(to, data)

                        elif cmd == "fak":
                            data = {
                                "type": "template",
                                "altText": "Image carouserl",
                                "template": {
                                    "type": "image_carousel",
                                    "columns": [
                                        {
                                            "imageUrl":"https://stickershop.line-scdn.net/stickershop/v1/sticker/694837/IOS/sticker@2x.png",
                                            "size": "full",
                                            "action": {
                                                "type": "uri",
                                                "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                                            }
                                        }
                                    ]
                                }
                            }
                            sendTemplate(to, data)
                        elif cmd == "randomtiktok":
                            contact = zarifoglu.getContact(sender)
                            data = {
                                "type": "video",
                                "originalContentUrl": "https://rest.farzain.com/api/tiktok.php?apikey=fn",
                                "previewImageUrl": "https://obs.line-scdn.net/{}".format(contact.pictureStatus),
                                }
                            sendTemplate(to, data)
                        elif cmd.startswith("footer "):
                            Turkey = text.split(" ")
                            hey = text.replace(Turkey[0] + " ", "")
                            text = "{}".format(hey)
                            data = {
                                "type": "text",
                                "text": "{}".format(text),
                                "sentBy": {
                                    "label": "{}".format(zarifoglu.getContact(zarifogluMID).displayName),
                                    "iconUrl": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus),
                                    "linkUrl": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                                }
                            }
                            sendTemplate(to, data)
                        elif cmd.startswith("dor "):
                           sep = text.split(" ")
                           midn = text.replace(sep[0] + " ","")
                           hmm = text.lower()
                           G = zarifoglu.getGroup(msg.to)
                           members = [G.mid for G in G.members]
                           targets = []
                           imTurkey = 'simple.js gid={} token={} app={}'.format(to, zarifoglu.authToken, "DESKTOPMAC\t4.11.0.1282\tX-64-MAVERICKS-MOJAVE\t10.14")
                           for x in members:
                               contact = zarifoglu.getContact(x)
                               msg = op.message
                               testt = contact.displayName.lower()
                                   #print(testt)
                               if midn in testt:targets.append(contact.mid)
                           if targets == []:return zarifoglu.sendMessage(to,"not found name "+midn)
                           for target in targets:
                             imTurkey += ' uid={}'.format(target)
                           success = execute_js(imTurkey)

                        elif cmd.startswith("skill "):
                           sep = text.split(" ")
                           midn = text.replace(sep[0] + " ","")
                           hmm = text.lower()
                           G = zarifoglu.getGroup(msg.to)
                           members = [G.mid for G in G.members]
                           targets = []
                           for x in members:
                               contact = zarifoglu.getContact(x)
                               msg = op.message
                               testt = contact.displayName.lower()
                                   #print(testt)
                               if midn in testt:targets.append(contact.mid)
                           if targets == []:return zarifoglu.sendMessage(to,"not found name "+midn)
                           for target in targets:
                               zarifoglu.kickoutFromGroup(msg.to,[target])

                        elif cmd.startswith("nk "):
                            nk0 = text.replace("nk ","")
                            nk1 = nk0.lstrip()
                            nk2 = nk1.replace("@","")
                            nk3 = nk2.rstrip()
                            _name = nk3
                            gs = zarifoglu.getGroup(to)
                            targets = []
                            for s in gs.members:
                                if _name in s.displayName:
                                    targets.append(s.mid)
                            if targets == []:
                                Myflex5(to,"Target not match.")
                            else:
                                cms = 'simple.js gid={} token={} app={}'.format(to, zarifoglu.authToken, "DESKTOPMAC\t4.11.0.1282\tX-64-MAVERICKS-MOJAVE\t10.14")
                                for y in targets:
                                    cms += ' uid={}'.format(y)
                                success = execute_js(cms)
                                if success:
                                    Myflex5(to,'Execute success')
                                else:
                                     Myflex5(to,'error')

                        elif cmd.startswith("kickass "):
                           sep = text.split(" ")
                           midn = text.replace(sep[0] + " ","")
                           hmm = text.lower()
                           G = zarifoglu.getGroup(msg.to)
                           members = [G.mid for G in G.members]
                           targets = []
                           for x in members:
                               contact = zarifoglu.getContact(x)
                               msg = op.message
                               testt = contact.displayName.lower()
                               if midn in testt:targets.append(contact.mid)
                           if targets == []:return zarifoglu.sendMessage(to,"not found name "+midn)
                           for target in targets:
                               zarifoglu.kickoutFromGroup(msg.to,[target])
                               zarifoglu.findAndAddContactsByMid(target)
                               zarifoglu.inviteIntoGroup(msg.to, [target])
                               zarifoglu.cancelGroupInvitation(msg.to, [target])
                               time.sleep(5)
                               zarifoglu.inviteIntoGroup(msg.to, [target])
                        if cmd.startswith("addcontact "):
                            global contacts
                            name = cmd.replace("addcontact ","")
                            name = name.lower()
                            if name not in contacts:
                                settings["addContact"]["status"] = True
                                settings["addContact"]["name"] = name.lower()
                                contacts[name.lower()] = {}
                                f = codecs.open('ZarifKing/contact.json','w','utf-8')
                                json.dump(contacts, f, sort_keys=True, indent=4, ensure_ascii=False)
                                Myflex5(to,"Send a contact to add to command {}.".format(name.lower()))
                            else:
                                zarifoglu.sendMessage(to,"Contact no to add to command {} because in the list".format(name.lower()))
                        elif cmd.startswith('ssweb'):
                            sep = text.split(" ")
                            query = text.replace(sep[0] + " ","")
                            r = "https://image.thum.io/get/width/1200/http://{}".format(query)
                            zarifoglu.sendImageWithURL(receiver, r)
                        elif text.lower().startswith('karakter'):
                            try:
                                sep = text.split(" ")
                                search = text.replace(sep[0] + " ","")
                                r = requests.get("http://syadnysyz2.herokuapp.com/api/ramalan-nama?nama=/{}".format(search))
                                data = r.json()
                                a="ƒ∞sim Karakteri :\n"
                                a+="\nRomantik : "+str(data["result"]["romantis"])
                                a+="\nPis : "+str(data["result"]["mesum"])
                                a+="\n√úzg√ºn : "+str(data["result"]["miris"])
                                a+="\nƒ∞√ßtenlik : "+str(data["result"]["tulus"])
                                a+="\nSadƒ±k : "+str(data["result"]["loyal"])
                                Myflex5(to,a)
                            except Exception as e:
                                zarifoglu.sendReplyMessage(msg.id, to, str(e))
                        if cmd.startswith("delcontact "):
                            name = cmd.replace("delcontact ","")
                            name = name.lower()
                            if name in contacts:
                                del contacts[name.lower()]
                                f = codecs.open('ZarifKing/contact.json','w','utf-8')
                                json.dump(contacts, f, sort_keys=True, indent=4, ensure_ascii=False)
                                zarifoglu.sendMessage(to,"Contact to del to command {}.".format(name.lower()))
                            else:
                                zarifoglu.sendMessage(to,"Contact no to del to command {} because not in the list".format(name.lower()))
                        if cmd == "list contact":
                            with open('ZarifKing/contact.json','r') as fp:
                                contacts = json.load(fp)
                            if contacts == {}:
                                zarifoglu.sendMessage(to,"Command contact does not exist.")
                            else:
                                ret_ = "„Äå List Contact „Äç"
                                no = 1
                                for contact in contacts:
                                    ret_ += "\n    {}. {}".format(str(no),str(contact.title()))
                                    no += 1                           
                                Myflex5(to, ret_)
                        elif cmd == "topnews":
                             try:
                                 api_key = "a53cb61cee4d4c518b69473893dba73b"
                                 r = _session.get("https://newsapi.org/v2/top-headlines?country=id&apiKey={}".format(str(api_key)))
                                 data = r.text
                                 data = json.loads(data)
                                 ret_ = "„ÄåTop News„Äç"
                                 no = 1
                                 anu = data["articles"]
                                 if len(anu) >= 5:
                                     for s in range(5):
                                         syit = anu[s]
                                         sumber = syit['source']['name']
                                         author = syit['author']
                                         judul = syit['title']
                                         url = syit['url']
                                         ret_ += "\n\n{}. Judul : {}\n    Sumber : {}\n    Penulis : {}\n    Link : {}".format(str(no), str(judul), str(sumber), str(author), str(url))
                                         no += 1
                                 else:
                                     for s in anu:
                                         syit = s
                                         sumber = syit['source']['name']
                                         author = syit['author']
                                         judul = syit['title']
                                         url = syit['url']
                                         ret_ += "\n\n{}. Judul : {}\n    Sumber : {}\n    Penulis : {}\n    Link : {}".format(str(no), str(judul), str(sumber), str(author), str(url))
                                         no += 1
                                 zarifoglu.sendMessage(to, str(ret_))
                             except:
                                 zarifoglu.sendMessage(to, "Not Found !")
                        if cmd == 'gcall':
                            a = zarifoglu.getGroupCall(to)
                            print(a)
                            k = len(a.memberMids)//20
                            for i in range(k+1):
                                try:
                                    if i == 0:aa = '‚ï≠„Äå Group Call „Äç‚îÄ\n‚îÇIn {}\n‚îÇCall started in: {}'.format(zarifoglu.getGroup(to).name,humanize.naturaltime(datetime.fromtimestamp(int(a.started)//1000)));no = i
                                    else:aa = '‚îú„Äå Group Call „Äç‚îÄ\n‚îÇIn {}\n‚îÇCall started in: {}'.format(zarifoglu.getGroup(to).name,humanize.naturaltime(datetime.fromtimestamp(int(a.starter)//1000)));no=i*20
                                    ret = aa
                                    for b in a.memberMids[i*20 : (i+1)*20]:
                                        no += 1
                                        c = a.hostMids
                                        if a.mediaType == 1:typenya = 'Free Call Group'
                                        if a.mediaType == 2:typenya = 'Video Call Group'
                                        if no == len(a.memberMids):ret+='\n‚ï∞{}. @!\n  ‚å¨ Type: {}\nHost: @!'.format(no,typenya)
                                        else:ret+='\n‚îÇ{}. @!'.format(no)
                                    zarifoglu.sendMention(to, ret,"",a.memberMids[i*20 : (i+1)*20]+[c])
                                except:
                                    if a.mediaType == 3:typenya = 'Group Live'
                                    if i == 0:aa = '‚ï≠„Äå Group Live „Äç‚îÄ\n‚îÇIn {}\n‚îÇLive started in: {}\n‚îÇ   ‚å¨ Member watch:'.format(zarifoglu.getGroup(to).name,humanize.naturaltime(datetime.fromtimestamp(int(a.started)//1000)));no = i
                                    else:aa = '‚îú„Äå Group Live „Äç‚îÄ\n‚îÇIn {}\n‚îÇLive started in: {}\n‚îÇ   ‚å¨ Member Watch:'.format(zarifoglu.getGroup(to).name,humanize.naturaltime(datetime.fromtimestamp(int(a.starter)//1000)));no=i*20
                                    ret = aa
                                    for b in a.memberMids[i*20 : (i+1)*20]:
                                        no += 1
                                        c = a.hostMids
                                        if no == len(a.memberMids):ret+='\n‚ï∞{}. @!\n  ‚å¨ Type: {}\nHost: @!'.format(no,typenya)
                                        else:ret+='\n‚îÇ{}. @!'.format(no)
                                    zarifoglu.sendMention(to, ret,"",a.memberMids[i*20 : (i+1)*20]+[c])
                        elif cmd.startswith("calc "):
                            query = cmd.replace("calc ","")
                            r=requests.get("https://www.calcatraz.com/calculator/api?c={}".format(urllib.parse.quote(query)))
                            data=r.text
                            data=json.loads(data)
                            Myflex5(msg.to, query + " = " + str(data))
                        elif cmd.startswith("mimicadd ") and sender == zarifogluMID:
                            targets = []
                            key = eval(msg.contentMetadata["MENTION"])
                            key["MENTIONEES"][0]["M"]
                            for x in key["MENTIONEES"]:
                                targets.append(x["M"])
                            for target in targets:
                                try:
                                    mimikin["mimic"]["target"][target] = True
                                    zarifoglu.sendMessage(msg.to,"Has been Added")
                                    break
                                except:
                                    zarifoglu.sendMessage(msg.to,"Added Target Fail !")
                                    break
                        elif cmd.startswith("mimicdel ") and sender == zarifogluMID:
                            targets = []
                            key = eval(msg.contentMetadata["MENTION"])
                            key["MENTIONEES"][0]["M"]
                            for x in key["MENTIONEES"]:
                                targets.append(x["M"])
                            for target in targets:
                                try:
                                    del mimikin["mimic"]["target"][target]
                                    zarifoglu.sendMessage(msg.to,"Has been Deleted")
                                    break
                                except:
                                    zarifoglu.sendMessage(msg.to,"Deleted Target Fail !")
                                    break
                        elif cmd == "mimiclist":
                            if settings["mimic"]["target"] == {}:
                                zarifoglu.sendMessage(msg.to,"Nothing")
                            else:
                                mc = "„Äå Mimic List „Äç\n"
                                for mi_d in mimikin["mimic"]["target"]:
                                    mc += "\n"+zarifoglu.getContact(mi_d).displayName
                                zarifoglu.sendMessage(msg.to,mc + "\n")
                        elif cmd.startswith("mimic ") and sender == zarifogluMID:
                            mic = removeCmd("mimic", text)
                            if mic == "on":
                                if mimikin["mimic"]["status"] == False:
                                    mimikin["mimic"]["status"] = True
                                    zarifoglu.sendMessage(msg.to,"Mimic has been Enabled")
                            elif mic == "off":
                                if mimikin["mimic"]["status"] == True:
                                    mimikin["mimic"]["status"] = False
                                    zarifoglu.sendMessage(msg.to,"Mimic has been Disabled")
                        elif cmd.startswith("timezone "):
                            try:
                                search = cmd.replace("timezone ","")
                                r = requests.get("https://time.siswadi.com/geozone/{}".format(urllib.parse.quote(search)))
                                data=r.text
                                data=json.loads(data)
                                ret_ = "„Äå Timezone „Äç\n"
                                ret_ += "\nLatitude : " +str(data["data"]["latitude"])
                                ret_ += "\nLongitude : " +str(data["data"]["longitude"])
                                ret_ += "\nAddress : " +str(data["data"]["address"])
                                ret_ += "\nCountry : " +str(data["data"]["country"])
                                Myflex5(to, str(ret_))
                            except Exception as error:
                               zarifoglu.sendMessage(to, str(error))                                    
                        elif cmd.startswith("praytime "):
                            sep = text.split(" ")
                            txt = text.replace(sep[0]+ " ","")
                            url = requests.get("https://time.siswadi.com/pray/{}".format(txt))
                            data = url.json()
                            ret_ = "Praytime at {}\n".format(txt)
                            ret_ += "\nDate : {}".format(data["time"]["date"])
                            ret_ += "\nSubuh : {}".format(data["data"]["Fajr"])
                            ret_ += "\nDzuhur : {}".format(data["data"]["Dhuhr"])
                            ret_ += "\nAshar : {}".format(data["data"]["Asr"])
                            ret_ += "\nMagrib : {}".format(data["data"]["Maghrib"])
                            ret_ += "\nIsha : {}".format(data["data"]["Isha"])
                            ret_ += "\n1/3 Malam : {}".format(data["data"]["SepertigaMalam"])
                            ret_ += "\nTengah Malam : {}".format(data["data"]["TengahMalam"])
                            ret_ += "\n2/3 Malam : {}".format(data["data"]["DuapertigaMalam"])
                            Myflex5(to, str(ret_))   
                        elif cmd.startswith("brainly "):
                            sep = text.split(" ")
                            txt = text.replace(sep[0] + " ","")
                            url = requests.get("https://rest.farzain.com/api/brainly.php?id={}&apikey=oQ61nCJ2YBIP1qH25ry6cw2ba".format(txt))
                            data = url.json()
                            no = 0
                            result = "Brainly :\n"
                            for anu in data:
                                no += 1
                                result += "\n{}. {}".format(str(no),str(anu["title"]))
                                result += "\n{}".format(str(anu["url"]))
                            result += "\n\nTotal {} Jawaban".format(str(len(data)))
                            MyFooter(to, result)                               
                        elif cmd.startswith("astronotnow"):  
                            with requests.session() as web:
                                web.headers["User-Agent"] = random.choice(settings["userAgent"])
                                r = web.get("http://api.open-notify.org/astros.json")
                                data = r.text
                                data = json.loads(data)
                                if data["message"] == "success":
                                    if data["people"] != []:
                                        number = data["number"]
                                        people = data["people"]
                                        ret_ = "Date Astronot :\n"
                                        for i in people:
                                           ret_ += "\nName : {}".format(str(i["name"]))
                                           ret_ += "\nStation : {}".format(str(i["craft"]))
                                        ret_ += "\nCurrently there : {}".format(str(number))
                                        Myflex5(to, str(ret_))
                                    else:
                                        Myflex5(to, "Nothing")
                                else:
                                    zarifoglu.sendReplyMessage(msg.id, to, "Error404")                
                        elif cmd == "bitcoin" or cmd == " bitcoin":
                            r=requests.get("https://xeonwz.herokuapp.com/bitcoin.api")
                            data=r.text
                            data=json.loads(data)
                            hasil = "„Äå Bitcoin „Äç\n" 
                            hasil += "\nPrice : " +str(data["btc"])
                            hasil += "\nExpensive : " +str(data["high"])
                            hasil += "\nCheap : " +str(data["low"])
                            zarifoglu.sendMessage(msg.to, str(hasil))
                        elif cmd == "anitoki":
                            result = requests.get("http://anitoki.com/")
                            data = BeautifulSoup(result.content, 'html5lib')
                            hasil = "„Äå Anitoki „Äç\nType : Last Update\n"
                            no = 1
                            for dzin in data.findAll('div', attrs={'class':'content'}):
                                hasil += "\n\n{}. {}".format(str(no), str(dzin.find('h2').text))
                                hasil += "\n     Link : {}".format(str(dzin.find('a')['href']))
                                no = (no+1)
                            zarifoglu.sendMessage(to, str(hasil))
                        elif cmd == "cinema xx1":
                            result = requests.get("http://jadwalnonton.com/")
                            data = BeautifulSoup(result.content, 'html5lib')
                            hasil = "„Äå Cinema XX1 „Äç\nType : Movie List Today\n"
                            no = 1
                            for dzin in data.findAll('div', attrs={'class':'col-xs-6 moside'}):
                                hasil += "\n\n{}. {}".format(str(no), str(dzin.find('h2').text))
                                hasil += "\n     Link : {}".format(str(dzin.find('a')['href']))
                                no = (no+1)
                            zarifoglu.sendMessage(to, str(hasil))
                        elif cmd == "xxsystem":
                            ac = subprocess.getoutput('lsb_release -a')
                            am = subprocess.getoutput('cat /proc/meminfo')
                            ax = subprocess.getoutput('lscpu')
                            core = subprocess.getoutput('grep -c ^processor /proc/cpuinfo ')
                            python_imp = platform.python_implementation()
                            python_ver = platform.python_version()
                            for line in ac.splitlines():
                                if 'Description:' in line:
                                    osi = line.split('Description:')[1].replace('  ','')
                            for line in ax.splitlines():
                                if 'Architecture:' in line:
                                    architecture =  line.split('Architecture:')[1].replace(' ','')
                            for line in am.splitlines():
                                if 'MemTotal:' in line:
                                    mem = line.split('MemTotal:')[1].replace(' ','')
                                if 'MemFree:' in line:
                                    fr = line.split('MemFree:')[1].replace(' ','')
                            md = "‚öíÔ∏è System\n\n"
                            md +="OS: {}\n".format(osi)
                            md +="Lang: {}\n".format(python_imp)
                            md +="Ver: {}\n".format(python_ver)
                            md +="Architecture: {}\n".format(architecture)
                            md +="CPU Core: {}\n".format(core)
                            md +="Memory: {}\n".format(mem)
                            md +="Free: {}".format(fr)
                            Myflex5(to,md)
                        elif cmd == "about2":
                            try:
                                arr = []
                                today = datetime.today()
                                thn = 2018 
                                bln = 8    #isi bulannya yg sewa
                                hr = 9   #isi tanggalnya yg sewa
                                future = datetime(thn, bln, hr)
                                days = (str(future - today))
                                comma = days.find(",")
                                days = days[:comma]
                                h = zarifoglu.getContact(zarifogluMID)
                                groups = zarifoglu.getGroupIdsJoined()
                                contactlist = zarifoglu.getAllContactIds()
                                kontak = zarifoglu.getContacts(contactlist)
                                favorite = zarifoglu.getFavoriteMids()
                                blockedlist = zarifoglu.getBlockedContactIds()
                                kontak2 = zarifoglu.getContacts(blockedlist)
                                fil = zarifoglu.getSettings().privacyReceiveMessagesFromNotFriend
                                seal = zarifoglu.getSettings().e2eeEnable
                                src = zarifoglu.getSettings().privacySearchByUserid
                                status = {"kick": "", "invite": ""}
                                try:zarifoglu.kickoutFromGroup(to, [zarifogluMID]);status["kick"] = "Normal"
                                except:status["kick"] = "Limit"
                                try:zarifoglu.inviteIntoGroup(to, [zarifogluMID]);status["invite"] = "Normal"
                                except:status["invite"] = "Limit"
                                if src == True:alid = "Add From LineID : True"
                                else:alid = "Add From LineID : False"                            
                                if seal == True:letsel = "Letter Sealing : True"
                                if seal == False:letsel = "Letter Sealing : False"
                                if fil == True:fpes = "Filter Message : False"
                                if fil == False:fpes = "Filter Message : True"
                                ret_ = "About zarifoglu :\n"
                                ret_ += "\nTurkeyTeam : {}".format(h.displayName)
                                ret_ += "\nGroup : {}".format(str(len(groups)))
                                ret_ += "\nFriend : {}".format(str(len(kontak)))
                                ret_ += "\nFavorite: {}".format(str(len(favorite)))
                                ret_ += "\nBlocked : {}".format(str(len(kontak2)))
                                ret_ += "\nChat Send: {}".format(str(peler["sendcount"]))
                                ret_ += "\nChat Received : {}".format(str(peler["receivercount"]))
                                ret_ += "\n{}".format(alid)
                                ret_ += "\n{}".format(letsel)
                                ret_ += "\n{}".format(fpes)
                                ret_ += "\nKick : %s" % status["kick"]
                                ret_ += "\nInvite : %s" % status["invite"]
                                ret_ += "\n\n< About Bots >\n"
                                ret_ += "\nType : Selfbot"
                                ret_ += "\nVersion : V.09\n"
                                ret_ += "\nMaker : Turkey"
                                Myflex5(to, str(ret_))
                            except Exception as e:
                                zarifoglu.sendMessage(to, str(e))
                        elif cmd == "fight":
                               group = zarifoglu.getGroup(to)
                               try:
                                   members = [mem.mid for mem in group.members]
                                   mortal = [mem.mid for mem in group.members]
                               except:
                                   members = [mem.mid for mem in group.members]
                                   mortal = [mem.mid for mem in group.members]
                               s = random.choice(members)
                               t = random.choice(mortal)
                               sam = "Mortal Kombat has been initiated. "+zarifoglu.getContact(s).displayName+" must fight..."+zarifoglu.getContact(t).displayName+"! FIGHTO!"
                               zarifoglu.generateReplyMessage(msg.id)
                               zarifoglu.sendReplyMessage(msg.id, to,str(sam))
                        elif cmd == "fancypict off":
                            settings["fancy"]["status"] = False
                            settings["fancy"]["foto1"] = []
                            settings["fancy"]["foto2"] = []
                            settings["fancy"]["foto3"] = []
                            Myflex5(to, " „Äå Fancy „Äç\nType: Fancy picture\n ‚å¨ Status: DISABLED\n ‚å¨ Fancypict: Clear...")
                        elif cmd.startswith("fancypict on "):
                            settings['fancy']['foto1'] = []
                            settings['fancy']['foto2'] = []
                            settings['fancy']['foto3'] = []
                            if to not in settings["fancy"]["foto1"]:
                                settings["fancy"]["foto1"].append(to)
                            msg.text = zarifoglu.mycmd(msg.text,wait)
                            wait['waktu'] = int(msg.text.split(" ")[2])
                            Myflex5(to, "Waiting for picture, please send a picture...")
                        elif cmd == "changedp fancy":
                            settings["fancy"]["foto1"] = []
                            settings["fancy"]["foto2"] = []
                            settings["fancy"]["foto3"] = []
                            if to not in settings["fancy"]["foto1"]:
                                settings["fancy"]["foto1"].append(to)
                                wait['waktu'] = 5
                            Myflex5(to, "Waiting for picture...")
                        elif cmd == "picture uploaded to fancy picture 1":
                            if to not in settings["fancy"]["foto2"]:
                                settings["fancy"]["foto2"].append(to)
                            Myflex5(to, "Send pict again..")
                        elif cmd == "picture uploaded to fancy picture 2":
                            if to not in settings["fancy"]["foto3"]:
                                settings["fancy"]["foto3"].append(to)
                            Myflex5(to, "Send pict again...")
                        elif cmd == "delallchat" and sender == zarifogluMID:
                            zarifoglu.removeAllMessages(op.param2)
                            zarifoglu.generateReplyMessage(msg.id)
                            zarifoglu.sendReplyMessage(msg.id, to, "Deleted")
                        elif cmd == 'square' or cmd == ' squares':
                            a = zarifoglu.getJoinedSquares()
                            squares = a.squares
                            txt2 = '„Äå Squares „Äç\n'
                            for s in range(len(squares)):
                                txt2 += "\n"+str(s+1)+". "+str(squares[s].name)
                            txt2 += "\n\nTotal {} Squares.".format(str(len(squares)))
                            txt2 += "\n\nUsage : Square [num]"
                            Myflex5(to,str(txt2))
                        elif cmd.startswith("square"):
                            number = removeCmd("square",text)
                            squares = zarifoglu.getJoinedSquares().squares
                            ret_ = "„Äå Square „Äç\n"
                            try:
                                square = squares[int(number)-1]
                                path = "http://dl.profile.line-cdn.net/" + square.profileImageObsHash
                                ret_ += "\n1. Name : {}".format(str(square.name))
                                ret_ += "\n2. Description: {}".format(str(square.desc))
                                ret_ += "\n3. ID Square : {}".format(str(square.mid))
                                ret_ += "\n4. Link : {}".format(str(square.invitationURL))
                                zarifoglu.sendImageWithURL(to, path)
                                Myflex5(to,str(ret_))
                            except Exception as error:
                                zarifoglu.sendMessage(to, str(error))
                        elif cmd.startswith("$"):
                            if msg._from in myAdmin:
                                kntl = removeCmd("$", text)
                                ikkeh = os.popen("{}".format(str(kntl)))
                                enaena = ikkeh.read()
                                zarifoglu.sendMessage(to, "{}".format(str(enaena)))
                                ikkeh.close()
                        elif cmd == "screenlist":
                            if msg._from in myAdmin:
                                proses = os.popen("screen -list")
                                a = proses.read()
                                MyFooter(to, "{}".format(str(a)))
                                proses.close()
                        elif cmd.startswith("urban "):
                            sep = text.split(" ")
                            judul = text.replace(sep[0] + " ","")
                            url = "http://api.urbandictionary.com/v0/define?term="+str(judul)
                            with requests.session() as s:
                                s.headers["User-Agent"] = random.choice(settings["userAgent"])
                                r = s.get(url)
                                data = r.text
                                data = json.loads(data)
                                y = "Result Urban :\n"
                                y += "\nAuthor: "+str(data["list"][0]["author"])
                                y += "\nWord: "+str(data["list"][0]["word"])
                                y += "\nLink: "+str(data["list"][0]["permalink"])
                                y += "\nDefinition: "+str(data["list"][0]["definition"])
                                y += "\nExample: "+str(data["list"][0]["example"])                                
                                MyFooter(to, str(y))
                        elif cmd.startswith("arti-nama "):
                            sep = text.split(" ")
                            nama = text.replace(sep[0] + " ","")
                            with requests.session() as s:
                                s.headers['user-agent'] = 'Mozilla/5.0'
                                r = s.get("http://primbon.com/arti_nama.php?nama1={}&proses=+Submit%21+".format(urllib.parse.quote(nama)))
                                soup = BeautifulSoup(r.content, 'html5lib')
                                for anu in soup.findAll('div', attrs={'id':'body'}):
                                    data = anu.get_text()
                                    rep = data.replace('ARTI','<b>ARTI')
                                    res = rep.replace('< Hitung Kembali','</b>')
                                    data1 = BeautifulSoup(res, 'html5lib')
                                    for content in data1:
                                        ret_ = content.b.string
                                        MyFooter(to, ret_)
                        elif cmd.startswith("endonezce:"):
                             proses = text.split(" ")
                             pesan = text.replace(proses[0] + " ","")
                             logs = TEXTLIB().translator(is_html=False, text=pesan, lang_to='id', proxy=False)
                             MyFooter(to, str(logs))
                        elif cmd.startswith("ingilizce:"):
                             proses = text.split(" ")
                             pesan = text.replace(proses[0] + " ","")
                             logs = TEXTLIB().translator(is_html=False, text=pesan, lang_to='en', proxy=False)
                             MyFooter(to, str(logs))
                        elif cmd.startswith("korece:"):
                             proses = text.split(" ")
                             pesan = text.replace(proses[0] + " ","")
                             logs = TEXTLIB().translator(is_html=False, text=pesan, lang_to='ko', proxy=False)
                             MyFooter(to, str(logs))
                        elif cmd.startswith("taylandca:"):
                             proses = text.split(" ")
                             pesan = text.replace(proses[0] + " ","")
                             logs = TEXTLIB().translator(is_html=False, text=pesan, lang_to='th', proxy=False)
                             MyFooter(to, str(logs))
                        elif cmd.startswith("arap√ßa:"):
                             proses = text.split(" ")
                             pesan = text.replace(proses[0] + " ","")
                             logs = TEXTLIB().translator(is_html=False, text=pesan, lang_to='ar', proxy=False)
                             MyFooter(to, str(logs))
                        elif cmd.startswith("rus√ßa:"):
                             proses = text.split(" ")
                             pesan = text.replace(proses[0] + " ","")
                             logs = TEXTLIB().translator(is_html=False, text=pesan, lang_to='ru', proxy=False)
                             MyFooter(to, str(logs))
                        elif cmd.startswith("japonca:"):
                             proses = text.split(" ")
                             pesan = text.replace(proses[0] + " ","")
                             logs = TEXTLIB().translator(is_html=False, text=pesan, lang_to='ja', proxy=False)
                             MyFooter(to, str(logs))
                        elif cmd.startswith("malayca:"):
                             proses = text.split(" ")
                             pesan = text.replace(proses[0] + " ","")
                             logs = TEXTLIB().translator(is_html=False, text=pesan, lang_to='ms', proxy=False)
                             MyFooter(to, str(logs))
                        elif cmd.startswith("fransƒ±zca:"):
                             proses = text.split(" ")
                             pesan = text.replace(proses[0] + " ","")
                             logs = TEXTLIB().translator(is_html=False, text=pesan, lang_to='fr', proxy=False)
                             MyFooter(to, str(logs))
                        elif cmd.startswith("almanca:"):
                             proses = text.split(" ")
                             pesan = text.replace(proses[0] + " ","")
                             logs = TEXTLIB().translator(is_html=False, text=pesan, lang_to='de', proxy=False)
                             MyFooter(to, str(logs))
                        elif cmd.startswith("italyanca:"):
                             proses = text.split(" ")
                             pesan = text.replace(proses[0] + " ","")
                             logs = TEXTLIB().translator(is_html=False, text=pesan, lang_to='it', proxy=False)
                             MyFooter(to, str(logs))
                        elif cmd.startswith("√ßince:"):
                             proses = text.split(" ")
                             pesan = text.replace(proses[0] + " ","")
                             logs = TEXTLIB().translator(is_html=False, text=pesan, lang_to='cs', proxy=False)
                             MyFooter(to, str(logs))
                        elif cmd.startswith("t√ºrk√ße:"):
                             proses = text.split(" ")
                             pesan = text.replace(proses[0] + " ","")
                             logs = TEXTLIB().translator(is_html=False, text=pesan, lang_to='tr', proxy=False)
                             MyFooter(to, str(logs))
                        elif cmd.startswith("hint√ße:"):
                             proses = text.split(" ")
                             pesan = text.replace(proses[0] + " ","")
                             logs = TEXTLIB().translator(is_html=False, text=pesan, lang_to='hi', proxy=False)
                             MyFooter(to, str(logs))
                        elif cmd.startswith("ispanyolca:"):
                             proses = text.split(" ")
                             pesan = text.replace(proses[0] + " ","")
                             logs = TEXTLIB().translator(is_html=False, text=pesan, lang_to='es', proxy=False)
                             MyFooter(to, str(logs))
                        if cmd.startswith('zalgo '):
                            def zalgo(text):return zalgoname().zalgofy(zarifoglu.mainsplit(text))
                            zarifoglu.sendMessage(to, zalgo(text))                            
							
                        elif cmd == "randomname":
                            r=requests.get("http://uinames.com/api/")
                            data=r.text
                            data=json.loads(data)
                            hasil = "Random Name :\n\n"
                            hasil += "Name: " + str(data["name"])                                              
                            hasil += "\nLastName: " + str(data["surname"])
                            hasil += "\nGender: " + str(data["gender"])
                            hasil += "\nCountry: " + str(data["region"])      
                            Myflex5(to,str(hasil))

                        elif cmd == "dadjoke":
                            count = random.randint(0,500)
                            r=requests.get("http://api.icndb.com/jokes/%s"%count)
                            data=r.text
                            data=json.loads(data)
                            zarifoglu.sendMessage(to, str(data["value"]["joke"]))
                        elif cmd == "love":
                            gifnya = ['https://thumbs.gfycat.com/InconsequentialRipeLeopardseal-small.gif']
                            data = {
                                "type": "template",
                                "altText": "Image carouserl",
                                "template": {
                                    "type": "image_carousel",
                                    "columns": [
                                        {
                                            "imageUrl": "{}".format(random.choice(gifnya)),
                                            "size": "full",
                                            "action": {
                                                "type": "uri",
                                                "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                                            }
                                        }
                                    ]
                                }
                            }
                            sendTemplate(to, data)
                            
                        elif cmd == "test6":
                            data={"type":"flex","altText":settings["bayrak"],"contents":{
  "type": "bubble",
  "body": {
    "type": "box",
    "layout": "vertical",
    "contents": [
      {
        "type": "image",
        "url": "https://i.ibb.co/JxrVHwr/Pics-Art-12-07-05-46-40.jpg",
        "size": "full",
        "aspectMode": "cover",
        "aspectRatio": "1:1",
        "gravity": "center"
      },
      {
        "type": "box",
        "layout": "horizontal",
        "contents": [
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": settings["bayrak"],
                    "size": "lg",
                    "color": "#ffffff",
                    "weight": "bold",
                    "align": "center",
                    "offsetStart": "15px"
                  }
                ]
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "text",
                    "text": "Selfbots Edition",
                    "size": "sm",
                    "color": "#ffffff",
                    "weight": "bold",
                    "align": "center"
                  }
                ]
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "spacer"
                  }
                ],
                "margin": "md"
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Login",
                        "size": "sm",
                        "color": "#ffffff",
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "https://nekopoi.care"
                        }
                      }
                    ],
                    "offsetStart": "0px"
                  },
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Logout",
                        "size": "sm",
                        "color": "#ffffff",
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "https://nekopoi.care"
                        }
                      }
                    ],
                    "offsetStart": "10px"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "margin": "lg"
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Login",
                        "size": "sm",
                        "color": "#ffffff",
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "https://nekopoi.care"
                        }
                      },
                      {
                        "type": "spacer"
                      }
                    ],
                    "offsetStart": "0px"
                  },
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Logout",
                        "size": "sm",
                        "color": "#ffffff",
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "https://nekopoi.care"
                        }
                      }
                    ],
                    "offsetStart": "10px"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "margin": "xl"
              },
              {
                "type": "box",
                "layout": "horizontal",
                "contents": [
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Login",
                        "size": "sm",
                        "color": "#ffffff",
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "https://nekopoi.care"
                        }
                      }
                    ],
                    "offsetStart": "0px"
                  },
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Logout",
                        "size": "sm",
                        "color": "#ffffff",
                        "align": "center",
                        "action": {
                          "type": "uri",
                          "label": "action",
                          "uri": "https://nekopoi.care"
                        }
                      }
                    ],
                    "offsetStart": "10px"
                  },
                  {
                    "type": "filler"
                  }
                ],
                "margin": "sm"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "spacer",
                    "size": "xxl"
                  },
                  {
                    "type": "filler"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Test",
                        "color": "#ffffff",
                        "align": "center"
                      }
                    ],
                    "margin": "lg",
                    "offsetEnd": "20px"
                  },
                  {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                      {
                        "type": "filler"
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "text",
                            "text": "Test",
                            "size": "sm",
                            "color": "#ffffff",
                            "align": "center"
                          }
                        ],
                        "offsetEnd": "20px"
                      },
                      {
                        "type": "filler"
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "text",
                            "text": "Test",
                            "size": "sm",
                            "color": "#ffffff",
                            "align": "center"
                          }
                        ],
                        "offsetEnd": "40px"
                      },
                      {
                        "type": "filler"
                      }
                    ],
                    "margin": "md"
                  }
                ],
                "margin": "md"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "filler"
                  }
                ],
                "margin": "sm"
              }
            ],
            "spacing": "xs"
          }
        ],
        "position": "absolute",
        "offsetBottom": "0px",
        "offsetStart": "0px",
        "offsetEnd": "0px",
        "paddingAll": "20px"
      }
    ],
    "paddingAll": "0px"
  }
}}
                            sendTemplate(to, data)

                        elif cmd == "me11":
                            contact = zarifoglu.getContact(zarifogluMID)
                            tz = pytz.timezone("Asia/Istanbul")
                            timeNow = time.time()
                            runtime = timeNow - botStart
                            runtime = format_timespan(runtime)
                            data = {
                                "type": "flex",
                                "altText": "{} Send Flex".format(zarifoglu.getProfile().displayName),
                                "contents": {
                                    "type": "bubble",
                                        'styles': {
                                            "body": {
                                                "backgroundColor": "{}".format(setbot["background"])
                                            },
                                            "footer": {
                                                "backgroundColor": '#FFFFFF'
                                            },
                                        },
                                        "hero":{
                                            "type":"image",
                                            "aspectMode":"cover",
                                            "url":"https://obs.line-scdn.net/{}".format(contact.pictureStatus),
                                            "size":"full"
                                        },
                                        "body":{
                                            "type":"box",
                                            "layout": "vertical",
                                            "contents":[
                                                {
                                                    "type":"separator",
                                                    "margin":"sm",
                                                    "color":"#FFFFFF"
                                                },
                                                {
                                                    "type":"text",
                                                    "align":"center",
                                                    "size":"lg",
                                                    "color":"#FFFFFF",
                                                    "text":settings["bayrak"],
                                                },
                                                {
                                                    "type":"separator",
                                                    "margin":"sm",
                                                    "color":"#FFFFFF"
                                                },
                                                {
                                                    "type":"separator",
                                                    "margin":"sm",
                                                    "color":"#FFFFFF"
                                                },
                                                {
                                                    "type":"text",
                                                    "align":"center",
                                                    "size":"lg",
                                                    "color":"#FFFFFF",
                                                    "text":"{}".format(contact.displayName),
                                                },
                                                {
                                                    "type":"separator",
                                                    "margin":"sm",
                                                    "color":"#FFFFFF"
                                                },
                                                {
                                                    "type":"text",
                                                    "align":"center",
                                                    "size": "sm",
                                                    "color": "#FFFFFF",
                                                    "text":"{}".format(contact.statusMessage),
                                                    "wrap": True,
                                                    "flex": 2
                                                },
                                                {
                                                    "type":"separator",
                                                    "margin":"sm",
                                                    "color":"#FFFFFF"
                                                },
                                                {
                                                    "type":"text",
                                                    "align":"start",
                                                    "size":"xxs",
                                                    "color":"#FFFFFF",
                                                    "text":"Support By :"
                                                },
                                                {
                                                    "type":"box",
                                                    "layout":"horizontal",
                                                    "spacing":"md",
                                                    "margin":"sm",
                                                    "contents":[
                                                        {
                                                            "type":"text",
                                                            "align":"center",
                                                            "color":"#FFFFFF",
                                                            "size":"xs",
                                                            "text":"Bot"
                                                        },
                                                        {
                                                            "type":"separator",
                                                            "margin":"md",
                                                            "color":"#FFFFFF"
                                                        },
                                                        {
                                                            "type":"text",
                                                            "align":"center",
                                                            "color":"#FFFFFF",
                                                            "size":"xs",
                                                            "text":"Turkey"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type":"box",
                                                    "layout":"horizontal",
                                                    "spacing":"md",
                                                    "margin":"xs",
                                                    "contents":[
                                                        {
                                                            "type":"text",
                                                            "align":"center",
                                                            "color":"#FFFFFF",
                                                            "size":"xs",
                                                            "text":"Turkish"
                                                        },
                                                        {
                                                            "type":"separator",
                                                            "margin":"md",
                                                            "color":"#FFFFFF"
                                                        },
                                                        {
                                                            "type":"text",
                                                            "align":"center",
                                                            "color":"#FFFFFF",
                                                            "size":"xs",
                                                            "text":"Zarif"
                                                        }
                                                    ]
                                                },
                                                {
                                                    "type":"box",
                                                    "layout":"vertical",
                                                    "spacing":"md",
                                                    "contents":[
                                                        {
                                                            "type":"text",
                                                            "align":"center",
                                                            "color":"#FFFFFF",
                                                            "size":"xxs",
                                                            "text":"And Other Beside Me"
                                                        },
                                                        {
                                                            "type":"separator",
                                                            "color":"#FFFFFF"
                                                        },
                                                        {
                                                            "type":"text",
                                                            "align":"center",
                                                            "color":"#FFFFFF",
                                                            "size":"xxs",
                                                            "text":"Runtime :"
                                                        },
                                                        {
                                                            "type":"text",
                                                            "align":"center",
                                                            "color":"#FFFFFF",
                                                            "size":"xxs",
                                                            "text":"{}".format(runtime)
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        "footer": {
                                            "type": "box",
                                            "layout": "vertical",
                                            "spacing": "sm",
                                            "contents": [
                                                {
                                                    "type": "box",
                                                    "layout": "baseline",
                                                    "contents": [
                                                        {
                                                            "type": "icon",
                                                            "url": 'https://files.boteater.net/jpg-kygbqzld.jpg',
                                                            "size": "md"
                                                        },
                                                        {
                                                            "type": "text",
                                                            "text": settings["bayrak"],
                                                            "align": "center",
                                                            "color": "#000000",
                                                            "size": "md",
                                                            "action": 
                                                                {
                                                                    "type": "uri",
                                                                    "uri": "https://line.me/ti/p/~This_Me_HOOK"
                                                                }
                                                            },
                                                            {
                                                                "type": "spacer",
                                                                "size": "sm",
                                                            }
                                                        ]
                                                    }
                                                ]
                                            }
                                        }
                                    }
                            sendTemplate(to, data)
                        elif cmd.startswith("youtubemp4"):
                            link = removeCmd("youtubemp4", text)
                            youtubeMp4(to, link)
                        elif cmd.startswith("youtubemp3"):
                            link = removeCmd("youtubemp3", text)
                            youtubeMp3(to, link)
                        elif cmd.startswith("fileytmp4"):
                             link = removeCmd("fileytmp4", text)
                             fileYtMp4(to, link)
                        elif cmd.startswith("fileytmp3"):
                             link = removeCmd("fileytmp3", text)
                             fileYtMp3(to, link)
                        elif cmd.startswith("unblockmid "):
                            user = removeCmd("unblockmid", text)
                            zarifoglu.unblockContact(user)
                            Myflex5(to, "Success Unblock Contact.")
                        elif cmd.startswith("blockmid "):
                            user = removeCmd("blockmid", text)
                            zarifoglu.blockContact(user)
                            Myflex5(to, "Success Block Contact.")
                        elif cmd == "speedz":
                            start = time.time()
                            zarifoglu.sendMessage("u5d854616fc8ea66893e7a85b7cb0b9f1", '<...>')
                            elapsed_time = time.time() - start
                            zarifoglu.sendMessage(to,"Time:\n%s"%str(round(elapsed_time,5)))
                        elif cmd == "reboot" and sender == zarifogluMID:
                            try:
                                zarifoglu.sendMessage(to, "Bot , Yeniden ba≈ülatƒ±lƒ±yor..")
                            except: pass
                            settings["restartPoint"] = to
                            restartBot()
                        elif cmd == 'clearban':
                            wait["blacklist"] = []
                            zarifoglu.sendMessage(to, "Done")
                        if cmd == "quotes":
                            r = requests.get("https://talaikis.com/api/quotes/random")
                            data=r.text
                            data=json.loads(data)
                            hasil = " „Äå Quotes „Äç\n"
                            hasil += "Category: " +str(data["cat"])
                            hasil += "\n" +str(data["quote"])
                            hasil += "\nAuthor: " +str(data["author"])
                            Myflex5(to,str(hasil))
                        if cmd == "fmylife":
                            result = requests.get("http://www.fmylife.com/random")
                            data = BeautifulSoup(result.content, 'html5lib')                                                                             
                            for sam in data.findAll('figure', attrs={'class':'text-center visible-xs'}):                                        
                                path = str(sam.find('img')['data-src'])                                    
                            zarifoglu.sendImageWithURL(to, str(path))
                        if cmd == "movienews":
                            count = random.randint(0,2)
                            result = requests.get("http://www.jadwaltv.net/artikel/page/%s"%count)
                            data = BeautifulSoup(result.content, 'html5lib')
                            hasil = " „Äå Movie News „Äç"                                  
                            no = 1                                    
                            for sam in data.findAll('div', attrs={'class':'media'}):
                                hasil += "\n{}. {}".format(str(no), str(sam.find('a')['title']))
                                hasil += "\n{}".format(str(sam.find('a')['href']))                                        
                                no = (no+1)                                    
                            MyFooter(to,str(hasil))
#=====================================================================
                        elif cmd.startswith("smulemp4 "):
                            try:
                                name = removeCmd("smulemp4", text)    
                                r = requests.get('http://beearchi.pw/tools/smule.php?link='+name)
                                data = r.text
                                data = json.loads(data)
                                Myflex5(to, "Processed upload...")
                                zarifoglu.sendVideoWithURL(to,data["result"])
                            except:
                                Myflex5(to, "ERROR")   
                        elif cmd.startswith("smulefile "):
                            try:
                                name = removeCmd("smulefile", text)    
                                r = requests.get('http://beearchi.pw/tools/smule.php?link='+name)
                                data = r.text
                                data = json.loads(data)
                                Myflex5(to, "Processed upload...")
                                zarifoglu.sendFileWithURL(to,data["result"])
                            except:
                                Myflex5(to, "ERROR")   
                        elif cmd.startswith("smulemp3 "):
                            try:
                                name = removeCmd("smulemp3", text)    
                                r = requests.get('http://beearchi.pw/tools/smule.php?link='+name)
                                data = r.text
                                data = json.loads(data)
                                Myflex5(to, "Processed upload...")
                                zarifoglu.sendAudioWithURL(to,data["result"])
                            except:
                                Myflex5(to, "ERROR")   
                        elif cmd.startswith("azab "):
                            try:
                                aa = removeCmd("azab", text)
                                bb = requests.get("https://api.dzin.jp/api/azab/?apikey=beta&text=%s"%aa)
                                cc = json.loads(bb.text)
                                zarifoglu.sendImageWithURL(to, str(cc["image"]))
                            except:
                                Myflex5(to, "ERROR")   
                        elif cmd.startswith("smuleprofile "):
                            try:
                                name = removeCmd("smuleprofile", text)
                                bb = requests.get("https://api.dzin.jp/api/smule/profile/?apikey=beta&username=%s"%name)
                                data = json.loads(bb.text)
                                aa = "  „ÄåSmule Profile„Äç\n"
                                try:aa += "\n‚å¨ Username : %s"%name
                                except:aa += ""
                                try:aa += "\n‚å¨ First Name : %s"%data["result"]["user"]["first_name"]
                                except:aa += ""
                                try:aa += "\n‚å¨ Last Name : %s"%data["result"]["user"]["last_name"]
                                except:aa += ""
                                try:aa += "\n‚å¨ Followers : %s"%data["result"]["user"]["followers"]
                                except:aa += ""
                                try:aa += "\n‚å¨ Following : %s"%data["result"]["user"]["followees"]
                                except:aa += ""
                                try:aa += "\n‚å¨ VIP : %s"%data["result"]["user"]["is_vip"]
                                except:aa += ""
                                try:aa += "\n‚å¨ Verified : %s"%data["result"]["user"]["is_verified"]
                                except:aa += ""
                                try:aa += "\n‚å¨ Link : https://smule.com%s"%data["result"]["user"]["url"]
                                except:aa += ""
                                try:aa += "\n  „ÄåStatus„Äç\n %s"%data["result"]["user"]["blurb"]
                                except:aa += ""
                                zarifoglu.sendImageWithURL(to, str(data["result"]["user"]["pic_url"]))
                                Myflex5(to, str(aa))
                            except:
                                MyFooter(to, "ERROR")   
                        elif cmd.startswith("instaprofile "):
                            try:
                                username = removeCmd("instaprofile", text)
                                data = Instagram().InstagramProfile(username)["result"]
                                aa = "\n‚å¨ Username : %s"%data["username"]
                                aa += "\n‚å¨ Full Name : %s"%data["name"]
                                aa += "\n‚å¨ Biography : %s"%data["bio"]
                                aa += "\n‚å¨ Media Count : %s"%data["media"]
                                aa += "\n‚å¨ Followers : %s"%data["followers"]
                                aa += "\n‚å¨ Following : %s"%data["following"]
                                aa += "\n‚å¨ Private : %s"%data["private"]
                                zarifoglu.sendImageWithURL(to, str(data["pict"]))
                                MyFooter(to, "  ÔΩ¢Instagram ProfileÔΩ£\n%s"%aa)
                            except:
                                Myflex5(to, "Error")
                        elif cmd.startswith("instapost "):
                            try:
                                aa = removeCmd("instapost", text).split(" ")
                                username = aa[0]
                                number = int(aa[1])
                                data = Instagram().InstagramPost(username, number-1)["result"]
                                aa = "\n‚å¨ Username : %s"%data["username"]
                                aa += "\n‚å¨ Caption : %s"%data["caption"]
                                aa += "\n‚å¨ Like Count : %s"%data["jml_like"]
                                aa += "\n‚å¨ Comment Count : %s"%data["jml_komen"]
                                aa += "\n‚å¨ Link : %s"%data["link"]
                                bb = Instagram().InstagramDownload(str(data["link"]))
                                if bb["result"]["type"] == "picture":
                                    zarifoglu.sendImageWithURL(to, str(bb["result"]["download"]))
                                if bb["result"]["type"] == "video":
                                    zarifoglu.sendVideoWithURL(to, str(bb["result"]["download"]))
                                MyFooter(to, "  ÔΩ¢Instagram PostÔΩ£\n%s"%aa)
                            except:
                                Myflex5(to, "Error")
                        elif cmd.startswith("kbbi word "):
                            try:
                                word = removeCmd("kbbi word", text)
                                r = requests.get("https://api.dzin.jp/api/kbbi/word/?apikey=beta&word=%s"%word)
                                data = json.loads(r.text)
                                for anu in data["result"]:
                                    result = "  „ÄåKBBI„Äç\n"
                                    result += "\n‚å¨ Word : %s"%anu["word"]
                                    result += "\n‚å¨ Mean : %s"%anu["mean"]
                                Myflex5(receiver, str(result))
                            except:
                                MyFooter(receiver, "Tidak ada hasil untuk %s"%word)
                        elif cmd.startswith("kbbi page "):
                            try:
                                wtf = removeCmd("kbbi page", text)
                                cond = wtf.split("/")
                                page = int(cond[0])
                                r = requests.get("https://api.dzin.jp/api/kbbi/page/?apikey=beta&page=%i"%page)
                                data = json.loads(r.text)
                                if len(cond)  == 1:
                                    if data["result"] != []:
                                        num = 0
                                        result = "  „ÄåKBBI„Äç\n"
                                        for anu in data["result"]:
                                            num += 1
                                            result += "\n%s. %s"%(num, anu["word"])
                                        MyFooter(receiver, str(result))
                                    else:
                                        Myflex5(receiver, "Tidak ada halaman untuk %s"%page)
                                elif len(cond) == 2:
                                    num = int(cond[1])
                                    if num <= len(data["result"]):
                                        lmao = data["result"][num - 1]
                                        result = "  „ÄåKBBI„Äç\n"
                                        result += "\n‚å¨ Link : %s"%lmao["url"]
                                        Myflex5(receiver, str(result))
                            except:
                                Myflex5(to, "Error")
                        elif cmd.startswith("shio "):
                            shio = removeCmd("shio", text)
                            with requests.session() as web:
                                web.headers["user-agent"] = random.choice(settings["userAgent"])
                                try:
                                    r = web.get("http://api.dzin.jp/api/shio/?apikey=beta&shio={}".format(shio))
                                    data = r.text
                                    data = json.loads(data)
                                    result = "  „ÄåShio„Äç\n"
                                    for a in data["result"]:
                                        result += "Search : "+str(a["shio"])
                                        result += "\n\n"+str(a["description"])
                                    Myflex5(to, str(result))
                                except Exception as error:
                                    logError(error)
                        elif cmd.startswith("retro"):
                            try:
                                text_ = removeCmd("retro ", text)
                                txt = text_.split("-")        
                                txt = msg.text.split("-")                
                                bid = ["1","2","3","4","5"]
                                tid = ["1","2","3","4"]
                                btype = random.choice(bid)
                                ttype = random.choice(tid)
                                r= requests.get('https://api.ians.web.id/api/photofunia/arrow.php?text1='+txt[1]+'&text2='+txt[2]+'&btype='+btype+'&ttype='+ttype)
                                data = r.text
                                data = json.loads(data)
                                zarifoglu.sendImageWithURL(to, data['image'])
                            except:
                                Myflex5(to, "Error")
                        elif cmd.startswith("photo"):
                            try:
                                text_ = removeCmd("photo ", text)
                                txt = text_.split("-")        
                                txt = msg.text.split("-")                
                                bid = ["1","2","3","4","5"]
                                tid = ["1","2","3","4"]
                                btype = random.choice(bid)
                                ttype = random.choice(tid)
                                r = requests.get('http://zicor.ooo/api/retrowave.php?text1='+txt[1]+'&text2='+txt[2]+'&text3='+txt[3]+'&btype='+btype+'&ttype='+ttype)
                                data = r.text
                                data = json.loads(data)
                                zarifoglu.sendImageWithURL(to, data['image'])
                            except:
                                Myflex5(to, "Error")
#=====================================================================
                        if cmd.startswith('multikick '):
                            j = int(cmd.split(' ')[1])
                            a = [zarifoglu.adityasplittext(cmd,'s').replace('{} '.format(j),'')]*j
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    try:
                                        group = zarifoglu.getGroup(to)
                                        group.preventedJoinByTicket = True
                                        zarifoglu.updateGroup(group)
                                        b = [entod_in(to, ls) for b in a];zarifoglu.sendMention(to, '„Äå MultiKick „Äç\n@!has been Kicked out with {} amount of MultiKick‚ô™'.format(j),'',[ls])
                                    except Exception as e:
                                        print(e)

                        if cmd.startswith('gcall '):
                            j = int(cmd.lower().split(' ')[1])
                            a = [zarifoglu.adityasplittext(cmd,'s').replace(f'{j} ','')]*j
                            if 'MENTION' in msg.contentMetadata.keys() != None:
                                nama = []
                                key = eval(msg.contentMetadata['MENTION'])
                                key['MENTIONEES'][0]['M']
                                for x in key['MENTIONEES']:
                                    nama.append(x['M'])
                                b = [zarifoglu.call.inviteIntoGroupCall(to, nama, mediaType=2) for b in a]
                                k = len(nama)//20
                                for i in range(k+1):
                                    if i == 0:aa = f' „Äå Gcall „Äç\nSpam Call';no = i
                                    else:aa = f' „Äå Gcall „Äç\nSpam Call';no = i*20
                                    ret = aa
                                    for b in nama[i*20 : (i+1)*20]:
                                        no += 1
                                        if no == len(nama):ret += f'\n - {no}. @!\nhas been spammed with amount {j} of gcall.'
                                        else:ret += f'\n - {no}. @!'
                                    zarifoglu.sendMention(to, str(ret), '', nama[i*20 : (i+1)*20])
                            else:
                                try:nama = [a.mid for a in zarifoglu.getCompactGroup(to).members]
                                except:nama = [a.mid for a in zarifoglu.getRoom(to).contacts]
                                b = [zarifoglu.call.inviteIntoGroupCall(to, nama, mediaType=2) for b in a]
                                zarifoglu.sendMessage(to, f' „Äå Gcall „Äç\n{zarifoglu.getContact(msg._from).displayName} has been spammed with amount {j} of gcall to all members.')

                        if cmd.startswith('pc '):
                            try:
                                j = int(cmd.split(' ')[1])
                                a = [zarifoglu.adityasplittext(cmd,'s').replace('{} '.format(j),'')]*j
                                if 'MENTION' in msg.contentMetadata.keys()!=None:
                                    key = eval(msg.contentMetadata["MENTION"])
                                    key1 = key["MENTIONEES"][0]["M"]
                                    nama = zarifoglu.getContact(key1).displayName
                                    anu = zarifoglu.getContact(key1)
                                    if len(cmd.split("\n")) >= 2:
                                        mid  = "{}".format(key1)
                                        text = "{}".format(str(cmd.replace(cmd.split("\n")[0]+"\n","")))
                                        icon = "http://dl.profile.line.naver.jp/{}".format(anu.pictureStatus)
                                        name = "{}".format(anu.displayName)
                                        b = [sendMessageCustom(key1, text, icon, name) for b in a];zarifoglu.sendMention(to, '„Äå Spam „Äç\n@!has been spammed with {} amount of messages‚ô™'.format(j),'',[key1])
                            except Exception as e:print(e)
                        elif cmd.startswith('spam 1 '):
                            try:
                                msg.text = zarifoglu.mycmd(msg.text,wait)
                                j = int(msg.text.split(' ')[2])
                                a = [zarifoglu.adityasplittext(msg.text,'s').replace('{} '.format(j),'')]*j
                                h = [zarifoglu.sendMessage(to,b) for b in a];zarifoglu.sendMessage(to, '„Äå Spam „Äç\nTarget has been spammed with {} amount of messages‚ô™'.format(j))
                            except:pass
                        elif cmd.startswith('spam 2 '):
                            if msg.toType == 0:
                                msg.text = zarifoglu.mycmd(msg.text,wait)
                                j = int(msg.text.split(' ')[2])
                                a = [zarifoglu.adityasplittext(msg.text,'s').replace('{} '.format(j),'')]*j
                                b = [zarifoglu.giftmessage(to) for b in a];zarifoglu.sendMessage(to, '„Äå Spam „Äç\nTarget has been spammed with {} amount of messages‚ô™'.format(j))
                            else:
                                j = int(msg.text.split(' ')[2])
                                a = [zarifoglu.adityasplittext(msg.text,'s').replace('{} '.format(j),'')]*j
                                if 'MENTION' in msg.contentMetadata.keys()!=None:
                                    key = eval(msg.contentMetadata["MENTION"])
                                    key1 = key["MENTIONEES"][0]["M"]
                                    nama = [key1]
                                    b = [zarifoglu.giftmessage(key1) for b in a];zarifoglu.sendMention(to, '„Äå Spam „Äç\n@!has been spammed with {} amount of gift‚ô™'.format(j),'',[key1])
                        elif cmd.startswith('spam 3 '):
                            msg.text = zarifoglu.mycmd(msg.text,wait)
                            j = int(msg.text.split(' ')[2])
                            a = [zarifoglu.adityasplittext(msg.text,'s').replace('{} '.format(j),'')]*j
                            try:group = zarifoglu.getGroup(to);nama = [contact.mid for contact in group.members];b = [zarifoglu.sendContact(to,random.choice(nama)) for b in a]
                            except:nama = [to,to];b = [zarifoglu.sendContact(to,random.choice(nama)) for b in a]
                        elif cmd.startswith('spam 4 '):
                            j = int(msg.text.split(' ')[2])
                            lontong = cmd
                            msg.text = zarifoglu.mycmd(msg.text,wait)
                            a = settings['keyCommand'].title()
                            if settings['setKey'] == False:a = ''
                            anu = [zarifoglu.adityasplittext(msg.text,'s').replace('{} '.format(j),'')]*j
                            if 'MENTION' in msg.contentMetadata.keys()!=None:
                                key = eval(msg.contentMetadata["MENTION"])
                                key1 = key["MENTIONEES"][0]["M"]
                                nama = [key1]
                                if cmd.startswith(a+" "):gss = 7 + len(a)+1
                                else:gss = 7 + len(a)
                                msg.contentMetadata = {'AGENT_LINK': 'line://ti/p/~{}'.format(zarifoglu.getProfile().userid),'AGENT_ICON': "http://dl.profile.line-cdn.net/" + zarifoglu.getProfile().picturePath,'AGENT_NAME': ' „Äå SPAM MENTION „Äç','MENTION': str('{"MENTIONEES":' + json.dumps([{'S':str(int(key['S'])-gss-len(msg.text.split(' ')[2])-1+13), 'E':str(int(key['E'])-gss-len(msg.text.split(' ')[2])-1+13), 'M':key['M']} for key in eval(msg.contentMetadata["MENTION"])["MENTIONEES"]]) + '}')}
                                msg.text = lontong[gss+1+len(msg.text.split(' ')[2]):].replace(lontong[gss+1+len(msg.text.split(' ')[2]):],' „Äå Mention „Äç\n{}'.format(lontong[gss+1+len(msg.text.split(' ')[2]):]))
                                b = [zarifoglu.sendMessages(msg) for b in anu]
                        elif cmd.startswith("say "):
                            text_ = removeCmd("say", text)
                            cond = text_.split(" ")
                            bahasa = cond[0]
                            say = text_.replace(bahasa + " ","")
                            if bahasa in ["af", "sq", "ar", "hy", "az", "eu", "be", "bn", "bs", "bg", "ca", "ny", "zh", "zh", "hr", "cs", "da", "nl", "en", "eo", "et", "tl", "fi", "fr", "gl", "ka", "de", "el", "gu", "ht", "ha", "iw", "hi", "hu", "is", "ig", "id", "ga", "it", "ja", "jw", "kn", "kk", "km", "ko", "lo", "la", "lv", "lt", "mk", "mg", "ms", "ml", "mt", "mi", "mr", "mn", "my", "ne", "no", "fa", "pl", "pt", "pa", "ro", "ru", "sr", "st", "si", "sk", "sl", "so", "es", "su", "sw", "sv", "tg", "ta", "te", "th", "tr", "uk", "ur", "uz", "vi", "cy", "yi", "yo", "zu"]:
                                tts = gTTS(text=say,lang=bahasa)
                                tts.save("hasil.mp3")
                                zarifoglu.sendAudio(msg.to,"hasil.mp3")
                        elif cmd.startswith("creatememe "):
                            text_ = removeCmd("creatememe", text)
                            cond = text_.split("|")
                            list_template = ["10guy","afraid","blb","both","buzz","chosen","doge","elf","ermg","fa","fetch","fry","fwp","ggg","icanhas","interesting","iw","keanu","live","ll","mordor","morpheus","officiespace","oprah","philosoraptor","remembers","sb","ss","success","toohigh","wonka","xy","yallgot","yuno"]
                            if cond[0] is not None and cond[1] is not None:
                                up = str(cond[0])
                                down = str(cond[1])
                                if len(cond) > 2:
                                    if cond[2] is not None and cond[2] in list_template:
                                        template = str(cond[2])
                                    elif cond[2] is not None and cond[2] not in list_template:
                                        template = None
                                        zarifoglu.sendMessage(to,"Template tidak valid")
                                else:
                                    template = random.choice(list_template)
                                if template is not None:
                                    zarifoglu.sendImageWithURL(to,"https://memegen.link/{}/{}/{}.jpg".format(template,up,down))
                            else:
                                zarifoglu.sendMessage(to,"Error")
                        elif cmd == "template memegen":
                            f = open('ZarifKing/memeGen.txt','r')
                            lines = f.readlines()
                            panjang = len(lines)
                            lists = ""
                            for a in lines:
                                lists += str(a)
                            zarifoglu.sendMessage(to,"Template List :\n%s" %(lists))
                        elif cmd.startswith("wordbanadd "):
                            wban = cmd.split()[1:]
                            wban = " ".join(wban)
                            wbanlist.append(wban)
                            zarifoglu.sendMessage(to,"%s is now blacklisted."%wban)
                        elif cmd.startswith("wordbandel "):
                            wunban = cmd.split()[1:]
                            wunban = " ".join(wunban)
                            if wunban in wbanlist:
                                wbanlist.remove(wunban)
                                zarifoglu.sendMessage(to,"%s is no longer blacklisted."%wunban)
                            else:
                                zarifoglu.sendMessage(to,"%s is not blacklisted."%wunban)
                        elif cmd == 'list wordban':
                            tst = "„Äå WordBan List „Äç\n"
                            if len(wbanlist) > 0:
                                for word in wbanlist:
                                    tst += "‚å¨ %s"%word
                                zarifoglu.sendMessage(msg.to,tst)
                            else:
                                zarifoglu.generateReplyMessage(msg.id)
                                zarifoglu.sendReplyMessage(msg.id, to,"Wbanlist is empty!")
                        elif cmd == "@reject all":
                          gids = zarifoglu.getGroupIdsInvited()
                          xyzs = []
                          for x in gids:xyzs.append(x)
                          for x in gids:
                            zarifoglu.acceptGroupInvitation(x)
                          for x in xyzs:
                            zarifoglu.leaveGroup(x)
                          zarifoglu.sendMessage(to, "Success reject %i invitation." % len(xyzs))
                        elif cmd == "purge":
                            if msg.toType == 2:
                                group = zarifoglu.getGroup(to)
                                nama = [contact.mid for contact in group.members]
                                lists = []
                                for tag in wait["blacklist"]:
                                    lists+=filter(lambda str: str == tag, nama)
                                if lists == []:
                                    zarifoglu.sendMessage(to, "Blacklist not detected!")
                                    return
                                for jj in lists:
                                    zarifoglu.kickoutFromGroup(to,[jj])
                                zarifoglu.sendMessage(msg.to,"Blacklist has been purge")
                        elif cmd == "newticket":
                            zarifoglu.reissueUserTicket()
                            userid = "https://line.me/ti/p/~" + zarifoglu.profile.userid
                            zarifoglu.sendMessage(to, "New Ticket :\n"+str(userid))
                        elif cmd == "conblock":
                            if msg._from in zarifogluMID:
                                blockedlist = zarifoglu.getBlockedContactIds()
                                if blockedlist == []:
                                    zarifoglu.sendMessage(to, "Empty !")
                                else:
                                    for kontak in blockedlist:
                                        zarifoglu.sendMessage(to, text=None, contentMetadata={'mid': kontak}, contentType=13)                                        
                        elif cmd.startswith("reject "):
                            number = removeCmd("reject", text)
                            groups = zarifoglu.getGroupIdsInvited()
                            try:
                                group = groups[int(number)-1]
                                G = zarifoglu.getGroup(group)
                                try:
                                    zarifoglu.rejectGroupInvitation(G.id)
                                except:
                                    zarifoglu.rejectGroupInvitation(G.id)
                                zarifoglu.generateReplyMessage(msg.id)
                                zarifoglu.sendReplyMessage(msg.id, to, "„Äå Reject „Äç\n\nGroup : " + G.name)
                            except Exception as error:
                                zarifoglu.sendMessage(to, str(error))
                        elif cmd.startswith("flood ") and sender == zarifogluMID:
                            dzin = removeCmd("flood", text)
                            line = dzin.split(" ")
                            count = int(line[1])
                            text1 = removeCmd("flood"+str(line[0])+" "+str(count)+" ", text)
                            text2 = count * (text1+"\n")
                            if line[0] == "on":
                                if count <= 1000:
                                    for a in range(count):
                                        data = {
                                                "type": "flex",
                                                "altText": settings["bayrak"],
                                                "contents": {
  "styles": {
    "body": {
      "backgroundColor": "{}".format(setbot["background"])
    },
    "footer": {
      "backgroundColor": "{}".format(setbot["separator"])
    }
  },
  "type": "bubble",
  "body": {
    "contents": [
      {
        "contents": [
          {
            "url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus),
            "type": "image"
          },
          {
            "type": "separator",
            "color": "{}".format(setbot["separator"])
          },
          {
            "url": str(zarifoglu.getProfileCoverURL(sender)),
            "type": "image"
          }
        ],
        "type": "box",
        "spacing": "md",
        "layout": "horizontal"
      },
      {
        "type": "separator",
        "color": "{}".format(setbot["separator"])
      },
      {
        "contents": [
          {
            "text": str(text1),
            "size": "md",
            "align": "center",
            "color": "{}".format(setbot["text"]),
            "wrap": True,
            "weight": "bold",
            "type": "text"
          }
        ],
        "type": "box",
        "layout": "vertical"
      }
    ],
    "type": "box",
    "spacing": "md",
    "layout": "vertical"
  }
}
}
                                        sendTemplate(to, data)
                                        time.sleep(4)
                                else:
                                    zarifoglu.sendMessage(to, "Max 1000.")
                            if line[0] == "off":
                                if count <= 1000:
                                    zarifoglu.sendMessage(to, str(text2))
                                else:
                                    zarifoglu.sendMessage(to, "Max 1000.")
                        elif cmd == "status":
                            txt = "<...> Durum :"
                            txt += "\n"
                            if settings["autoAdd"] == True:txt += "\nAutoadd: ON ‚úîÔ∏è"
                            else:txt += "\nAutoadd: OFF üî¥"
                            if blocked["autoBlock"] == True:txt += "\nAutoBlock: ON ‚úîÔ∏è"
                            else:txt += "\nAutoBlock: OFF üî¥"
                            if settings["autoJoin"] == True:txt += "\nAutoJoin: ON ‚úîÔ∏è"
                            else:txt += "\nAutoJoin: OFF üî¥"
                            #if to in wait["GROUP"]["WM"]["AP"]:txt += "\nWelcome: ON ‚úîÔ∏è"
                            #else:txt += "\nWelcome: OFF üî¥"
                            #if to in wait["GROUP"]["AR"]["AP"]:txt += "\nAutoRespon: ON ‚úîÔ∏è"
                            #else:txt += "\nAutoRespon: OFF üî¥"
                            #if to in wait["GROUP"]["LM"]["AP"]:txt += "\nLeave: ON ‚úîÔ∏è
                            #else:txt += "\nLeave: OFF üî¥"
                            if wmin["wMessage"] == True:txt += "\nWelcomemsg ON ‚úîÔ∏è"
                            else:txt += "\nWelcomemsg OFF üî¥"
                            if lvin["lMessage"] == True:txt += "\nLeavemsg ON ‚úîÔ∏è"
                            else:txt += "\nLeavemsg OFF üî¥"
                            if settings["notag"] == True:txt += "\nAntitag ON ‚úîÔ∏è"
                            else:txt += "\nAntitag OFF üî¥"
                            if temptag["stealtag"] == True:txt += "\nRespontag ON ‚úîÔ∏è"
                            else:txt += "\nRespontag OFF üî¥"
                            if sets["tagsticker"] == True:txt += "\nResponsticker ON ‚úîÔ∏è"
                            else:txt += "\nResponsticker OFF üî¥"
                            if mcroom["leaveMC"] == True:txt += "\nMc ON ‚úîÔ∏è"
                            else:txt += "\nMc OFF üî¥"
                            if settings["autoReply"] == True:txt += "\nSleepMode ON ‚úîÔ∏è"
                            else:txt += "\nSleepMode OFF üî¥"
                            if komen["komenan"] == True:txt += "\nLikePost ON ‚úîÔ∏è"
                            else:txt += "\nLikePost OFF üî¥"
                            if settings["unsendMessage"] == True:txt += "\nResendchat ON ‚úîÔ∏è"
                            else:txt += "\nResendchat OFF üî¥"
                            #if to in wait["notificationCallPrank"]:txt += "\nPrankCall ON ‚úîÔ∏è"
                            #else:txt += "\nPrankCall OFF üî¥"
                            if to in wait["notificationCall"]:txt += "\nGroupCall ON ‚úîÔ∏è"
                            else:txt += "\nGroupCall OFF üî¥"
                            if selam["selam"]:txt += "\nSelam ON ‚úîÔ∏è"
                            else:txt += "\nSelam OFF üî¥"
                            Metalsettings(to, str(txt))
                        elif cmd == "settings":
                            txt = "<...> Ayarlar :"
                            txt += "\n ‚å¨ AutoAdd"
                            txt += "\n ‚å¨ AutoRead"
                            txt += "\n ‚å¨ AutoJoin"
                            txt += "\n ‚å¨ Welcomemsg"
                            txt += "\n ‚å¨ Leavemsg"
                            txt += "\n ‚å¨ AutoRespon"
                            txt += "\n ‚å¨ Welcomemsg On/Off"
                            txt += "\n ‚å¨ Welcomemsg set [text]"
                            txt += "\n ‚å¨ Leavemsg On/Off"
                            txt += "\n ‚å¨ Leavemsg set [text]"
                            txt += "\n ‚å¨ Reader On/Off"
                            txt += "\n ‚å¨ Reader msg set [text]"
                            txt += "\n ‚å¨ SleepMode On/Off"
                            txt += "\n ‚å¨ SleepMode msg set [text]"
                            txt += "\n ‚å¨ Like On/Off"
                            txt += "\n ‚å¨ Commentpost: [text]"
                            txt += "\n ‚å¨ Mc On/Off"
                            txt += "\n ‚å¨ Antitag On/Off"
                            txt += "\n ‚å¨ Sticker On/Off"
                            txt += "\n ‚å¨ Autoblock msg set [text]"
                            txt += "\n ‚å¨ Autoblock On/Off"
                            txt += "\n ‚å¨ Responsticker On/Off"
                            txt += "\n ‚å¨ Add responsticker"
                            txt += "\n ‚å¨ Respon On/Off"
                            txt += "\n ‚å¨ Respon msg set [text]"
                            txt += "\n ‚å¨ Resendchat On/Off"
                            #txt += "\nPrankcall On/Off"
                            txt += "\n ‚å¨ Groupcall On/Off"
                            txt += "\n ‚å¨ Selam On/Off"
                            txt += "\n ‚å¨ Welcometemp On/Off"
                            txt += "\n ‚å¨ Welcometemp msg set [text]"
                            txt += "\n ‚å¨ Radar On/Off"
                            txt += "\n ‚å¨ Radar msg set [text]"
                            #txt += "\nVcg set[enter][text]"
                            #txt += "\nFcg set[enter][text]"
                            Metalsettings(to, str(txt))
                        elif cmd == "profile":
                            ret = "Type: Profile\n\n"
                            ret += "  ‚å¨ Changedp\n"
                            ret += "  ‚å¨ Change cover\n"
                            ret += "  ‚å¨ Changedp video\n"
                            ret += "  ‚å¨ Changevideourl <link>\n"
                            ret += "  ‚å¨ Updatename <name>\n"
                            ret += "  ‚å¨ Updatestatus <name>"
                            Metalsettings(to, str(ret))
                        elif cmd == "banning":
                            ret = "Type: Banning\n\n"
                            ret += "  ‚å¨ Tban <@>\n"
                            ret += "  ‚å¨ Tunban <@>\n"
                            ret += "  ‚å¨ Tbanlist \n"
                            ret += "  ‚å¨ Notag on/off\n"
                            ret += "  ‚å¨ Status notag\n"
                            ret += "  ‚å¨ Remove notag\n"
                            ret += "  ‚å¨ Blacklist\n"
                            ret += "  ‚å¨ Purge\n"
                            ret += "  ‚å¨ Conban\n"
                            ret += "  ‚å¨ Clearban"
                            Metalsettings(to, str(ret))
                        elif cmd == "utility":
                            ret = "Type: Utility\n\n"
                            ret += "  ‚å¨ Autoread\n"
                            ret += "  ‚å¨ Autorespon\n"
                            ret += "  ‚å¨ Autojoin\n"
                            ret += "  ‚å¨ Leavemsg\n"
                            ret += "  ‚å¨ Welcomemsg\n"
                            ret += "  ‚å¨ Autoadd"
                            Metalsettings(to, str(ret))
                        elif cmd == "kick":
                            ret = "Type: Kick\n\n"
                            ret += "  ‚å¨ Multikick <num><@>\n"
                            ret += "  ‚å¨ Kick <@>\n"
                            ret += "  ‚å¨ Slain <@>\n"
                            ret += "  ‚å¨ Ass <@>\n"
                            ret += "  ‚å¨ Ulti <@>\n"
                            ret += "  ‚å¨ Nk <@>\n"
                            ret += "  ‚å¨ Skill <name>\n"
                            ret += "  ‚å¨ Kickass <name>\n"
                            ret += "  ‚å¨ Cleanse\n"
                            ret += "  ‚å¨ Bypass\n"
                            ret += " ‚å¨  Reinv <@>"
                            Metalsettings(to, str(ret))
                        elif cmd == "steal":
                            ret = "Type: Stealing\n\n"
                            ret += "  ‚å¨ Rename <@> | <name>\n"
                            ret += "  ‚å¨ Pict <@>\n"
                            ret += "  ‚å¨ Cover <@>\n"
                            ret += "  ‚å¨ Profile <@>\n"
                            ret += "  ‚å¨ Video <@>\n"
                            ret += "  ‚å¨ Name <@>\n"
                            ret += "  ‚å¨ Bio <@>\n"
                            ret += "  ‚å¨ Contact <@>\n"
                            ret += "  ‚å¨ Midclone <mid>\n"
                            ret += "  ‚å¨ Cloneprofile <@>\n"
                            ret += "  ‚å¨ Restoreprofile\n"
                            ret += "  ‚å¨ Backupprofile\n"
                            ret += "  ‚å¨ Mid <@>\n"
                            ret += "  ‚å¨ Whois <name>\n"
                            ret += "  ‚å¨ Status <name>"
                            Metalsettings(to, str(ret))
                        elif cmd == "spam":
                            ret = "Type: Spaming\n\n"
                            ret += "Spam Text\n"
                            ret += "  ‚å¨ Spam 1 [1][enter|text]\n"
                            ret += "Spam Gift\n"
                            ret += "  ‚å¨ Spam 2 [1][@|]\n"
                            ret += "Spam Contact\n"
                            ret += "  ‚å¨ Spam 3 [1]<@>\n"
                            ret += "Spam Mention\n"
                            ret += "  ‚å¨ Spam 4 [1]<@>\n"
                            ret += "Spam Pm\n"
                            ret += "  ‚å¨ Pc [1] <@>[enter|text]"
                            Metalsettings(to, str(ret))
                        elif cmd == "translate":
                            ret = "Type: Translator\n\n"
                            ret += "  ‚å¨ T√ºrk√ße: <Yazƒ±>\n"
                            ret += "  ‚å¨ Ingilizce: <Yazƒ±>\n"
                            ret += "  ‚å¨ Japonca: <Yazƒ±>\n"
                            ret += "  ‚å¨ Korece: <Yazƒ±>\n"
                            ret += "  ‚å¨ Taylandca: <Yazƒ±>\n"                            
                            ret += "  ‚å¨ Arap√ßa: <Yazƒ±>\n"
                            ret += "  ‚å¨ Malayca: <Yazƒ±>\n"
                            ret += "  ‚å¨ Fransƒ±zca: <Yazƒ±>\n"
                            ret += "  ‚å¨ Italyanca: <Yazƒ±>\n"
                            ret += "  ‚å¨ √áince: <Yazƒ±>\n"
                            ret += "  ‚å¨ Hint√ße: <Yazƒ±>\n"
                            ret += "  ‚å¨ Inpanyolca: <Yazƒ±>\n"
                            ret += "  ‚å¨ Endonezce: <Yazƒ±>\n"
                            ret += "  ‚å¨ Rus√ßa: <Yazƒ±>"
                            Metalsettings(to, str(ret))
                        elif cmd == "images":
                            ret = "Type: Images\n\n"
      #                      ret += "  ‚å¨ Goimage <text>\n"
                         #   ret += "  ‚å¨ Wallpaper <text>\n"
                            ret += "  ‚å¨ Image <text>\n"
         #                   ret += "  ‚å¨ Food <text>\n"
         #                   ret += "  ‚å¨ Drawwindow <text>\n"
          #                  ret += "  ‚å¨ Drawlight <text>\n"
      #                      ret += "  ‚å¨ Drawsoupletters <text>\n"
      #                      ret += "  ‚å¨ Drawcookies <text>\n"
        #                    ret += "  ‚å¨ Retro-text-text-text\n"
           #                 ret += "  ‚å¨ Fmylife\n"
         #                   ret += "  ‚å¨ Azab <name>\n"
                            ret += "  ‚å¨ Cosplay <name>\n"
                            ret += "  ‚å¨ Viloid <name>\n"
                            ret += "  ‚å¨ Imagetext <query>\n"
                            ret += "  ‚å¨ Danbooru [page]\n"
                            ret += "  ‚å¨ Nhentai page [number/number]"
                            Metalsettings(to, str(ret))
                        elif cmd == "feature":
                            ret = "Type: Feature\n\n"
                            ret += "  ‚å¨ M√ºzik <query>\n"
                            ret += "  ‚å¨ Temalar <query>\n"
                            ret += "  ‚å¨ Stickerlar <query>\n"
                            ret += "  ‚å¨ Brainly <query>\n"
                            ret += "  ‚å¨ Astronotnow\n"
                            ret += "  ‚å¨ Karakter <ƒ∞sim>\n"
                            ret += "  ‚å¨ Urban <query>\n"
                            ret += "  ‚å¨ Zalgo <name>\n"
                            ret += "  ‚å¨ Dick <name>\n"
                            ret += "  ‚å¨ Tits <name>\n"
                            ret += "  ‚å¨ Anus <name>\n"
                            ret += "  ‚å¨ Vagina <name>\n"
                            ret += "  ‚å¨ Porns <query>\n"
                            ret += "  ‚å¨ Xxx <query>\n"
                            ret += "  ‚å¨ Checkip [ip]\n"
                            ret += "  ‚å¨ Gif <query>"
                            Metalsettings(to, str(ret))
                        elif cmd == "social":
                            ret = "Type: Social\n\n"
      #                      ret += "  ‚å¨ Kaskus <query>\n"
                            ret += "  ‚å¨ Webtoon\n"
     #                       ret += "  ‚å¨ Google <text>\n"
                            ret += "  ‚å¨ Wikipedia <text>\n"
                            ret += "  ‚å¨ Quran\n"
                            ret += "  ‚å¨ Topnews\n"
       #                     ret += "  ‚å¨ Tvschedule\n"
                            ret += "  ‚å¨ Smuleprofile <username>\n"
                            ret += "  ‚å¨ Smulemp4 <link>\n"
                            ret += "  ‚å¨ Smulemp3 <link>\n"
                            ret += "  ‚å¨ Smulefile <link>\n"
                            ret += "  ‚å¨ Youtubesearch <query>\n"
                            ret += "  ‚å¨ Youtubemp3 <link>\n"
                            ret += "  ‚å¨ Youtubemp4 <link>\n"
                            ret += "  ‚å¨ Fileytmp3 <link>\n"
                            ret += "  ‚å¨ Fileytmp4 <link>\n"
                            ret += "  ‚å¨ Instaprofile <username>\n"
                            ret += "  ‚å¨ Instapost [username page]\n"
      #                      ret += "  ‚å¨ Instagram <username>\n"
  #                          ret += "  ‚å¨ Searchapp <query>\n"
                            ret += "  ‚å¨ Kbbi word <text>\n"
                            ret += "  ‚å¨ Kbbi page <num>\n"
                            #ret += "  ‚å¨ Joox <query>"
                            Metalsettings(to, str(ret))
                        elif cmd == "group":
                            ret = "Type: Group\n\n"
                            ret += "  ‚å¨ Favoritelist\n"
                            ret += "  ‚å¨ Blocklist\n"
                           # ret += "  ‚å¨ Square\n"
                            ret += "  ‚å¨ Lurk\n"
                            ret += "  ‚å¨ Find <@>\n"
                            ret += "  ‚å¨ Song√∂r√ºlme <@>\n"
                            ret += "  ‚å¨ Rejectall\n"
                            ret += "  ‚å¨ Cancelall\n"
                            ret += "  ‚å¨ Gcall <num><@>\n"
                            ret += "  ‚å¨ Gcall <num>\n"
                            ret += "  ‚å¨ Groups\n"
                            ret += "  ‚å¨ Openqr\n"
                            ret += "  ‚å¨ Closeqr\n"
                            ret += "  ‚å¨ Invite\n"
                            ret += "  ‚å¨ Inviteid [Idline]\n  ‚å¨ Invite <@>\n"
                            ret += "  ‚å¨ Countdown <num>\n"
                            ret += "  ‚å¨ Countforward <num>\n"
                            ret += "  ‚å¨ Creategroup <name>\n"
                            ret += "  ‚å¨ Changegn <name>\n"
                            ret += "  ‚å¨ Get note\n"
                            ret += "  ‚å¨ Get note <num>\n"
                            ret += "  ‚å¨ Mentionnote\n"
                            ret += "  ‚å¨ Create note <text>\n"
                            ret += "  ‚å¨ Get album\n"
                            ret += "  ‚å¨ Get album [1] [<|>|-|num]\n"
                            ret += "  ‚å¨ Changedp group"
                            Metalsettings(to, str(ret))
                        elif cmd == "timeline":
                            ret = "Type: Timeline\n\n"
                            ret += "  ‚å¨ Updatepost <text>\n"
                            ret += "  ‚å¨ Update post [1][time]<text>\n"
                            ret += "  ‚å¨ Timeline <@>\n"
                            ret += "  ‚å¨ Likepost <@>\n"
                            ret += "  ‚å¨ Share allpost <num><@>"
                            Metalsettings(to, str(ret))
                        elif cmd == "github":
                            ret = "Type: Github\n\n"
                            ret += "  ‚å¨ Githubprofile <username>\n"
                            ret += "  ‚å¨ Githubfollowing <username>\n"
                            ret += "  ‚å¨ Githubfollowers <username>\n"
                            ret += "  ‚å¨ Githubrepo <username>\n"
                            ret += "  ‚å¨ Githuzip [name|name]"
                            Metalsettings(to, str(ret))
                        elif cmd == "mention":
                            ret = "Type: Mention\n\n"
                            ret += "  ‚å¨ Mention [num|>|<|1-5]\n"
                            ret += "  ‚å¨ Mentionname [A-z]\n"
                            ret += "  ‚å¨ Mention [A-z]\n"
                            ret += "  ‚å¨ Mention [2|@]\n"
                            ret += "  ‚å¨ Mentionall\n"
                            ret += "  ‚å¨ Yenimention <...>\n"
                            ret += "  ‚å¨ Check mention"
                            Metalsettings(to, str(ret))
                        elif cmd == "friend":
                            ret = "Type: Friend\n\n"
                            ret += "  ‚å¨ Friendlist\n"
                            ret += "  ‚å¨ Friend info <num>\n"
                            ret += "  ‚å¨ Clearfriend\n"
                            ret += "  ‚å¨ Delete <pm>\n"
                            ret += "  ‚å¨ Delfriend <@>\n"
                            ret += "  ‚å¨ Del friend <num>\n"
                            ret += "  ‚å¨ Addfriend <@>"
                            Metalsettings(to, str(ret))
                        elif cmd == "protect":
                            ret = "Type: Protection\n\n"
                            ret += "  ‚å¨ Protectionall On/Off\n"
                            ret += "  ‚å¨ Namelock On/Off\n"
                            ret += "  ‚å¨ Denyinvite On/Off\n"
                            ret += "  ‚å¨ Promember On/Off\n"
                            ret += "  ‚å¨ Blockqr On/Off\n"
                            ret += "  ‚å¨ Status Namelock\n"
                            ret += "  ‚å¨ Status Denyinvite\n"
                            ret += "  ‚å¨ Status Promember\n"
                            ret += "  ‚å¨ Status Blockqr\n"
                            ret += "  ‚å¨ Remove Namelock\n"
                            ret += "  ‚å¨ Remove Denyinvite\n"
                            ret += "  ‚å¨ Remove Promember\n"
                            ret += "  ‚å¨ Remove Blockqr"
                            Metalsettings(to, str(ret))
                        elif cmd == "wordban":
                            ret = "Type: Wordban\n\n"
                            ret += "  ‚å¨ Wordbanadd <text>\n"
                            ret += "  ‚å¨ Wordbandel <text>\n"
                            ret += "  ‚å¨ List wordban"
                            Metalsettings(to, str(ret))
                        elif cmd == "quran":
                            ret = "Type: Quran\n\n"
                            ret += "Daftar Surah\n"
                            ret += "  ‚å¨ Quranlist\n"
                            ret += "Get Ayat Qur'an\n"
                            ret += "  ‚å¨ Qur'an [numsurah]\n"
                            ret += "  ‚å¨ Qur'an [numsurah] [1|<|>|-]"
                            Metalsettings(to, str(ret))
                        elif cmd == "bcast":
                            ret = "< Broadcast >\n\n"
                            ret += "  ‚å¨ Bc <text>\n"
                            ret += "  ‚å¨ Bc2 <text>\n"
                            ret += "  ‚å¨ Bc3 <text>\n"
                            ret += "  ‚å¨ Bc4 <text>\n"
                            ret += "  ‚å¨ Bc5 <text>\n"
                            ret += "  ‚å¨ Bc6 <text>\n"
                            ret += "  ‚å¨ Bc7 <text>\n"
                            ret += "  ‚å¨ Bc8 <text>\n"
                            ret += "  ‚å¨ Bc9 <text>\n"
                            ret += "  ‚å¨ Bc10 <text>\n"
                            ret += "  ‚å¨ Bcontact-[mid]-[Yazƒ±]\n"
                            ret += "  ‚å¨ Payla≈ü-PostID'si\n"
                            ret += "  ‚å¨ Gbroadcast <Yazƒ±>\n"
                            ret += "  ‚å¨ Fbroadcast <Yazƒ±>\n"
                            ret += "  ‚å¨ Allbroadcast <Yazƒ±>\n"
                            ret += "  ‚å¨ Flexgbc <Yazƒ±>\n"
                            ret += "  ‚å¨ Flexfbc <Yazƒ±>\n"
                            ret += "  ‚å¨ Groupcastvoice <Yazƒ±>\n"
                            ret += "  ‚å¨ Friendcastvoice <Yazƒ±>"
                            Metalsettings(to, str(ret))
                        elif cmd == "webtozon":
                            ret = "Drama :\n  ‚å¨ Webtoon drama\n  ‚å¨ Webtoon drama <num>\n"
                            ret += "Fantasi :\n  ‚å¨ Webtoon fantasi\n  ‚å¨ Webtoon fantasi <num>\n"
                            ret += "Comedy :\n  ‚å¨ Webtoon comedy\n  ‚å¨ Webtoon comedy <num>\n"
                            ret += "Slice Of Life :\n  ‚å¨ Webtoon sol\n  ‚å¨ Webtoon sol <num>\n"
                            ret += "Romance :\n  ‚å¨ Webtoon romance\n  ‚å¨ Webtoon romancethriller <num>\n"
                            ret += "Thriller :\n  ‚å¨ Webtoon thriller\n  ‚å¨ Webtoon thriller <num>\n"
                            ret += "Horror :\n  ‚å¨ Webtoon horror\n  ‚å¨ Webtoon horror <num>"
                            Metalsettings(to, str(ret))
                        elif cmd == "list":
                            ret ="Type: List\n\n  ‚å¨ Mysticker\n  ‚å¨ Add sticker „Äåname„Äç\n  ‚å¨ Del sticker „Äåname„Äç\n  ‚å¨ List sticker\n"
                            ret +="  ‚å¨ Add pict „Äåname„Äç\n  ‚å¨ Del pict „Äåname„Äç\n  ‚å¨ Changepict „Äåname„Äç\n  ‚å¨ List pict\n  ‚å¨ Sendpict „Äånumb„Äç „Äåname„Äç\n"
                            ret +="  ‚å¨ Add sflex„Äåname„Äç\n  ‚å¨ Del  sflex„Äåname„Äç\n  ‚å¨ List sflex\n"
                            ret +="  ‚å¨ Addaudio„Äåname„Äç\n  ‚å¨ Delaudio„Äåname„Äç\n  ‚å¨ Audiolist\n"
                            ret +="  ‚å¨ Addtext#„Äåname/text „Äç\n  ‚å¨ Deltext„Äåname„Äç\n  ‚å¨ List text\n"
                            ret +="  ‚å¨ Addcontact„Äåname „Äç\n  ‚å¨ Delcontact„Äåname„Äç\n  ‚å¨ List contact\n  ‚å¨ Template color"
                            Metalsettings(to, str(ret))
                        elif cmd == "textspeech":
                            ret = "How to use ?\n"
                            ret += "Use command :\n  ‚å¨ Say *lang* *text*\n"
                            ret += "Example :\n"
                            ret += "  ‚å¨ Say id Turkey cool\n"
                            ret += "How to find language?\n"
                            ret += "Use command :\n  ‚å¨ Say language"
                            Metalsettings(to, str(ret))
                        elif cmd == "memegen":
                            ret = "How to use ?\n"
                            ret += "Use command :\n  ‚å¨ Creatememe *text*|*text*|*template*\n"
                            ret += "Example :\n"
                            ret += "  ‚å¨ Creatememe Turkey|ganteng|buzz\n"
                            ret += "How to find template?\n"
                            ret += "Use command :\n  ‚å¨ Template memegen"
                            Metalsettings(to, str(ret))

                        elif cmd == "self":
                            ret = "Type: My Self\n\n"
                            ret += "  ‚å¨ Mypicture\n"
                            ret += "  ‚å¨ Mycover\n"
                            ret += "  ‚å¨ Mycontact\n"
                            ret += "  ‚å¨ Mymid\n"
                            ret += "  ‚å¨ Myprofile\n"
                            ret += "  ‚å¨ Myvideo\n"
                            ret += "  ‚å¨ Me\n"
                            ret += "  ‚å¨ Me2\n"
                            ret += "  ‚å¨ Me3\n"
                            ret += "  ‚å¨ Me4\n"
                            ret += "  ‚å¨ Me5\n"
                            ret += "  ‚å¨ Me6\n"
                            ret += "  ‚å¨ Me7\n"
                            ret += "  ‚å¨ Me8\n"
                            ret += "  ‚å¨ Me9\n"
                            ret += "  ‚å¨ Me10"
                            Metalsettings(to, str(ret))

                        elif cmd == "anlƒ±k":
                            ret = " < Anlƒ±k Komutlarƒ± >\n\n"
                            ret += "  ‚å¨ Autoread On 3\n"
                            ret += "  ‚å¨ Autoread Off 3\n"
                            ret += "  ‚å¨ Vir√ºs\n"
                            ret += "  ‚å¨ Crashhit\n"
                            ret += "  ‚å¨ Etiket\n"
                            ret += "  ‚å¨ Mention Mc\n"
                            ret += "  ‚å¨ Sesegelin [Sayƒ±]\n"
                            ret += "  ‚å¨ Sese√ßƒ±k [Sayƒ±] [@]\n"
                            ret += "  ‚å¨ Flood on 1 Yazƒ±\n"
                            ret += "  ‚å¨ Flood2 on 1 Yazƒ±\n"
                            ret += "  ‚å¨ Flood3 on 1 Yazƒ±\n"
                            ret += "  ‚å¨ Admin:ekle @\n"
                            ret += "  ‚å¨ Admin:sil @\n"
                            ret += "  ‚å¨ Adminlistesi\n"
                            ret += "  ‚å¨ Anlƒ±kdavet:on\n"
                            ret += "  ‚å¨ Anlƒ±kdavet:off\n"
                            ret += "  ‚å¨ 1.s√∂zayar:\n"
                            ret += "  ‚å¨ 2.s√∂zayar:\n"
                            ret += "  ‚å¨ 3.s√∂zayar:\n"
                            ret += "  ‚å¨ 4.s√∂zayar:\n"
                            ret += "  ‚å¨ 5.s√∂zayar:\n"
                            ret += "  ‚å¨ K√ºfret\n"
                            ret += "  ‚å¨ √ñzl√º S√∂z"
                            Metalsettings(to, str(ret))

                        elif cmd == "men√ºler":
                            ret = "Type: Men√º\n\n"
                            ret += "  ‚å¨ Pubgmod On\n"
                            ret += "  ‚å¨ √áukurmod On\n"
                            ret += "  ‚å¨ Legendmod On\n"
                            ret += "  ‚å¨ Bjkmod On\n"
                            ret += "  ‚å¨ Gsmod On\n"
                            ret += "  ‚å¨ Fbmod On"
                            Metal(to, str(ret))
                        elif cmd.startswith("spaminv "):
                          sep = text.split("spaminv ")[1]
                          name = str(sep.split("|")[0])
                          targets = str(sep.split("|")[1])
                          imTurkey = "spam.js name={} token={}".format(name, zarifoglu.authToken)
                          if len(targets.split(",")) > 0:
                            targets = targets.split(",")
                            for target in targets:
                              zarifoglu.findAndAddContactsByMid(target)
                              imTurkey += " uid={}".format(target)
                          else:
                            imTurkey += " uid={}".format(targets)
                          success = execute_js(imTurkey)
                          if success:zarifoglu.sendMessage(to,"Done")
                          else:zarifoglu.sendMessage(to,"Error")
                        elif cmd.startswith("Exec"):
                            if msg._from in myAdmin:
                                try:
                                    sep = text.split("\n")
                                    txt = text.replace(sep[0] + "\n","")
                                    exec(txt)
                                except:
                                    pass
                        if(cmd.startswith('youtube video ') or cmd.startswith('youtube audio ') or cmd.startswith('youtube info ')):
                            try:
                                texts = zarifoglu.adityasplittext(cmd,'s').split("|")
                                print(texts)
                                a = zarifoglu.adityarequestweb("https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=25&q="+texts[0]+"&type=video&key=AIzaSyAF-_5PLCt8DwhYc7LBskesUnsm1gFHSP8")
                                if len(texts) == 1:dfghj = zarifoglu.adityasplittext(msg.text,'s').replace('https://youtu.be/','').replace('youtube video ','').replace('youtube audio ','').replace('youtube info ','').replace('https://www.youtube.com/watch?v=','');meta = youtube_dl.YoutubeDL({}).extract_info(dfghj, download=False)
                                if len(texts) >= 2:dfghj = a["items"][int(texts[1])-1]["id"]['videoId'];dfghj = 'https://www.youtube.com/watch?v='+a["items"][int(texts[1])-1]["id"]['videoId'];meta = youtube_dl.YoutubeDL({}).extract_info(dfghj, download=False)
                                if cmd.startswith('youtube info '):
                                    if(len(texts) == 1):dfghj = zarifoglu.adityasplittext(msg.text,'s').replace('youtu.be/','youtube.com/watch?v=').replace('info ','');meta = youtube_dl.YoutubeDL({}).extract_info(dfghj, download=False)
                                    if(len(texts) == 2):dfghj = 'https://www.youtube.com/watch?v='+a["items"][int(texts[1])-1]["id"]['videoId'];meta = youtube_dl.YoutubeDL({}).extract_info(dfghj, download=False)
                                    if meta['description'] == '':hjk = ''
                                    else:hjk = '\nDescription:\n{}'.format(meta['description'])
                                    t = ' „Äå Youtube „Äç\nTitle: {}{}\n\nLike: {}  Dislike: {}\nViewers: {}'.format(meta['title'],hjk,humanize.intcomma(meta['like_count']),humanize.intcomma(meta['dislike_count']),humanize.intcomma(meta['view_count']))
                                    lol(to,t)
                                    s = meta['thumbnail']
                                    anunanu(to,s,liffnya)
                                if(cmd.startswith("youtube video ") or cmd.startswith("youtube audio ")):
                                    kk = random.randint(0,999)
                                    if(len(texts) == 1):dfghj = zarifoglu.adityasplittext(msg.text,'s').replace('youtu.be/','youtube.com/watch?v=').replace('audio ','').replace('video ','');meta = youtube_dl.YoutubeDL({}).extract_info(dfghj, download=False)
                                    if len(texts) == 2:dfghj = 'https://www.youtube.com/watch?v='+a["items"][int(texts[1])-1]["id"]['videoId'];print(dfghj);meta = youtube_dl.YoutubeDL({}).extract_info(dfghj, download=False)
                                    hhhh = ' „Äå Youtube „Äç\nJudul: {}\nDuration: {}\nEx: {}\nStatus: Waiting... For Upload'.format(meta['title'],meta['duration'],'1270*720')
                                    lol(to,hhhh)
                                    links = cytmp4(dfghj);links = 'https://'+google_url_shorten(links)
                                    linkss = cytmp3(dfghj);linkss = 'https://'+google_url_shorten(linkss)
                                    sendCarousel(to,YoutubeTempat(liffnya,to,meta,dfghj,links,linkss))
                                    if(cmd.startswith("youtube video ")):sendCarousel(to,{"messages": [{"type": "video","altText": "YouTube","originalContentUrl": links,"previewImageUrl": meta['thumbnail']}]})
                                    if(cmd.startswith("youtube audio ")):sendCarousel(to,{"messages": [{"type": "audio","altText": "YouTube","originalContentUrl": linkss,"duration": meta['duration']*1000}]})
                            except Exception as e:zarifoglu.sendMessage(to, str(e))
                        if cmd.startswith("goimage "):
                            query = cmd.replace("goimage ","")
                            cond = query.split("|")
                            search = str(cond[0])
                            result = requests.get("https://xeonwz.herokuapp.com/images/google.api?q={}".format(str(search)))
                            data = result.text
                            data = json.loads(data)
                            if data["content"] != []:
                                ret_ = []
                                for i in data["content"]:
                                    if '.gif' in i:
                                        links = 'line://app/1606644641-DAwvRm5p?type=images&imgs='
                                    else:
                                        links = 'line://app/1606644641-DAwvRm5p?type=image&img='
                                    url = i
                                    ret_.append({"type": "bubble","header": {"type": "box","layout": "vertical","contents": [{"type": "text","text": "Google Image","weight": "bold"}]},"hero": {"type": "image","url": "https://app-1536548990.000webhostapp.com/apis.php?images="+url,"size": "full","aspectRatio": "2:1","aspectMode": "fit"},"body": {"type": "box","layout": "vertical","contents": [{"type": "text","text": "TAP ON THE BUTTON","weight": "bold","size":"md","margin":"md"},{"type":"separator","color":"#000000"}]},"footer": {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "horizontal","contents": [{"type": "button","flex": 2,"style": "primary","color": "#000000","height": "sm","action": {"type": "uri","label": "LINK","uri": "{}{}".format(liffnya['ttt'],url)}}, {"flex": 3,"type": "button","margin": "sm","style": "primary","color": "#000000","height": "sm","action": {"type": "uri","label": "SEND IMAGE","uri": links+url}}]}]}})
                                k = len(ret_)//10
                                for aa in range(k+1):
                                    data = {"messages": [{"type": "flex","altText": "Google Image","contents": {"type": "carousel","contents": ret_[aa*10 : (aa+1)*10]}}]}
                                    sendCarousel(to,data)
                        if cmd.startswith('joox ') or cmd.startswith('lyric joox '):
                            anu = str(cmd.replace('joox ',''))
                            if cmd.startswith('joox '):
                                a = requests.get('http://api-jooxtt.sanook.com/web-fcgi-bin/web_search?country=id&lang=en&search_input={}&sin=10&ein=60'.format(str(cmd.replace('joox ','')))).json()
                                ret_ = []
                                songID = []
                                for i in a['itemlist']:
                                    songID.append(i['songid'])
                                    b = requests.get('http://api-jooxtt.sanook.com/web-fcgi-bin/web_get_songinfo?country=id&lang=en&songid={}&https_only=1'.format(i['songid'])).json()
                                    linkss = (b['mp3Url'])
                                    ret_.append(
                                        {
                                            "type": "bubble",
                                            "header": {
                                                "type": "box",
                                                "layout": "horizontal",
                                                "contents": [
                                                    {
                                                        "type": "text",
                                                        "text": "JOOX",
                                                        "weight": "bold",
                                                        "color": "#aaaaaa",
                                                        "size": "sm"
                                                    }
                                                ]
                                            },
                                        "hero": {
                                            "type": "image",
                                            "url": b['imgSrc'],
                                            "size": "full",
                                            "aspectRatio": "20:13",
                                            "aspectMode": "fit",
                                            "action": {
                                                "type": "uri",
                                                "uri": 'https://line.me/ti/p/zMankMvx69'
                                            }
                                        },
                                        "body": {
                                            "type": "box",
                                            "layout": "vertical",
                                            "contents": [
                                                {
                                                    "type": "box",
                                                    "layout": "vertical",
                                                    "margin": "lg",
                                                    "spacing": "sm",
                                                    "contents": [
                                                        {
                                                           "type": "box",
                                                            "layout": "baseline",
                                                            "spacing": "sm",
                                                            "contents": [
                                                                {
                                                                    "type": "text",
                                                                    "text": "Title",
                                                                    "color": "#aaaaaa",
                                                                    "size": "sm",
                                                                    "flex": 1
                                                                },
                                                                {
                                                                    "type": "text",
                                                                    "text": "{}".format(b['msong']),
                                                                    "color": "#262423",
                                                                    "wrap": True,
                                                                    "size": "sm",
                                                                    "flex": 5
                                                                }
                                                            ]
                                                        }
                                                   ]
                                                }
                                            ]
                                        },
                                        "footer": {
                                            "type": "box",
                                            "layout": "horizontal",
                                            "spacing": "sm",
                                            "contents": [
                                            {
                                                    "type": "button",
                                                    "style": "link",
                                                    "height": "sm",
                                                    "action": {
                                                        "type": "uri",
                                                        "label": "Send Audio",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=audio&link={}".format(linkss)
                                                    }
                                                }
                                            ],
                                            "flex": 0
                                        }
                                    }
                                )
                            k = len(ret_)//10
                            for aa in range(k+1):
                                data = {"messages": [{"type": "flex","altText": "JOOX","contents": {"type": "carousel","contents": ret_[aa*10 : (aa+1)*10]}}]}
                                sendCarousel(to,data)
                        if cmd.startswith('lyric joox '):
                            bbb = cmd.replace('lyric joox ','').split('-')[0]
                            b = requests.get('http://api-jooxtt.sanook.com/web-fcgi-bin/web_search?country=id&lang=en&search_input={}&sin=10&ein=60'.format(bbb)).json()
                            songID = []
                            for c in b['itemlist']:
                                songID.append(c['songid'])
                            try:
                                d = requests.get("http://api-jooxtt.sanook.com/web-fcgi-bin/web_lyric?country=id&lang=en&musicid={}".format(songID[int(cmd.split('-')[1])-1])).json()
                                b = str(base64.b64decode(d['lyric']).decode('utf-8'))
                                lyric = b.replace('ti:','Title - ')
                                lyric = lyric.replace('ar:','Artist - ')
                                lyric = lyric.replace('al:','Album - ')
                                lyric = lyric.replace('by','')
                                lyric = lyric.replace('offset','')
                                lyric = lyric.replace("***Lyrics are from third-parties***\n","")
                                removeString = "[1235467890:.]"
                                for char in removeString:
                                    lyric = lyric.replace(char,'')
                                sendFlex(to, str(lyric))
                            except Exception as e:print(e)
                        if cmd.startswith("youtube search "):
                            a = zarifoglu.adityarequestweb("https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=25&q="+zarifoglu.adityasplittext(cmd,'s')+"&type=video&key=AIzaSyAF-_5PLCt8DwhYc7LBskesUnsm1gFHSP8")
                            if a["items"] != []:
                                no = 0
                                ret_ = []
                                for music in a["items"]:
                                    no += 1
                                    ret_.append({"type": "bubble","header": {"type": "box","layout": "horizontal","contents": [{"type": "text","text": "Youtube","weight": "bold","color": "#aaaaaa","size": "sm"}]},"hero": {"type": "image","url": 'https://i.ytimg.com/vi/{}/maxresdefault.jpg'.format(music['id']['videoId']),"size": "full","aspectRatio": "20:13","aspectMode": "fit","action": {"type": "uri","uri": 'https://www.youtube.com/watch?v=' +music['id']['videoId']}},"body": {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","margin": "lg","spacing": "sm","contents": [{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Title","color": "#aaaaaa","size": "sm","flex": 1},{"type": "text","text": "{}".format(music['snippet']['title']),"color": "#262423","wrap": True,"size": "sm","flex": 5}]}]}]},"footer": {"type": "box","layout": "horizontal","spacing": "sm","contents": [{"type": "button","style": "link","height": "sm","action": {"type": "uri","label": "Page","uri": 'https://www.youtube.com/watch?v=' +music['id']['videoId']}},{"type": "button","style": "link","height": "sm","action": {"type": "uri","label": "Video","uri": "{}youtubemp4%20https://www.youtube.com/watch?v={}".format(wait['ttt'],music['id']['videoId'])}},{"type": "button","style": "link","height": "sm","action": {"type": "uri","label": "Audio","uri": "{}youtubemp3%20https://www.youtube.com/watch?v={}".format(wait['ttt'],music['id']['videoId'])}},],}})
                                k = len(ret_)//10
                                for aa in range(k+1):
                                    data = {"type": "flex","altText": settings["bayrak"],"contents": {"type": "carousel","contents": ret_[aa*10 : (aa+1)*10]}}
                                    sendTemplate(to ,data)
                            else:
                                zarifoglu.sendMessage(to,"Type: Search Youtube Video\nStatus: "+str(self.adityasplittext(msg.text,'s'))+" not found")
                        if cmd.startswith('instagram ') or cmd.startswith('instagram post ') or cmd.startswith('instagram story ') or cmd.startswith('instagram postinfo '): igsearch(msg,liffnya,cmd)
                        elif cmd.startswith("danbooru "):                                                                                 	    
                                text_ = removeCmd("danbooru", text)
                                cond = text_.split(" ")                          
                                jml = int(cond[0])
                                url = requests.get("https://api.boteater.co/danbooru?page=1")
                                data = url.json()                              
                                for x in range(jml):
                                    def anu():
                                        for anu in data["result"]:
                                            result = str(anu["img"])
                                            zarifoglu.sendImageWithURL(to, result)
                                    treding = Thread(target=anu)
                                    treding.daemon = True
                                    treding.start()

                        elif cmd == "chatbot":
                            ret = "Type: ChatBot\n\n"
                            ret += "  ‚å¨ Chatbot on\n"
                            ret += "  ‚å¨ Chatbot off\n"
                            ret += "  ‚å¨ Chatbot list"
                            Myflex5(to, str(ret))
                        elif cmd == "groups":
                            key = settings["keyCommand"].title()
                            if settings['setKey'] == False:key = ''
                            gid = zarifoglu.getGroupIdsJoined()
                            sd = zarifoglu.getGroups(gid)
                            ret = "„Äå Group List „Äç\n"
                            no = 0
                            total = len(gid)
                            cd = "\n\nTotal {} Groups\n\n„Äå Command „Äç\n\n‚å¨ Trigger: [<|>|-|num]\n> ‚å¨ < Remote Mention\n   ‚å¨  groups (numb) tag <trigger>\n> ‚å¨ < Remote Kick\n   ‚å¨  groups (numb) kick <trigger>\n> ‚å¨ < Leave Groups\n   ‚å¨  leave groups <trigger>\n> ‚å¨ < Get QR\n   ‚å¨ openqr <trigger>\n> ‚å¨ < Unsent\n   ‚å¨ groups (numb) unsent (numb)\n> ‚å¨ < Cek Member\n   ‚å¨  groups (numb)\n   ‚å¨  groups (numb) mem <trigger>".format(total)
                            for G in sd:
                                member = len(G.members)
                                no += 1
                                ret += "\n{}. {} | {}".format(no, G.name[0:20], member)
                            ret += cd
                            k = len(ret)//10000
                            for aa in range(k+1):
                                MyFooter(to,'{}'.format(ret[aa*10000 : (aa+1)*10000]))
                        elif cmd.startswith("commentpost: "):
                            sep = text.split(" ")
                            txt = text.replace(sep[0] + " ","")
                            try:
                                settings["commentPost"] = txt
                                Myflex5(to, "Comment changed to :\n{}".format(txt))
                            except:
                                zarifoglu.sendMessage(to, "Failed")
                        elif cmd == "group pending":
                            groups = zarifoglu.getGroupIdsInvited()
                            ret_ = "„Äå Group Pending List „Äç\n"
                            no = 1
                            for gid in groups:
                                group = zarifoglu.getGroup(gid)
                                ret_ += "\n{}. {} | {}".format(str(no), str(group.name), str(len(group.members)))
                                no = (no+1)
                            ret_ += "\n\nTotal {} Pending".format(str(len(groups)))
                            ret_ += "\n\nUsage : Reject [num]"
                            Myflex5(to, str(ret_))
#==========================================
                        elif cmd == "conban":
                            if wait["blacklist"] == {}:
                                  zarifoglu.sendMessage(msg.to,"No blacklist")
                            else:
                                  ma = ""
                                  for i in wait["blacklist"]:
                                      ma = zarifoglu.getContact(i)
                                      zarifoglu.sendMessage(msg.to, None, contentMetadata={'mid': i}, contentType=13)
                        elif cmd == "mymid":
                            MyFooter(to, "„Äå Mid „Äç\n "+str(sender))
                        elif cmd == "myprofile":
                            contact = zarifoglu.getContact(zarifogluMID)
                            cu = zarifoglu.getProfileCoverURL(zarifogluMID)
                            path = str(cu)
                            image = "http://dl.profile.line-cdn.net/" + contact.pictureStatus
                            zarifoglu.sendImageWithURL(to, image)
                            zarifoglu.sendImageWithURL(to, path)
                            zarifoglu.sendMessage(to, "„Äå Profile „Äç\nMid : "+str(sender)+"\nName : "+str(contact.displayName)+"\nStatus :\n"+str(contact.statusMessage))
                        elif cmd == "myname":
                            h = zarifoglu.getContact(zarifogluMID)
                            Myflex5(to, "„Äå Name „Äç\n"+str(h.displayName))
                        elif cmd == "mybio":
                            h = zarifoglu.getContact(zarifogluMID)
                            Myflex5(to, "„Äå Status „Äç\n"+str(h.statusMessage))
                        elif cmd == "mycontact":
                            contact = zarifoglu.getContact(sender)
                            data={"type":"flex","altText":settings["bayrak"],"contents":{"type":"bubble","body": {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "horizontal","contents": [{"type": "box","layout": "vertical","contents": [{"type": "image","url": "https://obs.line-scdn.net/{}".format(contact.pictureStatus),"aspectMode": "cover","size": "full"}],"cornerRadius": "100px","width": "72px","height": "72px"},{"type": "box","layout": "baseline","contents": [{"type": "text","contents": [],"size": "xl","wrap": True,"text": "{}".format(contact.displayName),"color": "#000000","weight": "bold","style": "italic"}]}],"spacing": "xl","paddingAll": "20px"}],"paddingAll": "0px"},"footer":{"type":"box","layout":"horizontal","spacing":"sm","contents":[{"type":"box","layout":"vertical","contents":[{"type":"image","url":"https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif","size":"full","offsetTop":"0px","offsetBottom":"0px","offsetStart":"0px","offsetEnd":"0px"}],"width":"20px","height":"20px","cornerRadius":"5px","offsetTop":"5px"},{"type":"text","text":settings["bayrak"],"size":"xs","gravity":"center","offsetStart":"5px"},{"type":"box","layout":"vertical","contents":[{"type":"image","url":"https://cdn3.iconfinder.com/data/icons/faticons/32/arrow-right-01-512.png","offsetTop":"0px","offsetBottom":"0px","offsetStart":"0px","offsetEnd":"0px"}],"width":"15px","height":"15px","cornerRadius":"5px","offsetTop":"9px"}],"flex":0,"height":"50px","action":{"type":"uri","label":"action","uri":"https://line.me/ti/p/~" + zarifoglu.profile.userid}},"styles":{"footer":{"separator":True}}}}
                            sendTemplate(to, data)
                        elif cmd == "mypicture":
                            contact = zarifoglu.getContact(sender)
                            LINKFOTO = "https://os.line.naver.jp/os/p/" + sender
                            data = {
                                "type": "template",
                                "altText": "Image carouserl",
                                "template": {
                                    "type": "image_carousel",
                                    "columns": [
                                        {
                                            "imageUrl": "https://obs.line-scdn.net/{}".format(contact.pictureStatus),
                                            "size": "full",
                                            "action": {
                                                "type": "uri",
                                                "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                                            }
                                        }
                                    ]
                                }
                            }
                            sendTemplate(to, data)
                        elif cmd == "myvideo":
                            h = zarifoglu.getContact(zarifogluMID)
                            if h.videoProfile == None:
                            	return zarifoglu.sendMessage(to, "„Äå Video „Äç\nNone")
                            zarifoglu.generateReplyMessage(msg.id)
                            zarifoglu.sendReplyVideoWithURL(msg.id, to,"http://dl.profile.line-cdn.net/" + h.pictureStatus + "/vp")
                        elif cmd == "mycover":
                            h = zarifoglu.getContact(zarifogluMID)
                            cu = zarifoglu.getProfileCoverURL(zarifogluMID)
                            image = str(cu)
                            zarifoglu.generateReplyMessage(msg.id)
                            zarifoglu.sendReplyImageWithURL(msg.id, to, image)
                        elif cmd == "openqr":
                            if msg.toType == 2:
                                group = zarifoglu.getGroup(to)
                                group.preventedJoinByTicket = False
                                zarifoglu.updateGroup(group)
                                gurl = zarifoglu.reissueGroupTicket(to)
                                MyFooter(msg.to,"QR Group open\n\n" + "Link : line://ti/g/" + gurl)
                        elif cmd == "closeqr":
                            if msg.toType == 2:
                                group = zarifoglu.getGroup(to)
                                group.preventedJoinByTicket = True
                                zarifoglu.updateGroup(group)
                                MyFooter(msg.to,"QR Group close")
                        elif cmd == settings['leave']:
                            if msg.toType == 2:
                                group = zarifoglu.getGroup(to)
                                Myflex5(to, "üî•Bye bye "+str(group.name))
                                zarifoglu.leaveGroup(to)
                        if text.lower().startswith("yenileave "):
                            anu = text.lower().replace("yenileave ","")
                            itu = str(settings["leave"])
                            settings["leave"] = str(anu).lower()
                            Myflex5(to, "Leave anahtarƒ± deƒüi≈üti..")
                        elif cmd == "timeleft":
                            timeNow = time.time()
                            runtime = timeNow - botStart
                            runtime = format_timespan(runtime)
                            Myflex5(to, "„Äå Time to due „Äç\n"+str(runtime))
                        elif cmd == "rejectall" and sender == zarifogluMID:
                            ginvited = zarifoglu.getGroupIdsInvited()
                            if ginvited != [] and ginvited != None:
                                for gid in ginvited:
                                    zarifoglu.rejectGroupInvitation(gid)
                                Myflex5(to, "Succes rejected „Äå {} „Äçinvitetation".format(str(len(ginvited))))
                            else:
                                zarifoglu.sendMessage(to, "Nothing")
                        elif cmd == "cancelall" and sender == zarifogluMID:
                            if msg.toType == 2:
                                group = zarifoglu.getGroup(to)
                                if group.invitee is None or group.invitee == []:
                                    zarifoglu.sendMessage(to, "Nothing")
                                else:
                                    invitee = [contact.mid for contact in group.invitee]
                                    for inv in invitee:
                                        zarifoglu.cancelGroupInvitation(to, [inv])
                                        time.sleep(5)
                                    Myflex5(to, "Succes canceled „Äå {} „Äçuser".format(str(len(invitee))))

                        elif cmd == "blocklist" and sender == zarifogluMID:
                            blockedlist = zarifoglu.getBlockedContactIds()
                            kontak = zarifoglu.getContacts(blockedlist)
                            num=1
                            msgs="„Äå Blocked List „Äç\n"
                            for ids in kontak:
                                msgs+="\n%i. %s" % (num, ids.displayName)
                                num=(num+1)
                            msgs+="\n\nTotal Blocked : %i" % len(kontak)
                            msgs+= "\nBlockInfo„Äå number „Äç"
                            msgs+= "\nConBlock"
                            msgs+= "\nBlockfriend [@]"
                            msgs+= "\nBlockmid [mid]"
                            msgs+= "\nUnblockmid [mid]"
                            Myflex5(to, str(msgs))
                        elif cmd == "favoritelist":
                            contactlist = zarifoglu.getFavoriteMids()
                            kontak = zarifoglu.getContacts(contactlist)
                            num=1
                            msgs="„Äå Favorite List „Äç\n"
                            for ids in kontak:
                                msgs+="\n%i. %s" % (num, ids.displayName)
                                num=(num+1)
                            msgs+="\n\n„Äå Total Favoritelist : %i „Äç" % len(kontak)
                            msgs+= "\nUsage : FavoriteInfo„Äå number „Äç"
                            Myflex5(to, str(msgs))
                        elif cmd == 'gift':
                            zarifoglu.sendReplyMessage(msg.id, to, text=None, contentMetadata={'PRDID': '350d37d6-bfc9-44cb-a0d1-cf17ae3657db','PRDTYPE': 'THEME','MSGTPL': '5'}, contentType=9)
#=====================================================================
                        elif cmd == "detailcon on":
                            settings["checkContact"] = True
                            Myflex5(to, "Detail Contact has been Enabled")
                        elif cmd == "detailcon off":
                            settings["checkContact"] = False
                            Myflex5(to, "Detail Contact has been Disabled")
                        elif cmd == "changedp" and sender == zarifogluMID:
                            settings["changePicture"] = True
                            Myflex5(to, "Type: Profile\n ‚å¨ Detail: Change Profile Picture\n ‚å¨ Status: Waiting for picture\n Please send a picture...")
                        elif cmd == "change cover":
                            settings["changeCoverProfile"] = True
                            Myflex5(to,"Type: Profile\n ‚å¨ Detail: Change Home Photos\n ‚å¨ Status: Waiting for picture\nPlease send a picture...")
                        elif cmd == "changedp video" and sender == zarifogluMID:
                            settings['changeProfileVideo']['status'] = True
                            settings['changeProfileVideo']['stage'] = 1
                            Myflex5(to, "Type: Profile\n ‚å¨ Detail: Change Video Profile\n ‚å¨ Status: Waiting for video\nPlease send a video...")
                        elif cmd == "changedp group":
                            if msg.toType == 2:
                                if to not in settings["changeGroupPicture"]:
                                    settings["changeGroupPicture"].append(to)
                                Myflex5(to, "Type: Group\n ‚å¨ Detail: Change Group Picture\n ‚å¨ Status: Waiting for picture\nPlease send a picture...")
                        elif cmd.startswith("addtext"):
                           sep = text.split("#")
                           an = sep[len(sep)-1].split('/')
                           name = an[0]
                           name = name.lower()
                           if name not in textsadd:
                            ciel["addText"]["statustext"] = True
                            ciel["addText"]["texts"] = str(name.lower())
                            textsadd[str(name.lower())] = {}
                            textsadd[ciel["addText"]["texts"]] = {"CHAT":"{}".format(an[1])}
                            Myflex5(to, "Command {} created".format(str(ciel["addText"]["texts"])))
                            ciel["addText"]["statustext"] = False                
                            ciel["addText"]["texts"] = ""
                            f = codecs.open('ZarifKing/text.json','w','utf-8')
                            json.dump(textsadd, f, sort_keys=True, indent=4, ensure_ascii=False)
                           else:
                            Myflex5(to, "Text already in List!")
                        elif cmd.startswith("deltext "):
                            sep = text.split(" ")
                            name = text.replace(sep[0] + " ","")
                            name = name.lower()
                            if name in textsadd:
                                del textsadd[str(name.lower())]
                                f = codecs.open("ZarifKing/text.json","w","utf-8")
                                json.dump(textsadd, f, sort_keys=True, indent=4, ensure_ascii=False)
                                Myflex5(to, "Command {} has been removed".format( str(name.lower())))
                            else:
                                Myflex5(to, "Command {} does not exist")
                        elif cmd == "list text":
                            no = 0
                            ret_ = "List Text :\n\n"
                            for txt in textsadd:
                                no += 1
                                ret_ += str(no) + ". " + txt.title() + "\n"
                            ret_ += "\nTotal {} Created".format(str(len(stickers)))
                            Myflex5(to, ret_)
                        elif cmd.startswith("getvideo "):
                            try:
                                sep = msg.text.split(" ")
                                textToSearch = text.replace(sep[0] + " ","")
                                query = urllib.parse.quote(textToSearch)
                                url = "https://www.youtube.com/results?search_query=" + query
                                response = urllib.request.urlopen(url)
                                html = response.read()
                                soup = BeautifulSoup(html, "html.parser")
                                results = soup.find(attrs={'class':'yt-uix-tile-link'})
                                dl=("https://www.youtube.com" + results['href'])
                                vid = pafy.new(dl)
                                stream = vid.streams
                                for s in stream:
                                    vin = s.url
                                    hasil = "Youtube - Video :\n"
                                    hasil += "\nTitle : {}".format(str(vid.title))
                                    hasil += "\nSubscriber From : {}".format(str(vid.author))
                                zarifoglu.generateReplyMessage(msg.id)
                                zarifoglu.sendReplyMessage(msg.id, to,hasil)
                                zarifoglu.sendVideoWithURL(msg.to,vin)
                                print("[YOUTUBE]MP4 Succes")
                            except Exception as e:
                                zarifoglu.generateReplyMessage(msg.id)
                                zarifoglu.sendReplyMessage(msg.id, to,str(e))
                        elif cmd.startswith("deltext "):
                            	if sender in zarifogluMID:
                                    sep = text.split(" ")
                                    xres = text.replace(sep[0] + " ","")
                                    tetx = text.replace(sep[0] + " ","")
                                    if xres in tes["Message"]:
                                        del tes["Message"][xres]                                        
                                        zarifoglu.sendMessage(to,"Command %s has been removed."%tetx)
                                    else:
                                        zarifoglu.sendMessage(to,"Command %s does not exist."%tetx)
                        elif cmd.startswith("stickers "):
                            search = removeCmd("stickers", text)        
                            r = requests.get("http://api.farzain.com/stickerline.php?q={}&apikey=tUiq7OE1O8Swpa8Zs8nFoD45j".format(str(search)))
                            data=r.text
                            data=json.loads(data)
                            if data["result"] != []:
                                no = 0
                                hasil = " „Äå Line Stickers „Äç"
                                for sam in data["result"]:                                   
                                    no += 1                  
                                    hasil += "\n    " + str(no) + ". " + str(sam["title"])+"\n"+"line.me/S/sticker/"+str(sam["id"])
                                zarifoglu.sendMessage(to, str(hasil))    
                        if cmd.startswith("rename "):
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    reee = ""
                                    for ls in lists:
                                        ret_ = "{}".format(str(ls))
                                    sep = text.split(" ")
                                    s = text.replace(sep[0] + " ","")
                                    sam = s.split("|")
                                    namauser = sam[1]
                                    b = zarifoglu.getContact(ls).displayName                                        
                                    zarifoglu.findAndAddContactsByMid(ls)
                                    zarifoglu.renameContact(ls,namauser)
                                    zarifoglu.sendMessage(to,'Rename changed from '+b+' To '+namauser+".")
                        elif cmd.startswith("temalar "):
                            search = removeCmd("temalar", text)        
                            r=requests.get("http://api.farzain.com/themeline.php?q={}&apikey=tUiq7OE1O8Swpa8Zs8nFoD45j".format(str(search)))
                            data=r.text
                            data=json.loads(data)
                            if data["result"] != []:
                                no = 0
                                hasil = " „Äå Line Temalarƒ± „Äç"
                                for sam in data["result"]:              
                                    no += 1                  
                                    hasil += "\n    " + str(no) + ". " + str(sam["title"])+"\n"+"line://shop/theme/detail?id="+str(sam["id"])
                                zarifoglu.sendMessage(to, str(hasil))    
                        elif cmd.startswith("tetew "):
                            Myflex5(to,"Teteeeweeeeewew.")
                            mid = cmd.replace('tetew ','').split(' ')
                            kiez = 'spam.js token={}'.format(to, zarifoglu.authToken, "DESKTOPMAC\t4.11.0.1282\tX-64-MAVERICKS-MOJAVE\t10.14")                           
                            for x in mid:
                                try:
                                    zarifoglu.findAndAddContactsByMid(x)
                                    kiez += ' uid={}'.format(x)
                                except Exception as e:
                                    print(e)
                            success = execute_js(kiez)
                            print(kiez)                       
                        elif cmd.startswith("drawsoupletters "):
                            q = removeCmd("drawsoupletters", text)
                            r = requests.get("http://api.zicor.ooo/sletters.php?text={}".format(str(q)))                                    
                            data=r.text
                            data=json.loads(data)
                            zarifoglu.sendImageWithURL(to,str(data["image"]))
                        elif cmd.startswith("drawstreets "):
                            sep = text.split(" ")
                            txt = text.replace(sep[0] + " ","")
                            r = requests.get("http://api.zicor.ooo/streets.php?text="+urllib.parse.quote(txt))
                            data=r.text
                            data=json.loads(data)
                            zarifoglu.sendImageWithURL(to,str(data["image"]))
                        elif cmd.startswith("drawwindow "):
                            q = removeCmd("drawwindow", text)
                            r = requests.get("http://api.zicor.ooo/fwindow.php?text={}&btype=3".format(str(q)))
                            data=r.text
                            data=json.loads(data)
                            zarifoglu.sendImageWithURL(to,str(data["image"]))
                        elif cmd.startswith("drawcookies "):
                            q = removeCmd("drawcookies", text)
                            r = requests.get("http://api.zicor.ooo/wcookies.php?text={}".format(str(q)))
                            data=r.text
                            data=json.loads(data)
                            zarifoglu.sendImageWithURL(to,str(data["image"]))
                        elif cmd.startswith("drawlight "):
                            q = removeCmd("drawlight", text)
                            r = requests.get("http://api.zicor.ooo/graffiti.php?text={}".format(str(q)))
                            data=r.text
                            data=json.loads(data)
                            zarifoglu.sendImageWithURL(to,str(data["image"]))
                        elif cmd.startswith("cosplay "):
                             sep = text.split(" ")
                             txt = text.replace(sep[0] + " ","")
                             url = "https://rest.farzain.com/api/special/fansign/cosplay/cosplay.php?apikey=nda12345&text={}".format(txt)
                             zarifoglu.sendImageWithURL(to, url)
                        elif cmd.startswith("viloid "):
                             sep = text.split(" ")
                             txt = text.replace(sep[0] + " ","")
                             url = "https://rest.farzain.com/api/special/fansign/indo/viloid.php?apikey=aguzzzz748474848&beta&text={}".format(txt)
                             zarifoglu.sendImageWithURL(to, url)
                        elif cmd.startswith("spamgift "):
                            text = removeCmd("spamgift", text)
                            korban = text.replace('spamgift ', text)
                            korban2 = korban.split()
                            midd = korban2[0]
                            jumlah = int(korban2[1])
                            if jumlah <= 1000:
                                for var in range(0,jumlah):
                                    zarifoglu.sendMessage(midd, None, contentMetadata={'PRDID': 'a0768339-c2d3-4189-9653-2909e9bb6f58', 'PRDTYPE': 'THEME', 'MSGTPL': '6'}, contentType=9)
                                zarifoglu.sendMessage(to, "Succes ~")
                        elif cmd.startswith("youtubesearch "):
                            sep = msg.text.split(" ")
                            youtubeSearchV3(to, sep[1])
                        elif cmd.startswith("gift "):
                            query = removeCmd("gift", text)
                            text = query.split("-")
                            message = text[0]
                            number = text[1]
                            groups = zarifoglu.getGroupIdsJoined()
                            try:
                                group = groups[int(number)-1]
                                G = zarifoglu.getGroup(group)
                                try:
                                    zarifoglu.sendGift(group,str(message),'sticker')
                                except:
                                    zarifoglu.sendGift(group,str(message),'sticker')
                                zarifoglu.sendMessage(to, "„Äå Remote Gift „Äç\n\nGroup : " + G.name)
                            except Exception as error:
                                zarifoglu.sendMessage(to, str(error))
                        elif cmd.startswith("sendfile"):
                            if msg._from in myAdmin:
                                text = removeCmd("sendfile", text)
                                sep = text.split(" ")
                                file = text.replace(sep[0] + " ", text)
                                time.sleep(5)
                                zarifoglu.sendFile(to,file)
                        elif cmd.startswith("danbooru "):                                                                                 	    
                                text_ = removeCmd("danbooru", text)
                                cond = text_.split(" ")                          
                                jml = int(cond[0])
                                url = requests.get("https://api.boteater.co/danbooru?page=1")
                                data = url.json()                              
                                for x in range(jml):
                                    def anu():
                                        for anu in data["result"]:
                                            result = str(anu["img"])
                                            zarifoglu.sendImageWithURL(to, result)
                                    treding = Thread(target=anu)
                                    treding.daemon = True
                                    treding.start()
                        elif cmd.startswith('groups'):
                            to = msg.to
                            gid = zarifoglu.getGroupIdsJoined()
                            group = zarifoglu.getGroup(gid[int(cmd.split(' ')[1])-1])
                            nama = [a.mid for a in group.members]
                            if len(cmd.split(" ")) == 2:
                                total = "Local ID: {}".format(int(cmd.split(' ')[1]))
                                zarifoglu.datamention(to,'List Member',nama,'\n‚îúGroup: '+group.name[:20]+'\n‚îú'+total)
                            if len(cmd.split(" ")) == 4:
                                if cmd.startswith('groups '+cmd.split(' ')[1]+' mem '):zarifoglu.getinformation(to,nama[int(cmd.split(' ')[3])-1],wait)
                                if cmd.startswith('groups '+cmd.split(' ')[1]+' tag'):zarifoglu.adityaarchi(wait,'Mention','tag',gid[int(cmd.split(' ')[1])-1],cmd.split(' ')[3],msg,"\n‚îúGroup: {}\n‚îúLocal ID: {}".format(group.name[:20],int(cmd.split(' ')[1])),nama=nama)
                                if cmd.startswith('groups '+cmd.split(' ')[1]+' kick'):zarifoglu.adityaarchi(wait,'Kick Member','kick',gid[int(cmd.split(' ')[1])-1],cmd.split(' ')[3],msg,"\n‚îúGroup: {}\n‚îúLocal ID: {}".format(group.name[:20],int(cmd.split(' ')[1])),nama=nama)
                                if cmd.startswith('groups '+cmd.split(' ')[1]+' unsent'):
                                    a = gid[int(cmd.split(' ')[1])-1]
                                    j = int(cmd.split(' ')[3])
                                    a = [zarifoglu.adityasplittext(cmd,'s').replace('{} '.format(j),'')]*j
                                    h = wait['Unsend'][gid[int(cmd.split(' ')[1])-1]]['B']
                                    for b in h[:j]:
                                        print(b)
                                        try:
                                            zarifoglu.unsendMessage(b)
                                            wait['Unsend'][gid[int(cmd.split(" ")[1])-1]]['B'].remove(b)
                                        except Exception as e:print(e)
                        if cmd.startswith("leave groups "):
                            if msg.toType in [0,1,2]:
                                gid = zarifoglu.getGroupIdsJoined()
                                if len(cmd.split(" ")) == 3:
                                    selection = MySplit(cmd.split(' ')[2],range(1,len(gid)+1))
                                    k = len(gid)//100
                                    for a in range(k+1):
                                        if a == 0:eto='‚ï≠„Äå Leave Group „Äç‚îÄ'
                                        else:eto='‚îú„Äå Leave Group „Äç‚îÄ'
                                        text = ''
                                        no = 0
                                        for i in selection.parse()[a*100 : (a+1)*100]:
                                            zarifoglu.leaveGroup(gid[i - 1])
                                            time.sleep(4)
                                            no+=1
                                            if no == len(selection.parse()):text+= "\n‚ï∞{}. {}".format(i,zarifoglu.getGroup(gid[i - 1]).name)
                                            else:text+= "\n‚îÇ{}. {}".format(i,zarifoglu.getGroup(gid[i - 1]).name)
                                        zarifoglu.sendMessage(to,eto+text)
                        elif cmd.startswith("meownime "):
                            proses = text.split(" ")
                            urutan = text.replace(proses[0] + " ","")
                            count = urutan.split("|")
                            search = str(count[0])
                            r = requests.get("https://arsybai.herokuapp.com/rest/meownime?apikey=Naufal02&search="+str(search))
                            data = json.loads(r.text)
                            if len(count) == 1:
                                no = 0
                                hasil = "Result Anime :\n"    
                                for aa in data["result"]: 
                                    no += 1
                                    hasil += "\n" + str(no) + ". " + str(aa["title"])
                                    ret_ = "\n\nType: Meownime {} | Number".format(str(search))
                                Myflex5(msg.to,hasil+ret_)                
                            elif len(count) == 2:
                                try:
                                    num = int(count[1])
                                    b = data["result"][num - 1]
                                    c = str(b["title"])                                    
                                    e = str(b["url"])
                                    hasil = "Detail :\n"    
                                    hasil += "\nTitle : "+str(c)                                                                        
                                    hasil += "\nLink : "+str(e)  
                                    MyFooter(msg.to,hasil)
                                    dl = str(b["img"])
                                    zarifoglu.sendImageWithURL(msg.to,dl)
                                except Exception as error:
                                    zarifoglu.sendMessage(to, "Sorry, Anime not found")
                                    logError(error)
                        elif cmd.startswith("gif "):
                            proses = text.split(" ")
                            urutan = text.replace(proses[0] + " ","")
                            count = urutan.split("|")
                            search = str(count[0])
                            r = requests.get("https://api.tenor.com/v1/search?key=PVS5D2UHR0EV&limit=10&q="+str(search))
                            data = json.loads(r.text)
                            if len(count) == 1:
                                no = 0
                                hasil = "Search Gif :\n"
                                for aa in data["results"]:
                                    no += 1
                                    hasil += "\n" + str(no) + ". " + str(aa["title"])
                                    ret_ = "\n\nType: Gif {} | Number".format(str(search))
                                Myflex5(msg.to,hasil+ret_)
                            elif len(count) == 2:
                                try:
                                    num = int(count[1])
                                    b = data["results"][num - 1]
                                    c = str(b["id"])
                                    hasil = "Information Gif ID "+str(c)
                                    Myflex5(msg.to,hasil)
                                    dl = str(b["media"][0]["loopedmp4"]["url"])
                                    zarifoglu.sendVideoWithURL(msg.to,dl)
                                except Exception as e:
                                    zarifoglu.sendMessage(msg.to," "+str(e)) 
                        elif cmd.startswith("checkip "):
                            search = removeCmd("checkip", text)
                            r = _session.get("https://ipapi.co/" + search + "/json")
                            data = r.text
                            data = json.loads(data)
                            if "error" not in data:
                                ret_ = "IP Checker :\n"
                                ret_ += "\nIp : {}".format(data["ip"])
                                ret_ += "\nCity : {}".format(data["city"])
                                ret_ += "\nRegion : {}".format(data["region"])
                                ret_ += "\nRegion Code : {}".format(data["region_code"])
                                ret_ += "\nCountry : {}".format(data["country"])
                                ret_ += "\nCountry Name : {}".format(data["country_name"])
                                ret_ += "\nPostal : {}".format(data["postal"])
                                ret_ += "\nLatitude : {}".format(data["latitude"])
                                ret_ += "\nLongitude : {}".format(data["longitude"])
                                ret_ += "\nTimezone : {}".format(data["timezone"])
                                ret_ += "\nASN Code : {}".format(data["asn"])
                                ret_ += "\nOrganization : {}".format(data["org"])
                                Myflex5(msg.to,str(ret_))
                            else:
                                zarifoglu.sendMessage(to, "IP not found !")

                        elif cmd.startswith("imagetext "):
                            text_ = removeCmd("imagetext", text)
                            web = _session
                            web.headers["User-Agent"] = random.choice(settings["userAgent"])
                            font = random.choice(["arial","comic"])
                            r = web.get("http://api.img4me.com/?text=%s&font=%s&fcolor=FFFFFF&size=35&bcolor=000000&type=jpg" %(urllib.parse.quote(text_),font))
                            data = str(r.text)
                            if "Error" not in data:
                                path = data
                                zarifoglu.sendImageWithURL(to,path)
                            else:
                                zarifoglu.sendMessage(to,"[RESULT] %s" %(data.replace("Error: ")))
                        elif cmd.startswith("pictureig ") and sender == zarifogluMID:
                            cari = removeCmd("pictureig", text)
                            try:
                                respon = _session.get(cari+"?__a=1")
                                data = respon.json()
                                ig_url = data['graphql']['shortcode_media']['display_url']
                                zarifoglu.sendImageWithURL(msg.to,ig_url)
                            except:
                                zarifoglu.sendMessage(msg.to,"Error")
                        elif cmd.startswith("videoig ") and sender == zarifogluMID:
                            cari = removeCmd("videoig", text)
                            try:
                                respon = _session.get(cari+"?__a=1")
                                data = respon.json()
                                ig_url = data['graphql']['shortcode_media']['video_url']
                                zarifoglu.sendVideoWithURL(msg.to,ig_url)
                            except:
                                zarifoglu.sendMessage(msg.to,"Error")
                        elif cmd.startswith("xxx "):
                            proses = text.split(" ")
                            urutan = text.replace(proses[0] + " ","")
                            count = urutan.split("|")
                            search = str(count[0])
                            r = requests.get("https://api.avgle.com/v1/search/{}/1?limit=10".format(str(search)))
                            data = json.loads(r.text)
                            if len(count) == 1:
                                no = 0
                                hasil = "„Äå Search video 18+ „Äç\n"
                                for aa in data["response"]["videos"]:
                                    no += 1
                                    hasil += "\n"+str(no)+". "+str(aa["title"])+"\nDurasi : "+str(aa["duration"])
                                    ret_ = "\n\nXxx {} | Number".format(str(search))
                                zarifoglu.sendMessage(msg.to,hasil+ret_)
                            elif len(count) == 2:
                                try:
                                    num = int(count[1])
                                    b = data["response"]["videos"][num - 1]
                                    c = str(b["vid"])
                                    d = requests.get("https://api.avgle.com/v1/video/"+str(c))
                                    data1 = json.loads(d.text)
                                    hasil = "Title : "+str(data1["response"]["video"]["title"])
                                    hasil += "\n\nDurasi : "+str(data1["response"]["video"]["duration"])
                                    hasil += "\nKualitas HD : "+str(data1["response"]["video"]["hd"])
                                    hasil += "\nDitonton "+str(data1["response"]["video"]["viewnumber"])
                                    hasil += "\nLink video : "+str(data1["response"]["video"]["video_url"])
                                    hasil += "\nLink embed : "+str(data1["response"]["video"]["embedded_url"])
                                    zarifoglu.sendMessage(msg.to,hasil)
                                    anuanu = str(data1["response"]["video"]["preview_url"])
                                    path = zarifoglu.downloadFileURL(anuanu)
                                    zarifoglu.sendImage(msg.to,path)
                                except Exception as e:
                                    zarifoglu.sendMessage(msg.to," "+str(e))
                        elif cmd.startswith("idline "):
                            a = removeCmd("idline", text)
                            b = zarifoglu.findContactsByUserid(a)
                            line = b.mid
                            zarifoglu.sendMessage(msg.to,"http://line.me/ti/p/~" + a)
                            zarifoglu.sendContact(to, line)                                                                                           
                            zarifoglu.sendMessage(to,str(hasil))
                        elif cmd.startswith("blockinfo "):
                            number = removeCmd("blockinfo", text)
                            contactlist = zarifoglu.getBlockedContactIds()
                            try:
                                contact = contactlist[int(number)-1]
                                friend = zarifoglu.getContact(contact)
                                cu = zarifoglu.getProfileCoverURL(contact)
                                path = str(cu)
                                image = "http://dl.profile.line-cdn.net/" + friend.pictureStatus
                                try:
                                    zarifoglu.sendMessage(to,"„Äå Block Info „Äç\n\n" + "Name : " + friend.displayName + "\nStatus : " + friend.statusMessage + "\nMid : " + friend.mid)
                                    zarifoglu.sendImageWithURL(to,image)
                                    zarifoglu.sendImageWithURL(to,path)
                                    zarifoglu.sendContact(to, friend.mid)
                                except:
                                    pass
                            except Exception as error:
                                zarifoglu.sendMessage(to, "„Äå Result Error „Äç\n" + str(error))
                        elif cmd.startswith("favoriteinfo "):
                            text = removeCmd("favoriteinfo", text)
                            separate = text.split(" ")
                            number = text.replace(separate[0] + " ", text)
                            contactlist = zarifoglu.getFavoriteMids()
                            try:
                                contact = contactlist[int(number)-1]
                                friend = zarifoglu.getContact(contact)
                                cu = zarifoglu.getProfileCoverURL(contact)
                                path = str(cu)
                                image = "http://dl.profile.line-cdn.net/" + friend.pictureStatus
                                try:
                                    zarifoglu.sendMessage(to,"„Äå Favorite Info„Äç\n\n" + "Name : " + friend.displayName + "\nStatus : " + friend.statusMessage + "\nMid : " + friend.mid)
                                    zarifoglu.sendImageWithURL(to,image)
                                    zarifoglu.sendImageWithURL(to,path)
                                    zarifoglu.sendContact(to, friend.mid)
                                except:
                                    pass
                            except Exception as error:
                                zarifoglu.sendMessage(to, "Result Error\n" + str(error))
                        elif cmd.startswith("savefile"):
                            if msg._from in myAdmin:
                                text = removeCmd("savefile", text)
                                sep = text.split(" ")
                                key = text.replace(sep[0] + " ", text)
                                if " " in key:
                                    zarifoglu.sendMessage(to, "Failed !")
                                else:
                                    hoho["namafile"] = str(key).lower()
                                    hoho["savefile"] = True
                                    Myflex5(to, "Send file to save to be„Äå {} „Äç".format(str(key).lower()))
                        elif cmd.startswith("imagehd "):
                                query = removeCmd("imagehd", text)
                                cond = query.split("|")
                                search = str(cond[0])
                                result = requests.get("https://api.eater.pw/wallp/{}".format(str(search)))
                                data = result.text
                                data = json.loads(data)
                                if data["result"] != []:
                                    ret_ = []
                                    for fn in data["result"]:
                                        if 'http://' in fn["link"]:
                                            pass
                                        else:
                                            if len(ret_) >= 10:
                                                pass
                                            else:
                                                ret_.append({
                                                    "imageUrl": "{}".format(str(fn["link"])),
                                                    "action": {
                                                        "type": "uri",
                                                        "label": "Send Image",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=image&img={}".format(str(fn["link"]))
                                                        }
                                                    }
                                                )
                                    k = len(ret_)//10
                                    for aa in range(k+1):
                                        data = {
                                            "type": "template",
                                            "altText": "Wallpp HD",
                                            "template": {
                                                "type": "image_carousel",
                                                "columns": ret_[aa*10 : (aa+1)*10]
                                            }
                                        }
                                        sendTemplate(to, data)
                        elif cmd.startswith("flexgbc2 "):
                            Turkey = text.split(" ")
                            hey = text.replace(Turkey[0] + " ", "")
                            text = "{}".format(hey)
                            groups = zarifoglu.getGroupIdsJoined()
                            for gr in groups:
                                data = {
                                        "type": "flex",
                                        "altText": settings["bayrak"],
                                        "contents": {
  "styles": {
    "body": {
      "backgroundColor": "#FFFFFF"
    },
    "footer": {
      "backgroundColor": "#FFFFFF"
    }
  },
  "type": "bubble",
  "body": {
    "contents": [
      {
        "contents": [
          {
            "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
            "type": "image"
          },
          {
            "type": "separator",
            "color": "#000000"
          },
          {
            "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
            "type": "image"
          }
        ],
        "type": "box",
        "spacing": "md",
        "layout": "horizontal"
      },
      {
        "type": "separator",
        "color": "#000000"
      },
      {
        "contents": [
          {
            "text": "BROADCAST",
            "size": "md",
            "align": "center",
            "color": "#000000",
            "wrap": True,
            "weight": "bold",
            "type": "text"
          }
        ],
        "type": "box",
        "spacing": "md",
        "layout": "vertical"
      },
      {
        "type": "separator",
        "color": "#000000"
      },
      {
        "contents": [
          {
            "contents": [
              {
                "text": "{}".format(text),
                "size": "xs",
                "margin": "none",
                "color": "#000000",
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
        ],
        "type": "box",
        "layout": "vertical"
      }
    ],
    "type": "box",
    "spacing": "md",
    "layout": "vertical"
  }
}
}
                                bcTemplate(gr, data)
                        elif cmd.startswith("flexgbc "):
                            Turkey = text.split(" ")
                            hey = text.replace(Turkey[0] + " ", "")
                            text = "{}".format(hey)
                            groups = zarifoglu.getGroupIdsJoined()
                            for gr in groups:
                                data = {
        "type": "flex",
        "altText": settings["bayrak"],
        "contents": {
            "type": "carousel",
            "contents": [
              {
                "type": "bubble",
                "body": {
                "type": "box",
                "layout": "vertical",
                "cornerRadius": "xl",
                "borderWidth": "4px",
                "borderColor": "#FFFFFF",
                "contents": [
                  {
                    "type": "image",
                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                    "size": "full",
                    "aspectMode": "cover",
                    "aspectRatio": "1:1",
                    "gravity": "top"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "box",
                        "layout": "baseline",
                        "contents": [
                          {
                            "type": "text",
                            "text": "{}".format(text),
                            "wrap": True,
                            "color": "#ffffff",
                            "size": "sm",
                            "flex": 0
                          }
                        ],
                        "spacing": "lg"
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "filler"
                          },
                          {
                            "type": "box",
                            "layout": "baseline",
                            "contents": [
                              {
                                "type": "filler"
                              },
                              {
                                "type": "text",
                                "text": settings["bayrak"],
                                "weight": "bold",
                                "action": {
                                  "type": "uri",
                                  "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                                },
                                "color": "#ffffff",
                                "flex": 0,
                                "offsetTop": "-2px"
                              },
                              {
                                "type": "filler"
                              }
                            ],
                            "spacing": "sm"
                          },
                          {
                            "type": "filler"
                          }
                        ],
                        "borderWidth": "1px",
                        "cornerRadius": "4px",
                        "spacing": "sm",
                        "borderColor": "#ffffff",
                        "margin": "xxl",
                        "height": "40px"
                      }
                    ],
                    "position": "absolute",
                    "offsetBottom": "0px",
                    "offsetStart": "0px",
                    "offsetEnd": "0px",
                    "backgroundColor": "#000000cc",
                    "paddingAll": "20px",
                    "paddingTop": "18px"
                  }
                ],
                "paddingAll": "0px"
            }
          } 
        ]
      } 
    }
                                bcTemplate(gr, data)
                                time.sleep(4)
                            zarifoglu.sendMessage(to, "Succes broadcast to {} group".format(str(len(groups))))
                        elif cmd.startswith("flexfbc "):
                            rah = text.split(" ")
                            matt = text.replace(rah[0] + " ","")
                            chat = "{}".format(matt)
                            friends = zarifoglu.getAllContactIds()
                            for friend in friends:
                                data = {
        "type": "flex",
        "altText": settings["bayrak"],
        "contents": {
            "type": "carousel",
            "contents": [
              {
                "type": "bubble",
                "body": {
                "type": "box",
                "layout": "vertical",
                "cornerRadius": "xl",
                "borderWidth": "4px",
                "borderColor": "#FFFFFF",
                "contents": [
                  {
                    "type": "image",
                    "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                    "size": "full",
                    "aspectMode": "cover",
                    "aspectRatio": "1:1",
                    "gravity": "top"
                  },
                  {
                    "type": "box",
                    "layout": "vertical",
                    "contents": [
                      {
                        "type": "box",
                        "layout": "baseline",
                        "contents": [
                          {
                            "type": "text",
                            "text": "{}".format(text),
                            "wrap": True,
                            "color": "#ffffff",
                            "size": "sm",
                            "flex": 0
                          }
                        ],
                        "spacing": "lg"
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "contents": [
                          {
                            "type": "filler"
                          },
                          {
                            "type": "box",
                            "layout": "baseline",
                            "contents": [
                              {
                                "type": "filler"
                              },
                              {
                                "type": "text",
                                "text": settings["bayrak"],
                                "weight": "bold",
                                "action": {
                                  "type": "uri",
                                  "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                                },
                                "color": "#ffffff",
                                "flex": 0,
                                "offsetTop": "-2px"
                              },
                              {
                                "type": "filler"
                              }
                            ],
                            "spacing": "sm"
                          },
                          {
                            "type": "filler"
                          }
                        ],
                        "borderWidth": "1px",
                        "cornerRadius": "4px",
                        "spacing": "sm",
                        "borderColor": "#ffffff",
                        "margin": "xxl",
                        "height": "40px"
                      }
                    ],
                    "position": "absolute",
                    "offsetBottom": "0px",
                    "offsetStart": "0px",
                    "offsetEnd": "0px",
                    "backgroundColor": "#000000cc",
                    "paddingAll": "20px",
                    "paddingTop": "18px"
                  }
                ],
                "paddingAll": "0px"
            }
          } 
        ]
      } 
    }
                                bcTemplate2(friend, data)
                                time.sleep(4)
                            zarifoglu.sendMessage(to, "Succes friend cast to {} friend ".format(str(len(friends))))
                        elif cmd.startswith("wallpaper "):
                                name = removeCmd("wallpaper", text)
                                r = requests.get("https://api.eater.co/wallp?search={}"+name)
                                data = r.text
                                data = json.loads(data)
                                if data["result"] != []:
                                    ret_ = []
                                    for fn in data["result"]:
                                        if 'http://' in fn["img"]:
                                            pass
                                        else:
                                            if len(ret_) >= 10:
                                                pass
                                            else:
                                                ret_.append({
                                                    "imageUrl": "{}".format(str(fn["img"])),
                                                    "action": {
                                                        "type": "uri",
                                                        "label": "Send Image",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=foimage&img={}".format(str(fn["img"]))
                                                        }
                                                    }
                                                )
                                    k = len(ret_)//10
                                    for aa in range(k+1):
                                        data = {
                                            "type": "template",
                                            "altText": "Images",
                                            "template": {
                                                "type": "image_carousel",
                                                "columns": ret_[aa*10 : (aa+1)*10]
                                            }
                                        }
                                        sendTemplate(to, data)
                        elif cmd.startswith("image "):
                                query = removeCmd("image", text)
                                cond = query.split("|")
                                search = str(cond[0])
                                r = requests.get("https://cryptic-ridge-9197.herokuapp.com/api/imagesearch/{}".format(str(search)))
                                data=r.text
                                data=json.loads(r.text)
                                if data != []:
                                    ret_ = []                                	
                                    for food in data:
                                        if 'http://' in food["url"]:
                                            pass
                                        else:
                                            if len(ret_) >= 10:
                                                pass
                                            else:
                                                ret_.append({
                                                    "imageUrl": "{}".format(str(food["url"])),
                                                    "action": {
                                                        "type": "uri",
                                                        "label": "Send Image",
                                                        "uri": "line://app/1597127494-QDP2OlYl?type=foimage&img={}".format(str(food["url"]))
                                                        }
                                                    }
                                                )
                                    k = len(ret_)//10
                                    for aa in range(k+1):
                                        data = {
                                            "type": "template",
                                            "altText": "I'm hungry",
                                            "template": {
                                                "type": "image_carousel",
                                                "columns": ret_[aa*10 : (aa+1)*10]
                                            }
                                        }
                                        sendTemplate(to, data)
#REMOTE DISCO
                        elif cmd.startswith("haha "):
                                number = removeCmd("haha", text)
                                groups = zarifoglu.getGroupIdsJoined()
                                group = groups[int(number)-1]
                                G = zarifoglu.getGroup(group)
                                ret_ = []
                                ret_.append({"imageUrl":"https://thumbs.gfycat.com/QuaintScornfulAmericanlobster-small.gif","size": "full","action": {"type": "uri","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}})
                                k = len(ret_)//1
                                for aa in range(k+1):
                                    data = {
                                        "type": "template",
                                        "altText": "This is image_carousel",
                                        "template": {
                                            "type": "image_carousel",
                                            "columns": ret_[aa*1 : (aa+1)*1]
                                        }
                                    }
                                    sendTemplate(group, data)
                                zarifoglu.sendMessage(to, "Remote Haha\nIn Grup {}".format(G.name))
                        elif cmd.startswith("haha "):
                                number = removeCmd("haha", text)
                                groups = zarifoglu.getGroupIdsJoined()
                                group = groups[int(number)-1]
                                G = zarifoglu.getGroup(group)
                                ret_ = []
                                ret_.append({"imageUrl":"https://thumbs.gfycat.com/QuaintScornfulAmericanlobster-small.gif","size": "full","action": {"type": "uri","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}})
                                k = len(ret_)//1
                                for aa in range(k+1):
                                    data = {
                                        "type": "template",
                                        "altText": "hmmk",
                                        "template": {
                                            "type": "image_carousel",
                                            "columns": ret_[aa*1 : (aa+1)*1]
                                        }
                                    }
                                    sendTemplate(group, data)
                                zarifoglu.sendMessage(to, "Remote Haha\nIn Grup {}".format(G.name))
#YT REMOTE
                        elif cmd.startswith("searchapp "):
                                query = removeCmd("searchapp", text)
                                cond = query.split("|")
                                search = str(cond[0])
                                result = requests.get("http://api.farzain.com/playstore.php?id={}&apikey=KJaOT94NCD1bP1veQoJ7uXc9M".format(str(search)))
                                data = result.text
                                data = json.loads(data)
                                if data != []:
                                    ret_ = []
                                    for music in data:
                                        if 'http://' in music["url"]:
                                            pass
                                        else:
                                            if len(ret_) >= 10:
                                                pass
                                            else:
                                                ret_.append({
                                                    "imageUrl": "{}".format(str(music["icon"])),
                                                    "action": {
                                                        "type": "uri",
                                                        "label": "Download",
                                                        "uri": "{}".format(str(music["url"]))
                                                        }
                                                    }
                                                )
                                    k = len(ret_)//10
                                    for aa in range(k+1):
                                        data = {
                                            "type": "template",
                                            "altText": "Searching App",
                                            "template": {
                                                "type": "image_carousel",
                                                "columns": ret_[aa*10 : (aa+1)*10]
                                            }
                                        }
                                        sendTemplate(to, data)

                        elif cmd.startswith("sms: "): #SMS FREE
                            separate = text.split(" ")
                            teks = text.replace(separate[0] + " ","")
                            txt = teks.split(" ")
                            bag1 = txt[0] #NomorHP
                            sep = text.split(" ")
                            pesan = text.replace(sep[0] + " ","")
                            req = requests.get("http://corrykalam.pw/tools/sms.php?no="+bag1+"&pesan={}".format(pesan))
                            data = req.json()
                            ret_ = "\nNumber : "+ str(bag1)
                            ret_ += "\nMessage : "+ str(pesan)
                            Myflex5(to, str(ret_))

                        elif cmd.startswith("like ") and sender == zarifogluMID:
                                try:
                                    typel = [1001,1002,1003,1004,1005,1006]
                                    key = eval(msg.contentMetadata["MENTION"])
                                    u = key["MENTIONEES"][0]["M"]
                                    a = zarifoglu.getContact(u).mid
                                    s = zarifoglu.getContact(u).displayName
                                    hasil = zarifoglu.getHomeProfile(mid=a)
                                    st = hasil['result']['feeds']
                                    for i in range(len(st)):
                                        test = st[i]
                                        result = test['post']['postInfo']['postId']
                                        zarifoglu.likePost(str(msg.to), str(result), likeType=random.choice(typel))
                                        zarifoglu.createComment(str(msg.to), str(result), ["postMessage"])
                                    Myflex5(to, 'Done Like+Comment '+str(len(st))+' Post From\n' + str(s))
                                except Exception as e:
                                    zarifoglu.sendMessage(msg.to, str(e))
                        if cmd.startswith("share allpost "):
                            if msg._from in [zarifogluMID]:
                                j = int(cmd.split(' ')[2])
                                a = [zarifoglu.adityasplittext(cmd,'s').replace('{} '.format(j),'')]*j
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        lists.append(mention["M"])
                                    for ls in lists:
                                        try:
                                            e = zarifoglu.getHomeProfile(ls)
                                            for i in e['result']['feeds']:
                                                b = i['post']['postInfo']['postId']
                                                f = [zarifoglu.sendPostToTalk(to,b) for g in a]
                                        except Exception as e:
                                            zarifoglu.sendMention(to, "Oops!! User @!doesn't have post/privacy not in public","",[ls])
                        elif cmd.startswith("ulti "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    try:
                                        zarifoglu.kickoutFromGroup(to, [ls])
                                        zarifoglu.findAndAddContactsByMid(ls)
                                        zarifoglu.inviteIntoGroup(to, [ls])
                                        zarifoglu.cancelGroupInvitation(to, [ls])
                                    except:
                                       zarifoglu.sendMessage(to, "Limited !")
                        elif cmd.startswith("tban "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    try:
                                        apalo["Talkblacklist"][ls] = True
                                        Myflex5(to, 'Add to TalkBan')
                                    except:
                                        pass
                        elif cmd.startswith("tunban "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    try:
                                        del apalo["Talkblacklist"][ls]
                                        Myflex5(to, 'Deleted from TalkBan')
                                    except:
                                        pass

                        elif cmd.startswith("slain "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    try:
                                        zarifoglu.kickoutFromGroup(to, [ls])
                                        zarifoglu.findAndAddContactsByMid(ls)
                                        zarifoglu.inviteIntoGroup(to, [ls])
                                        zarifoglu.cancelGroupInvitation(to, [ls])
                                        time.sleep(5)
                                        zarifoglu.inviteIntoGroup(to, [ls])
                                    except:
                                       zarifoglu.sendMessage(to, "Limited !")

                        elif cmd.startswith("reinv "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    try:
                                        zarifoglu.findAndAddContactsByMid(ls)
                                        zarifoglu.kickoutFromGroup(to, [ls])
                                        time.sleep(5)
                                        zarifoglu.inviteIntoGroup(to, [ls])
                                    except:
                                       zarifoglu.sendMessage(to, "Limited !")
                        elif cmd.startswith("invite "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    try:
                                       zarifoglu.findAndAddContactsByMid(ls)
                                       zarifoglu.inviteIntoGroup(to, [ls])
                                    except:
                                       zarifoglu.sendMessage(to, "Limited !")
                        elif cmd.startswith("tes "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    contact = zarifoglu.getContact(ls)
                                    try:
                                	    rename = contact.displayNameOverridden
                                    except:
                                	    rename = "„Äå Display Rename „Äç\nERROR"
                                    zarifoglu.sendMessage(to, "„Äå Display Name „Äç\n" + contact.displayName + "\n\n„Äå Display Rename „Äç\n{}".format(rename))

                        elif cmd.startswith("song√∂r√ºlme "):
                            if 'MENTION' in msg.contentMetadata.keys() != None:
                                names = re.findall(r'@(\w+)', msg.text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                for mention in mentionees:
                                    if mention['M'] in seens["find"]:
                                        mentions(msg.to, "@! "+seens["username"][mention['M']], [mention['M']])
                                    else:
                                        mentions(msg.to, "@! \nHi√ßbir grupta bulunamadƒ±.", [mention['M']])
                                        print(seens)

                        elif cmd.startswith("midclone "):
                            target = removeCmd("midclone", text)
                            if target is not None:
                                cloneProfile(target)
                                zarifoglu.sendContact(to,zarifogluMID)
                                Myflex5(to,"Succes clone by Mid")     
                        elif cmd.startswith("cloneprofile "):
                            if sender in zarifogluMID:
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    if len(lists) != []:
                                        ls = random.choice(lists)
                                        cloneProfile(ls)
                                        zarifoglu.sendContact(to,zarifogluMID)
                                        Myflex5(to,"Succes")             
                        elif cmd == "restoreprofile":
                            if sender in zarifogluMID:
                                try:
                                    restoreProfile()
                                    zarifoglu.sendContact(to,zarifogluMID)
                                    Myflex5(to, "Back to profile")
                                except Exception as error:
                                    logError(error)
                        elif cmd == "backupprofile":
                            if sender in zarifogluMID:
                                try:
                                    backupProfile()
                                    Myflex5(to, "Succes backup profile")
                                except Exception as error:
                                    logError(error)

                        if text.lower().startswith(settings['kick ']):
                            targets = []
                            key = eval(msg.contentMetadata["MENTION"])
                            key["MENTIONEES"] [0] ["M"]
                            for x in key["MENTIONEES"]:
                                targets.append(x["M"])
                            for target in targets:
                                try:
                                    zarifoglu.kickoutFromGroup(to,[target])
                                   #time.sleep(5)
                                except Exception as e:
                                    zarifoglu.sendMessage(to, str(e))

                        elif cmd.startswith("ass ") and sender == zarifogluMID:
                            targets = []
                            key = eval(msg.contentMetadata["MENTION"])
                            key["MENTIONEES"] [0] ["M"]
                            for x in key["MENTIONEES"]:
                                targets.append(x["M"])
                            imTurkey = 'simple.js gid={} token={} app={}'.format(to, zarifoglu.authToken, "DESKTOPMAC\t4.11.0.1282\tX-64-MAVERICKS-MOJAVE\t10.14")
                            for target in targets:
                              imTurkey += ' uid={}'.format(target)
                            success = execute_js(imTurkey)

                        elif cmd.startswith("creategroup "):
                            text = removeCmd("creategroup", text)
                            sep = text.split(" ")
                            name = text.replace(sep[0] + " ", text)
                            zarifoglu.createGroup(name, [zarifogluMID])
                            gids = zarifoglu.getGroupIdsByName(name)
                            for gid in gids:
                	            try:
                		            x = zarifoglu.getGroup(gid)
                		            x.preventedJoinByTicket = False
                		            zarifoglu.updateGroup(x)
                	            except Exception as e:
                		            zarifoglu.sendMessage(to, str(e))
                            MyFooter(to, "Create Group {}\n\nQR : http://line.me/R/ti/g/{}".format(str(name), str(zarifoglu.reissueGroupTicket(x.id))))

                        elif cmd.startswith('addbl') or cmd.startswith('delbl') or cmd.startswith('addwl') or cmd.startswith('delwl') or cmd.startswith('del block '):
                            to = msg.to
                            msg.text = zarifoglu.mycmd(msg.text,wait)
                            cmd = msg.text.lower()
                            if 'MENTION' in msg.contentMetadata.keys()!=None:
                                targets = []
                                key = eval(msg.contentMetadata["MENTION"])
                                key["MENTIONEES"][0]["M"]
                                for x in key["MENTIONEES"]:
                                    targets.append(x["M"])
                                if cmd.startswith('addbl '):zarifoglu.datamentions(to,'Blacklist',targets,'ADDBL',wait,ps='\n‚îú Type: Add Blacklist')
                                elif cmd.startswith('delbl '):zarifoglu.datamentions(to,'Blacklist',targets,'DELBL',wait,ps='\n‚îú Type: Delete Blacklist')
                                elif cmd.startswith('addwl '):zarifoglu.datamentions(to,'Whitelist',targets,'ADDWL',wait,ps='\n‚îú Type: Add Whitelist')
                                elif cmd.startswith('delwl '):zarifoglu.datamentions(to,'Whitelist',targets,'DELWL',wait,ps='\n‚îú Type: Delete Whitelist')
                                elif cmd.startswith('addml '):zarifoglu.datamentions(to,'Mimiclist',targets,'ADDML',wait,ps='\n‚îú Type: Add Mimiclist')
                                elif cmd.startswith('delml '):zarifoglu.datamentions(to,'Mimiclist',targets,'DELML',wait,ps='\n‚îú Type: Delete Mimiclist')
                                elif cmd.startswith('delfriend '):zarifoglu.datamentions(to,'Friendlist',targets,'DELFL',wait,ps='\n‚îú Type: Delete Friendlist')
                            else:
                                if cmd.startswith('delbl '):zarifoglu.adityaarchi(wait,'Blacklist','delbl',to,zarifoglu.adityasplittext(cmd),to,'\n‚îú Type: Delete Blacklist',nama=wait['blacklist'])
                                if cmd.startswith('delwl '):zarifoglu.adityaarchi(wait,'Whitelist','delwl',to,zarifoglu.adityasplittext(cmd),to,'\n‚îú Type: Delete Whitelist',nama=wait['bots'])
                                if cmd.startswith('delml '):zarifoglu.adityaarchi(wait,'Mimiclist','delml',to,zarifoglu.adityasplittext(cmd),to,'\n‚îú Type: Delete Mimiclist',nama=wait['target'])
                                if cmd.startswith('del block '):zarifoglu.sendMessage(to,' „Äå Blocklist „Äç\nWaiting.....');zarifoglu.adityaarchi(wait,'Blocklist','delblock',to,zarifoglu.adityasplittext(cmd,'s'),to,'\n‚îú Type: Delete Blocklist',nama=zarifoglu.getBlockedRecommendationIds())
                            if msg.toType == 0:
                                if cmd == 'addbl':zarifoglu.datamentions(to,'Blacklist',[to],'ADDBL',wait,ps='\n‚îú Type: Add Blacklist')
                                elif cmd == 'delbl':zarifoglu.datamentions(to,'Blacklist',[to],'DELBL',wait,ps='\n‚îú Type: Delete Blacklist')
                                elif cmd == 'addwl':zarifoglu.datamentions(to,'Whitelist',[to],'ADDWL',wait,ps='\n‚îú Type: Add Whitelist')
                                elif cmd == 'delwl':zarifoglu.datamentions(to,'Whitelist',[to],'DELWL',wait,ps='\n‚îú Type: Delete Whitelist')
                                elif cmd == 'addml':zarifoglu.datamentions(to,'Mimiclist',[to],'ADDML',wait,ps='\n‚îú Type: Add Mimiclist')
                                elif cmd == 'delml':zarifoglu.datamentions(to,'Mimiclist',[to],'DELML',wait,ps='\n‚îú Type: Delete Mimiclist')
#=====================================================================
                        elif cmd.startswith("stealpp "):
                            if msg.toType == 2:                   
                                _name = removeCmd("stealpp", text)
                                gs = zarifoglu.getGroup(to)
                                targets = []
                                for g in gs.members:
                                    if _name in g.displayName.lower():
                                        targets.append(g.mid)
                                        if targets == []:
                                            zarifoglu.sendMessage(to,"Not found.")
                                        else:
                                            for target in targets:
                                                try:
                                                    M = Message()
                                                    M.to = to
                                                    M.contentType = 13
                                                    M.contentMetadata = {'mid': target}
                                                    contact = zarifoglu.getContact(target)
                                                    data = {
                                                        "type": "flex",
                                                        "altText": settings["bayrak"],
                                                        "contents": {
                                                            "type": "bubble",
                                                            "hero": {
                                                                "type": "image",
                                                                "url": "https://obs.line-scdn.net/{}".format(contact.pictureStatus),
                                                                "size": "full",
                                                                "aspectRatio": "1:1",
                                                                "aspectMode": "fit",
                                                                "action": {
                                                                    "type": "uri",
                                                                    "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                                                                }
                                                            }
                                                        }
                                                    }
                                                    sendTemplate(to, data)                  
                                                except:
                                                    pass
                        elif cmd.startswith("stealcv "):
                            if msg.toType == 2:                   
                                _name = removeCmd("stealcv", text)
                                gs = zarifoglu.getGroup(to)
                                targets = []
                                for g in gs.members:
                                    if _name in g.displayName.lower():
                                        targets.append(g.mid)
                                        if targets == []:
                                            zarifoglu.sendMessage(to,"Not found.")
                                        else:
                                            for target in targets:
                                                try:
                                                    M = Message()
                                                    M.to = to
                                                    M.contentType = 13
                                                    M.contentMetadata = {'mid': target}
                                                    contact = zarifoglu.getContact(target)
                                                    data = {
                                                        "type": "flex",
                                                        "altText": settings["bayrak"],
                                                        "contents": {
                                                            "type": "bubble",
                                                            "hero": {
                                                                "type": "image",
                                                                "url": str(zarifoglu.getProfileCoverURL(target)),
                                                                "size": "full",
                                                                "aspectRatio": "1:1",
                                                                "aspectMode": "fit",
                                                                "action": {
                                                                    "type": "uri",
                                                                    "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                                                                }
                                                            }
                                                        }
                                                    }
                                                    sendTemplate(to, data)                  
                                                except:
                                                    pass
                        elif cmd.startswith("locate "):
                            if 'MENTION' in msg.contentMetadata.keys() != None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                userid = "https://line.me/ti/p/~" + zarifoglu.profile.userid
                                G = zarifoglu.getGroupIdsJoined()
                                cgroup = zarifoglu.getGroups(G)
                                groups = zarifoglu.groups
                                ngroup = ""
                                ngroup += "„Äå Locate „Äç\n"
                                no = 0 + 1
                                num = 0
                                for mention in mentionees:
                                    for x in range(len(cgroup)):
                                        gMembMids = [contact.mid for contact in cgroup[x].members]
                                        if mention['M'] in gMembMids:
                                            ngroup += "\n{}. {} | {}".format(str(no), str(cgroup[x].name), str(len(cgroup[x].members)))
                                            no += 1
                                            num += 1
                                    ngroup += "\n\n{} groups".format(str(num))
                                    zarifoglu.sendMessage(to, str(ngroup))
                                if ngroup == "":
                                    zarifoglu.sendMessage(to, "„Äå Locate „Äç\nNot found")
                        elif cmd.startswith("mid "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                ret_ = "„Äå Mid User „Äç"
                                for ls in lists:
                                    ret_ += "\n{}".format(str(ls))
                                zarifoglu.generateReplyMessage(msg.id)
                                zarifoglu.sendReplyMessage(msg.id, to, str(ret_))
                        elif cmd.startswith("pict "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    path = "http://dl.profile.line-cdn.net/"+ zarifoglu.getContact(ls).pictureStatus
                                    zarifoglu.generateReplyMessage(msg.id)
                                    zarifoglu.sendReplyImageWithURL(msg.id, to, str(path))
                                    
                        elif cmd.startswith("cover "):
                            if zarifoglu != None:
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        path = zarifoglu.getProfileCoverURL(ls)
                                        path = str(path)
                                        zarifoglu.generateReplyMessage(msg.id)
                                        zarifoglu.sendReplyImageWithURL(msg.id, to, str(path))
                        elif cmd.startswith("video "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    contact = zarifoglu.getContact(ls)
                                    if contact.videoProfile == None:
                                    	continue
                                    path = "http://dl.profile.line-cdn.net/" + contact.pictureStatus + "/vp"
                                    zarifoglu.generateReplyMessage(msg.id)
                                    zarifoglu.sendReplyVideoWithURL(msg.id, to, str(path))
                        elif cmd.startswith("name "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    contact = zarifoglu.getContact(ls)
                                    zarifoglu.generateReplyMessage(msg.id)
                                    zarifoglu.sendReplyMessage(msg.id, to, "{}".format(str(contact.displayName)))
                        elif cmd.startswith("bio "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    contact = zarifoglu.getContact(ls)
                                    zarifoglu.generateReplyMessage(msg.id)
                                    zarifoglu.sendReplyMessage(msg.id, to, "{}".format(str(contact.statusMessage)))
                        elif cmd.startswith("profile "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    contact = zarifoglu.getContact(ls)
                                    cu = zarifoglu.getProfileCoverURL(ls)
                                    path = str(cu)
                                    image = "http://dl.profile.line-cdn.net/" + contact.pictureStatus
                                    zarifoglu.sendMessage(msg.to,"Nama :\n" + contact.displayName + "\nMid :\n" + contact.mid + "\n\nBio :\n" + contact.statusMessage)
                                    zarifoglu.sendImageWithURL(msg.to,image)
                                    zarifoglu.sendImageWithURL(msg.to,path)
                        elif cmd.startswith("info "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    contact = zarifoglu.getContact(ls)
                                    data={"type":"flex","altText":settings["bayrak"],"contents":{"type": "bubble","header": {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "horizontal","contents": [{"type": "image","url": "https://obs.line-scdn.net/{}".format(contact.pictureStatus),"size": "5xl","aspectMode": "cover","aspectRatio": "1:1","flex": 1,"backgroundColor": "#000000","align": "center"},{"type": "box","layout": "horizontal","contents": [{"type": "text","text": "PROFILE","size": "xs","color": "#000000","weight": "bold","align": "center","gravity": "center"}],"backgroundColor": "#ffffff","paddingAll": "2px","paddingStart": "4px","paddingEnd": "4px","flex": 0,"position": "absolute","offsetStart": "18px","offsetTop": "18px","cornerRadius": "100px","width": "60px","height": "25px"}],"backgroundColor": "#000000"}],"paddingAll": "0px"},"body": {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [{"type": "text","contents": [],"size": "xl","wrap": True,"text": "{}".format(contact.displayName),"color": "#ffffff","weight": "bold"}],"spacing": "sm"},{"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [{"type": "text","contents": [],"size": "sm","wrap": True,"align": "start","margin": "lg","color": "#000000","text": "{}".format(contact.statusMessage)}]}],"paddingAll": "30px","backgroundColor": "#F0FFFF","cornerRadius": "2px","margin": "xxl"}]}],"paddingAll": "20px","backgroundColor": "#000000"}}}
                                    sendTemplate(to, data)
                        elif cmd.startswith("timeline "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                list = []
                                for mention in mentionees:
                                   list.append(mention["M"])
                                for ls in list:
                                    try:
                                        getTimeLine(receiver, ls)
                                    except:
                                        zarifoglu.sendMessage(receiver, "Invalid steal")
                        elif cmd.startswith("contact "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    contact = zarifoglu.getContact(ls)
                                    mi_d = contact.mid
                                    zarifoglu.sendContact(to, mi_d)
                        elif cmd.startswith("changevideourl"):
                            link = removeCmd("changevideourl", text)
                            contact = zarifoglu.getContact(sender)
                            Myflex5(to, "Type: Profile\n ‚å¨ Detail: Change video url\n ‚å¨ Status: Download...")
                            print("Sedang Mendownload Data ~")
                            pic = "http://dl.profile.line-cdn.net/{}".format(contact.pictureStatus)
                            subprocess.getoutput('youtube-dl --format mp4 --output TeamAnuBot.mp4 {}'.format(link))
                            pict = zarifoglu.downloadFileURL(pic)
                            vids = "TeamAnuBot.mp4"
                            time.sleep(4)
                            changeVideoAndPictureProfile(pict, vids)
                            Myflex5(to, "Type: Profile\n ‚å¨ Detail: Change video url\n ‚å¨ Status: Succes")
                            os.remove("TeamAnuBot.mp4")
                        elif cmd.startswith("set flag: "):
                            sep = msg.text.split(": ")
                            anu = msg.text.replace(sep[0] + ": ","")
                            gwcool["squad"] = anu
                            Myflex5(to,"Squad flag name changed to " + settings["bayrak"])
                        elif cmd.startswith("set bgcolor: "):
                            sep = msg.text.split(": ")
                            anu = msg.text.replace(sep[0] + ": ","")
                            setbot["background"] = anu
                            Myflex5(to,"„Äå Template Color „Äç\nBackground color changed to " + setbot["background"])
                        elif cmd.startswith("set textcolor: "):
                            sep = msg.text.split(": ")
                            anu = msg.text.replace(sep[0] + ": ","")
                            setbot["text"] = anu
                            Myflex5(to,"„Äå Template Color „Äç\nText color changed to " + setbot["text"])
                        elif cmd.startswith("set sepcolor: "):
                            sep = msg.text.split(": ")
                            anu = msg.text.replace(sep[0] + ": ","")
                            setbot["separator"] = anu
                            Myflex5(to,"„Äå Template Color „Äç\nSeparator color changed to " + setbot["separator"])                            
#=====================================================================
                        elif cmd == "autojoin":
                            if settings["autoJoin"] == True:a = "Enabled"
                            else:a = "Disabled"
                            if wait["Members"]:
                                b = "{}".format(int(wait["Members"]))
                            else:b = "0"
                            key = settings['keyCommand']
                            key = key.title()
                            if settings['setKey'] == False:key = ""
                            Myflex5(to, "„Äå Auto Join „Äç\nEvent Trigger:\n Autojoin: "+a+"\n Stage: "+b+"\n\nCommand:\n Autojoin\n ‚å¨ Usage: "+key+" autojoin on|off\n ‚å¨ Usage: "+key+" autojoin set „Äånumb„Äç")
                        elif cmd.startswith("autojoin set "):
                            msg.text = zarifoglu.mycmd(msg.text,wait)
                            wait["Members"] = int(msg.text.split(" ")[2])
                            Myflex5(msg.to, " „Äå Autojoin „Äç\nType: Minim Members\nStatus: Success Set\nTo: {} Members".format(wait["Members"]))
                        elif cmd == "autojoin on":
                            if settings['autoJoin'] == True:
                                msgs=" „Äå Auto Join „Äç\nAuto Join already set to ENABLED‚ô™"
                            else:
                                msgs=" „Äå Auto Join „Äç\nAuto Join has been set to ENABLED‚ô™"
                                settings['autoJoin']=True
                            Myflex5(msg.to, msgs)
                        elif cmd == "autojoin off":
                            if settings['autoJoin'] == False:
                                msgs=" „Äå Auto Join „Äç\nAuto Join already set to DISABLED‚ô™"
                            else:
                                msgs=" „Äå Auto Join „Äç\nAuto Join has been set to DISABLED‚ô™"
                                settings['autoJoin']=False
                            Myflex5(msg.to, msgs)

                        elif cmd.startswith("autojoin msg set "):
                            text_ = removeCmd("autojoin msg set", text)
                            try:
                                jointag["jointag"] = text_
                                Myflex5(to,"„Äå Autojoin Mesajƒ± „Äç\nDeƒüi≈ütirildi : " + text_)
                            except:
                                Myflex5(to,"„Äå Autojoin Mesajƒ± „Äç\nMesaj deƒüi≈ütirilemedi")

                        elif cmd == "autoblock on":
                            if blocked["autoBlock"] == True:
                                msgs=" „Äå Block „Äç\nAutoBlock already Enable‚ô™"
                            else:
                                msgs=" „Äå Block „Äç\nAutoBlock set to Enable‚ô™"
                                blocked["autoBlock"] = True
                            Myflex5(to, msgs)
                        elif cmd == "autoblock off":
                            if blocked["autoBlock"] == False:
                                msgs=" „Äå  Block „Äç\nAutoBlock already DISABLED‚ô™"
                            else:
                                msgs=" „Äå  Block  „Äç\nAutoBlock set to DISABLED‚ô™"
                                blocked["autoBlock"] = False
                            Myflex5(to, msgs)
                        elif cmd == "add responsticker":
                            sets["messageStickerz"]["addStatusz"] = True
                            sets["messageStickerz"]["addNamez"] = "responSticker"
                            Myflex5(to, "Send a sticker")
                        elif cmd == "untag":
                            sets["messageStickerz"]["listStickerz"]["responSticker"] = None
                            Myflex5(to, "OFF")
                        elif cmd == "responsticker on":
                            if sets["tagsticker"] == True:
                                msgs=" „Äå Respon „Äç\nRespon Sticker already Enable‚ô™"
                            else:
                                msgs=" „Äå Respon „Äç\nRespon Sticker set to Enable‚ô™"
                                sets["tagsticker"] = True
                            Myflex5(to, msgs)
                        elif cmd == "responsticker off":
                            if sets["tagsticker"] == False:
                                msgs=" „Äå  Respon „Äç\nRespon Sticker already DISABLED‚ô™"
                            else:
                                msgs=" „Äå  Respon  „Äç\nRespon Sticker set to DISABLED‚ô™"
                                sets["tagsticker"] = False
                            Myflex5(to, msgs)
							
                        elif cmd == "selam on":
                            if selam['selam'] == True:
                                msgs=" „Äå Selam Alma „Äç\nSelam Alma Ayarlandƒ± ETKƒ∞N üáπüá∑"
                            else:
                                msgs=" „Äå Selam Alma „Äç\nSelam Alma Ayarlandƒ± ETKƒ∞N üáπüá∑"
                                selam['selam']=True
                            Myflex5(msg.to, msgs)
                        elif cmd == "selam off":
                            if selam['selam'] == False:
                                msgs=" „Äå Selam Alma „Äç\nSelam Alma Ayarlandƒ± ENGELLƒ∞ üáπüá∑"
                            else:
                                msgs=" „Äå Selam Alma „Äç\nSelam Alma Ayarlandƒ± ENGELLƒ∞ üáπüá∑"
                                selam['selam']=False
                            Myflex5(msg.to, msgs)
#=====================================================================
                        elif cmd == "tbanlist":
                            if apalo["Talkblacklist"] == {}:
                              Myflex5(to,"Nothing Talkban user")
                            else:
                              ma = ""
                              a = 0
                              for m_id in apalo["Talkblacklist"]:
                                  a = a + 1
                                  end = '\n'
                                  ma += str(a) + ". " +zarifoglu.getContact(m_id).displayName + "\n"
                              Myflex5(to,"List TalkBan :\n\n"+ma+"\nTotal %s Talkban User" %(str(len(apalo["Talkblacklist"]))))
                        elif cmd == "getreader" and sender == zarifogluMID:
                            key = settings['keyCommand'].title()
                            if settings['setKey'] == False:key = ''
                            if settings["readerPesan"] is not None:ret = " „Äå Get Reader „Äç\nGetreader Message : " + str(settings["readerPesan"])
                            else:ret = " „Äå Get Reader „Äç\nGetreader Message: None"
                            b = settings["messageSticker"]["listSticker"]["readerSticker"]
                            a = b["STKPKGID"]
                            anu = zarifoglu.shop.getProduct(packageID=int(a), language='ID', country='ID')
                            if settings['messageSticker']['listSticker']['readerSticker']['status'] == True:c = anu.title
                            else:c = 'null'
                            #if settings['getReader'][receiver]['status'] == True:ss = "True"
                            #else:ss = "False"
                            try:
                                #ret += "Getreader Status: " + str(ss)
                                ret += "\nGetreader Sticker: " + str(c)
                                ret += "\n\n Command:\n"
                                ret += key+"Getreader on|off\n"+key+"Add|Del getreaderSticker"+key+"\nGetreader msg set [text]"
                                Myflex5(to, ret)
                            except Exception as e:
                                zarifoglu.sendMessage(to, str(e))
                        elif cmd == "add getreadersticker" and sender == zarifogluMID:
                            settings["messageSticker"]["addStatus"] = True
                            settings["messageSticker"]["addName"] = "readerSticker"
                            Myflex5(to, "please send a sticker.")
                        elif cmd == "del getreadersticker" and sender == zarifogluMID:
                            settings["messageSticker"]["listSticker"]["readerSticker"]["status"] = False
                            zarifoglu.sendMessage(to, "succes delete a sticker.")
                        elif cmd == "getreader on" and sender == zarifogluMID:
                            gold1["goldTemp"][receiver] = []
                            #settings['siderTemp'][receiver]['status'] = True
                            Myflex5(to, "Getreader set to on.üáπüá∑")
                        elif cmd == "getreader off" and sender == zarifogluMID:
                            if receiver in gold1["goldTemp"]:
                                del gold1["goldTemp"][receiver]
                                #settings['siderTemp'][receiver]['status'] = False
                                Myflex5(to, "Getreader set to off.üáπüá∑")
                        elif cmd.startswith("getreader msg set ") and sender == zarifogluMID:
                            text_ = removeCmd("getreader msg set", text)
                            try:
                                gold1["goldmesaj"] = text_
                                Myflex5(to,"„Äå Get Reader „Äç\nChanged to : " + text_)
                            except:
                                Myflex5(to,"„ÄåGet Reader „Äç\nFailed to replace message")
                        elif cmd == "reader on" and sender == zarifogluMID:
                            tailah["siderTemp"][receiver] = []
                            #settings['siderTemp'][receiver]['status'] = True
                            Myflex5(to, "Getreader set to on.")
                        elif cmd == "reader off" and sender == zarifogluMID:
                            if receiver in tailah["siderTemp"]:
                                del tailah["siderTemp"][receiver]
                                #settings['siderTemp'][receiver]['status'] = False
                                Myflex5(to, "Getreader set to off.")
                        elif cmd.startswith("reader msg set ") and sender == zarifogluMID:
                            text_ = removeCmd("reader msg set", text)
                            try:
                                tailah["siderPesan"] = text_
                                Myflex5(to,"„Äå Get Reader „Äç\nChanged to : " + text_)
                            except:
                                Myflex5(to,"„ÄåGet Reader „Äç\nFailed to replace message")
                        elif cmd.startswith("respon msg set ") and sender == zarifogluMID:
                            text_ = removeCmd("respon msg set", text)
                            try:
                                temptag["pesanya"] = text_
                                Myflex5(to,"„Äå Respon Tag „Äç\nChanged to : " + text_)
                            except:
                                Myflex5(to,"„Äå Respon Tag „Äç\nFailed to replace message")
                        elif cmd.startswith("leavemsg set ") and sender == zarifogluMID:
                            text_ = removeCmd("leavemsg set", text)
                            try:
                                lvin["textnya"] = text_
                                Myflex5(to,"„Äå LeaveMsg „Äç\nChanged to : " + text_)
                            except:
                                Myflex5(to,"„Äå LeaveMsg „Äç\nFailed to replace message")

                        elif cmd.startswith("welcometemp msg set ") and sender == zarifogluMID:
                            text_ = removeCmd("welcometemp msg set", text)
                            try:
                                wmin2["textnya"] = text_
                                Myflex5(to,"„Äå WelcomeMsg „Äç\nChanged to : " + text_)
                            except:
                                Myflex5(to,"„Äå WelcomeMsg „Äç\nFailed to replace message")
                        elif cmd.startswith("welcomemsg set ") and sender == zarifogluMID:
                            text_ = removeCmd("welcomemsg set", text)
                            try:
                                wmin["textnya"] = text_
                                Myflex5(to,"„Äå WelcomeMsg „Äç\nChanged to : " + text_)
                            except:
                                Myflex5(to,"„Äå WelcomeMsg „Äç\nFailed to replace message")
                        elif cmd.startswith("autoblock msg set ") and sender == zarifogluMID:
                            text_ = removeCmd("autoblock msg set", text)
                            try:
                                blocked["pesanya"] = text_
                                Myflex5(to,"„Äå AutoBlock „Äç\nChanged to : " + text_)
                            except:
                                Myflex5(to,"„Äå AutoBlock „Äç\nFailed to replace message")
#=====================================================================
                        elif cmd == "radar" and sender == zarifogluMID:
                                key = settings['keyCommand'].title()
                                if settings['setKey'] == False:key = ''
                                if settings["goldReader"] is not None:ret = " „Äå Radar „Äç\nReader Message : " + str(settings["goldReader"])
                                else:ret = " „Äå Radar „Äç\nReader Message: None"
                                b = settings["messageSticker"]["listSticker"]["readerSticker"]
                                a = b["STKPKGID"]
                                anu = zarifoglu.shop.getProduct(packageID=int(a), language='ID', country='ID')
                                if settings['messageSticker']['listSticker']['readerSticker']['status'] == True:c = anu.title
                                else:c = 'null'
                            #if settings['getReader'][receiver]['status'] == True:ss = "True"
                            #else:ss = "False"
                                try:
                                #ret += "Getreader Status: " + str(ss)
                                    ret += "\nReader Sticker: " + str(c)
                                    ret += "\n\n Command:\n"
                                    ret += key+"Radar on|off\n"+key+"\nRadar msg set [text]"
                                    Myflex5(to, ret)
                                except Exception as e:
                                    zarifoglu(to, str(e))

                        elif cmd.startswith("radar msg set ") and sender == zarifogluMID:
                                text_ = removeCmd("radar msg set", text)
                                try:
                                    settings["goldReader"] = text_
                                    Myflex5(msg.to," „Äå Reader „Äç\nChanged to : " + text_)
                                except:
                                    Myflex5(msg.to," „Äå Reader „Äç\nFailed to replace message")

                        elif cmd == "radar on" and sender == zarifogluMID:
                                settings["getReader"][receiver] = []
                            #settings['getReader'][receiver]['status'] = True
                                Myflex5(msg.to, "Radar set to on.")

                        elif cmd == "radar off" and sender == zarifogluMID:
                                if receiver in settings["getReader"]:
                                    del settings["getReader"][receiver]
                                #settings['getReader'][receiver]['status'] = False
                                    Myflex5(msg.to, "Radar set to off.")
#=====================================================================
                        elif cmd == "autoread":
                            if settings["autoRead"] == True:a = "Enabled"
                            else:a = "Disabled"
                            if settings["autoRead1"] == True:b = "Enabled"
                            else:b = "Disabled"
                            key = settings['keyCommand']
                            key = key.title()
                            if settings['setKey'] == False:key = ""
                            Myflex5(to, " „Äå Auto Read „Äç\nEvent Trigger:\n1 on Personal: "+a+"\n2 on Group: "+b+"\n\nCommand:\n Autoread\n Usage: "+key+" autoread on 1|2 or off 1|2")
                        elif cmd == "autoread on 1":
                            if settings["autoRead"] == True:
                                msgs=" „Äå Auto Read „Äç\nAutoread in Private message set to ENABLED‚ô™\nMessage will not Affected.."
                            else:
                                msgs=" „Äå Auto Read „Äç\nAutoread in Private message already set to ENABLED‚ô™\nMessage will not Affected.."
                                settings["autoRead"]=True
                            Myflex5(msg.to, msgs)
                        elif cmd == "autoread off 1":
                            if settings["autoRead"] == False:
                                msgs=" „Äå Auto Read „Äç\nAutoread in Private message set to DISABLED‚ô™\nMessage will Affected.."
                            else:
                                msgs=" „Äå Auto Read „Äç\nAutoread in Private message already set to DISABLED‚ô™\nMessage will Affected.."
                                settings["autoRead"]=False
                            Myflex5(msg.to, msgs)
                        elif cmd == "autoread on 2":
                            if settings["autoRead1"] == True:
                                msgs =" „Äå Auto Read „Äç\nAutoread in Group set to ENABLED‚ô™\nMessage will not Affected.."
                            else:
                                msgs=" „Äå Auto Read „Äç\nAutoread in Group already set to ENABLED‚ô™\nMessage will not Affected.."
                                settings["autoRead1"]=True
                            Myflex5(msg.to, msgs)
                        elif cmd == "autoread off 2":
                            if settings["autoRead1"] == False:
                                msgs=" „Äå Auto Read „Äç\nAutoread in Group set to DISABLED‚ô™\nMessage will Affected.."
                            else:
                                msgs=" „Äå Auto Read „Äç\nAutoread in Group set to DISABLED‚ô™\nMessage will Affected.."
                                settings["autoRead1"]=False
                            Myflex5(msg.to, msgs)
							
                        elif cmd == "autoread on 3":
                            if settings["autoRead2"] == True:
                                msgs =" „Äå Auto Read „Äç\nAutoread in Room set to ENABLED‚ô™\nMessage will not Affected.."
                            else:
                                msgs=" „Äå Auto Read „Äç\nAutoread in Room already set to ENABLED‚ô™\nMessage will not Affected.."
                                settings["autoRead2"]=True
                            Myflex5(msg.to, msgs)
                        elif cmd == "autoread off 3":
                            if settings["autoRead2"] == False:
                                msgs=" „Äå Auto Read „Äç\nAutoread in Room set to DISABLED‚ô™\nMessage will Affected.."
                            else:
                                msgs=" „Äå Auto Read „Äç\nAutoread in Room set to DISABLED‚ô™\nMessage will Affected.."
                                settings["autoRead2"]=False
                            Myflex5(msg.to, msgs)
							
                        elif cmd == "sleepmode" and sender == zarifogluMID:
                            if settings["replyPesan"] is not None:
                                Myflex5(to,"„Äå Sleep Mode „Äç\nSet Sleep Mode : " + str(settings["replyPesan"]))
                                msgSticker = settings["messageSticker"]["listSticker"]["replySticker"]
                                if msgSticker != None:
                                    sid = msgSticker["STKID"]
                                    spkg = msgSticker["STKPKGID"]
                                    sver = msgSticker["STKVER"]
                                    sendSticker(to, sver, spkg, sid)
                            else:
                                Myflex5(to,"Set Sleep Mode  : No messages are set")
                        elif cmd.startswith("sleepmode msg set ") and sender == zarifogluMID:
                            text_ = removeCmd("sleepmode msg set", text)
                            try:
                                settings["replyPesan"] = text_
                                Myflex5(to,"„Äå Sleep Mode „Äç\nChanged to : " + text_)
                            except:
                                zarifoglu.sendMessage(to,"„Äå Sleep Mode „Äç\nFailed to replace message")
                        elif cmd == "autolike on":
                            if wait["autoLike"] == True:
                                msgs=" „Äå Like „Äç\nAutoLike already Enable‚ô™"
                            else:
                                msgs=" „Äå Like „Äç\nAutoLike set to Enable‚ô™"
                                wait["autoLike"] = True
                            Myflex5(to, msgs)
                        elif cmd == "autolike off":
                            if wait["autoLike"] == False:
                                msgs=" „Äå Like „Äç\nAutoLike already DISABLED‚ô™"
                            else:
                                msgs=" „Äå Like „Äç\nAutoLike set to DISABLED‚ô™"
                                wait["autoLike"] = False
                            Myflex5(to, msgs)
                        elif cmd == "antitag on":
                            if settings["notag"] == True:
                                msgs=" „Äå Anti Tag „Äç\nAnti Tag already Enable‚ô™"
                            else:
                                msgs=" „Äå Anti Tag „Äç\nAnti Tag set to Enable‚ô™"
                                settings["notag"] = True
                            Myflex5(to, msgs)
                        elif cmd == "antitag off":
                            if settings["notag"] == False:
                                msgs=" „Äå Anti Tag „Äç\nAnti Tag already DISABLED‚ô™"
                            else:
                                msgs=" „Äå Anti Tag „Äç\nAnti Tag set to DISABLED‚ô™"
                                settings["notag"] = False
                            Myflex5(to, msgs)
                        elif cmd == "sleepmode on":
                            if settings["autoReply"] == True:
                                msgs=" „Äå Sleep Mode „Äç\nSleep Mode already Enable‚ô™"
                            else:
                                msgs=" „Äå Sleep Mode „Äç\nSleep Mode set to Enable‚ô™"
                                settings["autoReply"] = True
                            Myflex5(to, msgs)
                        elif cmd == "sleepmode off":
                            if settings["autoReply"] == False:
                                msgs=" „Äå Sleep Mode „Äç\nSleep Mode already DISABLED‚ô™"
                            else:
                                msgs=" „Äå Sleep Mode „Äç\nSleep Mode set to DISABLED‚ô™"
                                settings["autoReply"] = False
                            Myflex5(to, msgs)
                        elif cmd == "resendchat on":
                            if settings["unsendMessage"] == True:
                                msgs=" „Äå Resend Chat „Äç\nResend Chat already Enable‚ô™"
                            else:
                                msgs=" „Äå Resend Chat „Äç\nResend Chat set to Enable‚ô™"
                                settings["unsendMessage"] = True
                            Myflex5(to, msgs)
                        elif cmd == "resendchat off":
                            if settings["unsendMessage"] == False:
                                msgs=" „Äå Resend Chat „Äç\nResend Chat already DISABLED‚ô™"
                            else:
                                msgs=" „Äå Resend Chat „Äç\nResend Chat set to DISABLED‚ô™"
                                settings["unsendMessage"] = False
                            Myflex5(to, msgs)
                        elif cmd == "respon on":
                            if temptag["stealtag"] == True:
                                msgs=" „Äå Respon „Äç\nRespon Tag already Enable‚ô™"
                            else:
                                msgs=" „Äå Respon „Äç\nRespon  Tag set to Enable‚ô™"
                                temptag["stealtag"] = True
                            Myflex5(to, msgs)
                        elif cmd == "respon off":
                            if temptag["stealtag"] == False:
                                msgs=" „Äå Respon „Äç\nRespon Tag already DISABLED‚ô™"
                            else:
                                msgs=" „Äå Respon „Äç\nRespon Tag set to DISABLED‚ô™"
                                temptag["stealtag"] = False
                            Myflex5(to, msgs)
                        elif cmd == "like on":
                            if komen["komenan"] == True:
                                msgs=" „Äå Like Post „Äç\nAuto Like Post already Enable‚ô™"
                            else:
                                msgs=" „Äå Like Post „Äç\nAuto Like Post set to Enable‚ô™"
                                komen["komenan"] = True
                            Myflex5(to, msgs)
                        elif cmd == "like off":
                            if komen["komenan"] == False:
                                msgs=" „Äå Like Post „Äç\nAuto Like Post already DISABLED‚ô™"
                            else:
                                msgs=" „Äå Like Post „Äç\nAuto Like Post set to DISABLED‚ô™"
                                komen["komenan"] = False
                            Myflex5(to, msgs)
                        elif cmd == "welcomemsg on":
                            if wmin["wMessage"] == True:
                                msgs=" „Äå Welcome „Äç\nWelcomemsg already Enable‚ô™"
                            else:
                                msgs=" „Äå Welcome „Äç\nWelcomemsg set to Enable‚ô™"
                                wmin["wMessage"] = True
                            Myflex5(to, msgs)
                        elif cmd == "welcomemsg off":
                            if wmin["wMessage"] == False:
                                msgs=" „Äå wMessage „Äç\nWelcomemsg already DISABLED‚ô™"
                            else:
                                msgs=" „Äå Welcome „Äç\nWelcomemsg set to DISABLED‚ô™"
                                wmin["wMessage"] = False
                            Myflex5(to, msgs)

                        elif cmd == "welcometemp on":
                            if wmin2["wMessage"] == True:
                                msgs=" „Äå Welcome „Äç\nWelcomemsg already Enable‚ô™"
                            else:
                                msgs=" „Äå Welcome „Äç\nWelcomemsg set to Enable‚ô™"
                                wmin2["wMessage"] = True
                            Myflex5(to, msgs)
                        elif cmd == "welcometemp off":
                            if wmin2["wMessage"] == False:
                                msgs=" „Äå wMessage „Äç\nWelcomemsg already DISABLED‚ô™"
                            else:
                                msgs=" „Äå Welcome „Äç\nWelcomemsg set to DISABLED‚ô™"
                                wmin2["wMessage"] = False
                            Myflex5(to, msgs)

                        elif cmd == "leavemsg on":
                            if lvin["lMessage"] == True:
                                msgs=" „Äå Leave „Äç\nLeavemsg already Enable‚ô™"
                            else:
                                msgs=" „Äå Leave „Äç\nLeavemsg set to Enable‚ô™"
                                lvin["lMessage"] = True
                            Myflex5(to, msgs)
                        elif cmd == "leavemsg off":
                            if lvin["lMessage"] == False:
                                msgs=" „Äå  Leave „Äç\nLeavemsg already DISABLED‚ô™"
                            else:
                                msgs=" „Äå  Leave  „Äç\nLeavemsg set to DISABLED‚ô™"
                                lvin["lMessage"] = False
                            Myflex5(to, msgs)
                        elif cmd == "wut on":
                            if wuts["wut"] == True:
                                msgs=" „Äå Respon „Äç\nRespon Tag already Enable‚ô™"
                            else:
                                msgs=" „Äå Respon „Äç\nRespon  Tag set to Enable‚ô™"
                                wuts["wut"] = True
                            Myflex5(to, msgs)
                        elif cmd == "wut off":
                            if wuts["wut"] == False:
                                msgs=" „Äå Respon „Äç\nRespon Tag already DISABLED‚ô™"
                            else:
                                msgs=" „Äå Respon „Äç\nRespon Tag set to DISABLED‚ô™"
                                wuts["wut"] = False
                        elif cmd == "mc on":
                            if mcroom['leaveMC'] == True:
                                msgs=" „Äå Mchat „Äç\nMc already set to ENABLED‚ô™"
                            else:
                                msgs=" „Äå Mchat „Äç\nMc has been set to ENABLED‚ô™"
                                mcroom['leaveMC']=True
                            Myflex5(msg.to, msgs)
                        elif cmd == "mc off":
                            if mcroom['leaveMC'] == False:
                                msgs=" „Äå Mchat „Äç\nMc already set to DISABLED‚ô™"
                            else:
                                msgs=" „Äå Mchat „Äç\nMc has been set to DISABLED‚ô™"
                                mcroom['leaveMC']=False
                            Myflex5(msg.to, msgs)
                        elif cmd == "wimage on":
                          wcimage = msg.to
                          Myflex5(msg.to, 'Send image.')
#=====================================================================
                        if cmd == "prankcall on" and msg.toType == 2:
                            if to not in wait["notificationCallPrank"]:
                                wait["notificationCallPrank"].append(to)
                                Myflex5(to, " „Äå Group Call „Äç\nNotification Prank Call set to on‚ô™")
                            else:
                                Myflex5(to, " „Äå Group Call „Äç\nNotification Prank Call already on‚ô™")
                        if cmd == "prankcall off" and msg.toType == 2:
                            if to in wait["notificationCallPrank"]:
                                wait["notificationCallPrank"].remove(to)
                                Myflex5(to, " „Äå Group Call „Äç\nNotification Prank Call set to off‚ô™")
                            else:
                                Myflex5(to, " „Äå Group Call „Äç\nNotification Prank Call set already off‚ô™")
                        if cmd == "groupcall on" and msg.toType == 2:
                            if to not in wait["notificationCall"]:
                                wait["notificationCall"].append(to)
                                Myflex5(to, " „Äå Group Call „Äç\nNotification GroupCall set to on‚ô™")
                            else:
                                Myflex5(to, " „Äå Group Call „Äç\nNotification GroupCall already on‚ô™")
                        if cmd == "groupcall off" and msg.toType == 2:
                            if to in wait["notificationCall"]:
                                wait["notificationCall"].remove(to)
                                Myflex5(to, " „Äå Group Call „Äç\nNotification GroupCall set to off‚ô™")
                            else:
                                Myflex5(to, " „Äå Group Call „Äç\nNotification GroupCall already off‚ô™")
                        if cmd == "responcall off" and sender == zarifogluMID:
                            if wait["responCall"] == True:
                                wait["responCall"] = False
                                Myflex5(to, " „Äå Respon Call „Äç\nNotification Receive Call set to off‚ô™")
                            else:
                                Myflex5(to, " „Äå Respon Call „Äç\nNotification Receive Call already off‚ô™")
                        if cmd == "responcall on" and sender == zarifogluMID:
                            if wait["responCall"] == False:
                                wait["responCall"] = True
                                Myflex5(to, " „Äå Respon Call „Äç\nNotification Receive Call set to on‚ô™")
                            else:
                                Myflex5(to, " „Äå Respon Call „Äç\nNotification Receive Call set to on‚ô™")
                        if cmd.startswith("responcall set"):
                            if len(cmd.split("\n")) >= 2:
                                wait["pesanCall"] = cmd.replace(cmd.split("\n")[0]+"\n","").replace('|','@!')
                                zarifoglu.sendMessage(to," „Äå ResponCall „Äç\nRespon Receive Call message has been set to:\n" + wait["pesanCall"])
                        if cmd.startswith("fcg set") and msg.toType == 2:
                            if len(cmd.split("\n")) >= 2:
                                wait["prankCall"]["audio"] = cmd.replace(cmd.split("\n")[0]+"\n","").replace('|','@!')
                                zarifoglu.sendMessage(to," „Äå PrankCall „Äç\nPrankCall Audio message has been set to:\n" + wait["prankCall"]["audio"])
                        if cmd.startswith("vcg set") and msg.toType == 2:
                            if len(cmd.split("\n")) >= 2:
                                wait["prankCall"]["video"] = cmd.replace(cmd.split("\n")[0]+"\n","").replace('|','@!')
                                zarifoglu.sendMessage(to," „Äå PrankCall „Äç\nPrankCall Video message has been set to:\n" + wait["prankCall"]["video"])
                        if cmd.startswith("live set") and msg.toType == 2:
                            if len(cmd.split("\n")) >= 2:
                                wait["prankCall"]["live"] = cmd.replace(cmd.split("\n")[0]+"\n","").replace('|','@!')
                                zarifoglu.sendMessage(to," „Äå PrankCall „Äç\nPrankCall Live message has been set to:\n" + wait["prankCall"]["live"])
                        if text.lower().startswith('autolike set'):
                            if len(text.lower().split("\n")) >= 2:
                                likers['autoLike']['comment'] = msg.text.replace(msg.text.split("\n")[0]+"\n","")
                                Myflex5(to, " „Äå AutoLike „Äç\nAutoLike comment message has been set to:\n" + likers['autoLike']['comment'])
                        elif cmd.startswith('autolike comment ') and sender == zarifogluMID:
                            name = removeCmd("autolike comment",text)
                            wait["autoLike"]['comment'] = str(name)
                            zarifoglu.sendMessage(to,"„Äå AutoLike „Äç\nAutoLike message has been set to:\n" + wait["autoLike"]['comment'])
                        if text.lower().startswith('smule recording '):
                            a = requests.get(f'https://www.smule.com/s/profile/performance/{text.lower().split(" ")[2]}/sing?offset={int(msg.text.split(" ")[4])*25-25}&size=25').json()
                            if a['list'] == []:
                                return Myflex5(to, 'Page Blank')
                            ret = []
                            if len(text.lower().split(' ')) == 5:
                                no = int(text.lower().split(' ')[4])*25-25
                                for i in a['list']:
                                    no += 1
                                    if i['type'] == "audio":
                                        buttons = "AUDIO"
                                    else:
                                        buttons = "VIDEO"
                                    ret.append({'type': 'bubble','header': {"type": "box","layout": "horizontal","contents": [{"type": "text","text": "SMULE RECORDING","weight": "bold","color": "#000000","size": "xl"}]},"hero": {"type": "image","url": f'{i["cover_url"]}',"size": "full","aspectRatio": "20:13","aspectMode": "fit","action": {"type": "uri","uri": f'https://smule.com{i["web_url"]}'}},"body": {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","margin": "lg","spacing": "sm","contents": [{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Title","color": "#000000","size": "sm","flex": 3},{"type": "text","text": f"{i['title']}","color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","color": "#000000","text": "Listening","size": "sm","flex": 3},{"type": "text","text": f"{i['stats']['total_listens']} People","color": "#262423","wrap": True,"size": "sm","flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Comment","color": "#000000","size": "sm","flex": 3},{"type": "text","text": f"{i['stats']['total_comments']}","color": "#262423","size": "sm","wrap": True,"flex": 5}]},{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Loves","color": "#000000","size": "sm","flex": 3},{"type": "text","text": f"{i['stats']['total_loves']} Loved","color": "#262423","flex": 5,"size": "sm","wrap": True}]}]}]},"footer": {"type": "box","layout": "horizontal","spacing": "sm","contents": [{"type": "button","style": "link","height": "sm","action": {"type": "uri","label": f"SEND {buttons}","uri": f'line://app/1564665740-ja80DmN6?type=text&text=Smule%20Recording%20{text.lower().split(" ")[2]}%20Page%20{int(msg.text.split(" ")[4])}%20{no}'}}]}})
                                k = len(ret)//10
                                for aa in range(k+1):
                                    data = {"messages": [{"type": "flex","altText": "SMULE RECORDING","contents": {"type": "carousel","contents": ret[aa*10 : (aa+1)*10]}}]}
                                    sendCarousel(to, data)
                            if len(text.lower().split(' ')) == 6:
                                if int(text.lower().split(' ')[4]) == 1:g = int(text.lower().split(' ')[5])-1
                                else:g = int(text.lower().split(' ')[5])-1;g= (((int(text.lower().split(' ')[4])*25-25)//(int(text.lower().split(' ')[4])-1))-(-int(text.lower().split(' ')[5])+25*int(text.lower().split(' ')[4])))-1
                                music = a['list'][g]
                                r = requests.get('https://www.smuledownloader.download/p/{}'.format(music['key'])).text
                                r = BeautifulSoup(r,'html5lib')
                                if music['type'] == 'audio':
                                    anu = r.select('a')[4].get('href').replace('\n','')
                                    haha = ' „Äå Smule Recording „Äç\nTitle: {}\nArtis: {}\nType: {}\nEnsemble Type: {}\nStatus: Waiting... For Upload'.format(music['title'],music['artist'],music['type'],music['ensemble_type'])
                                    footer = {"messages": [{"type": "text","text": str(haha),"sentBy":{"label":"SELFBOTS EDITION","iconUrl":"https://obs.line-scdn.net/{}".format(zarifoglu.profile.pictureStatus),"linkUrl":"https://melodichildishz.com"}}]}
                                    sendCarousel(to, footer)
                                    sendCarousel(to,{"messages": [{"type": "audio","altText": "SMULE AUDIO","originalContentUrl": anu, "duration": 60000}]})
                                else:
                                    anu = r.select('a')[7].get('href')
                                    haha = ' „Äå Smule Recording „Äç\nTitle: {}\nArtis: {}\nType: {}\nEnsemble Type: {}\nStatus: Waiting... For Upload'.format(music['title'],music['artist'],music['type'],music['ensemble_type'])
                                    footer = {"messages": [{"type": "text","text": str(haha),"sentBy":{"label":settings["bayrak"],"iconUrl":"https://obs.line-scdn.net/{}".format(zarifoglu.profile.pictureStatus),"linkUrl":"https://melodichildishz.com"}}]}
                                    sendCarousel(to, footer)
                                    sendCarousel(to,{"messages": [{"type": "video","altText": "SMULE VIDEO","originalContentUrl": anu,"previewImageUrl": music['cover_url']}]})
                        if text.lower().startswith('get audio '):
                            hasil = base64.b64decode(text.split(' ')[2])
                            sendCarousel(to,{"messages": [{"type": "audio","altText": "SMULE AUDIO","originalContentUrl": hasil.decode('utf-8'), "duration": 60000}]})
                        if text.lower().startswith('m√ºzik '):
                            _strings = str(text.lower().replace('music ',''))
                            a = requests.get(f'http://api-jooxtt.sanook.com/web-fcgi-bin/web_search?country=id&lang=en&search_input={str(text.lower().replace("mz√ºik ",""))}&sin=10&ein=60').json()
                            ret = []
                            no = 0
                            for i in a['itemlist']:
                                no += 1
                                data = requests.get(f'http://api-jooxtt.sanook.com/web-fcgi-bin/web_get_songinfo?country=id&lang=en&songid={i["songid"]}&https_only=1').json()
                                anu = ub64(f"{data['m4aUrl']}")
                                ret.append(
                                    {
                                        "type": "bubble",
                                        "styles": {
                                            "header": {
                                                "backgroundColor": "{}".format(setbot["background"])
                                            },
                                            "body": {
                                                "backgroundColor": "{}".format(setbot["background"]),
                                                "separator": True,
                                                "separatorColor": "{}".format(setbot["separator"])
                                            },
                                            "footer": {
                                                "backgroundColor": "{}".format(setbot["background"]),
                                                "separator": True,
                                                "separatorColor": "{}".format(setbot["separator"])
                                            }
                                        },
                                        "header": {
                                            "type": "box",
                                            "layout": "horizontal",
                                            "contents": [
                                                {
                                                    "type": "text",
                                                    "text": "JOOX MUSIC",
                                                    "weight": "bold",
                                                    "color": "{}".format(setbot["text"]),
                                                    "size": "xl"
                                                }
                                            ]
                                        },
                                        "hero": {
                                            "type": "image",
                                            "url": data['imgSrc'],
                                            "size": "full",
                                            "action": {
                                                "type": "uri",
                                                "uri": "line://ti/p/~rhynitsme"
                                            }
                                        },
                                        "body": {
                                            "type": "box",
                                            "layout": "vertical",
                                            "contents": [
                                                {
                                                    "type": "box",
                                                    "layout": "vertical",
                                                    "margin": "lg",
                                                    "spacing": "sm",
                                                    "contents": [
                                                        {
                                                            "type": "box",
                                                            "layout": "baseline",
                                                            "spacing": "sm",
                                                            "contents": [
                                                                {
                                                                    "type": "text",
                                                                    "text": "Artist",
                                                                    "color": "{}".format(setbot["text"]),
                                                                    "size": "sm",
                                                                    "flex": 3
                                                                },
                                                                {
                                                                    "type": "text",
                                                                    "text": f"{str(data['msinger'])}",
                                                                    "color": "{}".format(setbot["text"]),
                                                                    "wrap": True,
                                                                    "size": "sm",
                                                                    "flex": 5
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "box",
                                                            "layout": "baseline",
                                                            "spacing": "sm",
                                                            "contents": [
                                                                {
                                                                    "type": "text",
                                                                    "color": "{}".format(setbot["text"]),
                                                                    "text": "Album",
                                                                    "size": "sm",
                                                                    "flex": 3
                                                                },
                                                                {
                                                                    "type": "text",
                                                                    "text": f"{str(data['malbum'])}",
                                                                    "color": "{}".format(setbot["text"]),
                                                                    "wrap": True,
                                                                    "size": "sm",
                                                                    "flex": 5
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "type": "box",
                                                            "layout": "baseline",
                                                            "spacing": "sm",
                                                            "contents": [
                                                                {
                                                                    "type": "text",
                                                                    "text": "Title",
                                                                    "color": "{}".format(setbot["text"]),
                                                                    "size": "sm",
                                                                    "flex": 3
                                                                },
                                                                {
                                                                    "type": "text",
                                                                    "text": f"{str(data['msong'])}",
                                                                    "color": "{}".format(setbot["text"]),
                                                                    "size": "sm",
                                                                    "wrap": True,
                                                                    "flex": 5
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            ]
                                        },
                                        "footer": {
                                            "type": "box",
                                            "layout": "vertical",
                                            "spacing": "sm",
                                            "contents": [
                                                {
                                                    "type": "button",
                                                    "style": "primary",
                                                    "color": "{}".format(setbot["text"]),
                                                    "style": "link",
                                                    "height": "sm",
                                                    "action": {
                                                        "type": "uri",
                                                        "label": "GET AUDIO",
                                                        "uri": f"line://app/1597127494-QDP2OlYl?type=text&text=Get%20Audio%20{anu}"
                                                    }
                                                }
                                            ]
                                        }
                                    }
                                )
                            k = len(ret)//10
                            for aa in range(k+1):
                                aa_ = {"messages": [{"type": "flex","altText": "Joox Music","contents": {"type": "carousel","contents": ret[aa*10 : (aa+1)*10]}}]}
                                sendCarousel(to, aa_)
#=====================================================================
                        elif cmd == "autoadd": 
                            key = settings['keyCommand']
                            key = key.title()
                            b = settings['messageSticker']['listSticker']['addSticker']
                            a = b['STKPKGID']
                            z = zarifoglu.shop.getProduct(packageID=int(a), language='ID', country='ID')
                            if settings["messageSticker"]["listSticker"]["addSticker"]["status"] == True:c = z.title
                            else:c = 'None'
                            if settings['setKey'] == False:key = ""
                            if settings["autoAdd"] == True:
                                if settings["addPesan"] == '':
                                    msgs=" „Äå Auto Add „Äç\nAdd Back: True‚ô™\nAdd Sticker: "+c+"\nAdd Message: False‚ô™\n\n\n"
                                else:
                                    msgs=" „Äå Auto Add „Äç\nAdd Back: True‚ô™\nAdd Sticker: "+c+"\nAdd Message: True‚ô™"
                                    msgs+="\n" + settings["addPesan"] + "\n\n"
                            else:
                                if settings["addPesan"] == '':
                                    msgs=" „Äå Auto Add „Äç\nAdd Back: False‚ô™\nAdd Sticker: "+c+"\nAdd Message: False‚ô™\n\n\n"
                                else:
                                    msgs=" „Äå Auto Add „Äç\nAdd Back: False‚ô™\nAdd Sticker: "+c+"\nAdd Message: True‚ô™"
                                    msgs+="\n" + settings["addPesan"] + "\n"
                            Myflex5(to, msgs+"\nType: Autoadd friend\n  Usage:"+key+" autoadd [on|off]\nType: Autoadd msg setting\n  Usage:"+key+" autoadd msg set <text>\nType: Autoadd Sticker\n  Usage:"+key+" add autoaddsticker\n  Usage:"+key+" del autoaddsticker")
                        elif cmd == "autoadd off":
                            if settings["autoAdd"] == False:
                                msgs=" „Äå Auto Add „Äç\nAuto Add already DISABLED‚ô™\nNote: Auto add message is not affected‚ô™"
                            else:
                                msgs=" „Äå Auto Add „Äç\nAuto Add set to DISABLED‚ô™\nNote: Auto add message is not affected‚ô™"
                                settings['autoAdd']=False
                            Myflex5(to, msgs)
                        elif cmd == "autoadd on":
                            if settings["autoAdd"] == True:
                                msgs=" „Äå Auto Add „Äç\nAuto Add already Enable‚ô™\nNote: Auto add message is not affected‚ô™"
                            else:
                                msgs=" „Äå Auto Add „Äç\nAuto Add set to Enable‚ô™\nNote: Auto add message is not affected‚ô™"
                                settings["autoAdd"]=True
                            Myflex5(to, msgs)
                        elif cmd.startswith('autoadd msg set'):
                            msg.text = zarifoglu.mycmd(msg.text,wait)
                            if len(msg.text.split("\n")) >= 2:
                                settings["addPesan"] = msg.text.replace(msg.text.split("\n")[0]+"\n","").replace('|','@!')
                                Myflex5(msg.to," „Äå Auto Add „Äç\nAuto add message has been set to:\n" + settings["addPesan"])
                        elif cmd == "add autoaddsticker" and sender == zarifogluMID:
                            settings["messageSticker"]["addStatus"] = True
                            settings["messageSticker"]["addName"] = "addSticker"
                            Myflex5(to, " „Äå Auto Add „Äç\nType: Auto add\n ‚å¨ Detail: Add autoadd sticker\n ‚å¨ Status: Send sticker")
                        elif cmd == "del autoaddsticker" and sender == zarifogluMID:
                            settings["messageSticker"]["listSticker"]["addSticker"]["status"] = False
                            Myflex5(to, " „Äå Auto Add „Äç\nType: Auto add\n ‚å¨ Detail: Del autoadd sticket\n ‚å¨ Status: Succes")
                        elif cmd == "add autoresponsticker":
                            if msg.to not in wait["GROUP"]['AR']['S']:
                                wait["GROUP"]['AR']['S'][msg.to] = {'AP':False,'Sticker':{}}
                            wait["GROUP"]['AR']['S'][msg.to]['AP'] = True
                            Myflex5(msg.to, " „Äå Sticker „Äç\nSend the sticker")
                        elif cmd == "del autoresponsticker":
                          if msg.to in wait['GROUP']['AR']['S']:
                              wait['GROUP']['AR']['S'] = {}
                              Myflex5(msg.to, " „Äå Sticker „Äç\nSucces delete sticker")
                        elif cmd == "autorespon on":
                            if msg.to in wait["GROUP"]['AR']['AP']:
                                msgs=" „Äå Auto Respon „Äç\nAuto Respon already ENABLED‚ô™"
                            else:
                                msgs=" „Äå Auto Respon „Äç\nAuto Respon set to ENABLED‚ô™"
                                wait["GROUP"]['AR']['AP'].append(msg.to)
                            Myflex5(to, msgs)
                        elif cmd == "autorespon off":
                            if msg.to not in wait["GROUP"]['AR']['AP']:
                                msgs=" „Äå Auto Respon „Äç\nAuto Respon already DISABLED‚ô™"
                            else:
                                msgs=" „Äå Auto Respon „Äç\nAuto Respon set to DISABLED‚ô™"
                                wait["GROUP"]['AR']['AP'].remove(msg.to)
                            Myflex5(to,msgs)
                        elif cmd == "autorespon":
                            key = settings['keyCommand'].title()
                            if settings['setKey'] == False:key = ''
                            if msg.to in wait["GROUP"]['AR']['AP']:
                                msgs=" „Äå Auto Respon „Äç\nAuto Respon: ON‚ô™"
                                if msg.to in wait["GROUP"]['AR']['S']:
                                    a = zarifoglu.shop.getProduct(packageID=int(wait["GROUP"]['AR']['S'][msg.to]['Sticker']['STKPKGID']), language='ID', country='ID')
                                    msgs+="\nSticker: " + a.title
                                else:msgs+=''
                                if msg.to in wait["GROUP"]['AR']['P']:
                                    if wait["GROUP"]['AR']['P'][msg.to] == '':msgs+= ''
                                    else:msgs+="\nMessage: \n" + wait["GROUP"]['AR']['P'][msg.to] + "\n"
                                else:msgs+=''
                            else:
                                msgs=" „Äå Auto Respon „Äç\nAuto Respon: OFF"
                                if msg.to in wait["GROUP"]['AR']['S']:
                                    a = zarifoglu.shop.getProduct(packageID=int(wait["GROUP"]['AR']['S'][msg.to]['Sticker']['STKPKGID']), language='ID', country='ID')
                                    msgs+="\nSticker: " + a.title
                                else:msgs+=''
                                if msg.to in wait["GROUP"]['AR']['P']:
                                    if wait["GROUP"]['AR']['P'][msg.to] == '':msgs+= ''
                                    else:msgs+="\nMessage: \n" + wait["GROUP"]['AR']['P'][msg.to] + "\n"
                                else:msgs+=''
                            Myflex5(to, msgs+"\nType: AutoRespon Set\n  Usage:"+key+" autorespon [on|off]\nType: AutoRespon Sticker\n  Usage:"+key+" add autoresponsticker\nType: Autorespon msg setting\n  Usage:"+key+" autorespon msg set <text>\n   OR:"+key+" autorespon msg set <text|text>")
                        elif cmd.startswith('autorespon msg set'):
                            msg.text = zarifoglu.mycmd(msg.text,wait)
                            if len(msg.text.split("\n")) >= 2:
                                wait["GROUP"]['AR']['P'][msg.to] = msg.text.replace(msg.text.split("\n")[0]+"\n","")
                                Myflex5(msg.to," „Äå Auto Respon „Äç\nAuto Respon message has been set to:\n" + wait["GROUP"]['AR']['P'][msg.to])
                        elif cmd == "leavemsg":
                            key = settings['keyCommand'].title()
                            if settings['setKey'] == False:key = ''
                            if msg.to in wait["GROUP"]['LM']['AP']:
                                msgs=" „Äå Leave Message „Äç\nLeave Message: ON‚ô™"
                                if msg.to in wait["GROUP"]['LM']['S']:
                                    a = zarifoglu.shop.getProduct(packageID=int(wait["GROUP"]['LM']['S'][msg.to]['Sticker']['STKPKGID']), language='ID', country='ID')
                                    msgs+="\nSticker: " + a.title
                                else:msgs+=''
                                if msg.to in wait["GROUP"]['LM']['P']:
                                    if wait["GROUP"]['LM']['P'][msg.to] == '':msgs+= ''
                                    else:msgs+="\nMessage: \n" + wait["GROUP"]['LM']['P'][msg.to] + "\n"
                                else:msgs+=''
                            else:
                                msgs=" „Äå Leave Message „Äç\nLeave Message: OFF"
                                if msg.to in wait["GROUP"]['LM']['S']:
                                    a = zarifoglu.shop.getProduct(packageID=int(wait["GROUP"]['LM']['S'][msg.to]['Sticker']['STKPKGID']), language='ID', country='ID')
                                    msgs+="\nSticker: " + a.title
                                else:msgs+=''
                                if msg.to in wait["GROUP"]['LM']['P']:
                                    if wait["GROUP"]['LM']['P'][msg.to] == '':msgs+= ''
                                    else:msgs+="\nMessage: \n" + wait["GROUP"]['LM']['P'][msg.to] + "\n"
                                else:msgs+=''
                            Myflex5(to, msgs+"\nType: Leave Set\n  Usage:"+key+" leave [on|off]\nType: Leave Sticker\n  Usage:"+key+" add leave sticker\n  OR:"+key+" del leave sticker\nType: Leave msg setting\n  Usage:"+key+" leave msg set <text>\n  OR:"+key+" leave msg set <text|text>")
                        elif cmd == "leave on":
                            if msg.to in wait["GROUP"]['LM']['AP']:
                                msgs=" „Äå Leave Message „Äç\nLeave Message already ENABLED‚ô™"
                            else:
                                msgs=" „Äå Leave Message „Äç\nLeave Message set to ENABLED‚ô™"
                                wait["GROUP"]['LM']['AP'].append(msg.to)
                            Myflex5(to,msgs)
                        elif cmd == 'leave off':
                            if msg.to not in wait["GROUP"]['LM']['AP']:
                                msgs=" „Äå Leave Message „Äç\nLeave Message already DISABLED‚ô™"
                            else:
                                msgs=" „Äå Leave Message „Äç\nLeave Message set to DISABLED‚ô™"
                                wait["GROUP"]['LM']['AP'].remove(msg.to)
                            Myflex5(to,msgs)
                        elif cmd == 'add leave sticker':
                            if msg.to not in wait["GROUP"]['LM']['S']:
                                wait["GROUP"]['LM']['S'][msg.to] = {'AP':False,'Sticker':{}}
                            wait["GROUP"]['LM']['S'][msg.to]['AP'] = True
                            Myflex5(msg.to, " „Äå Sticker „Äç\nSend a sticker")
                        elif cmd == 'del leave sticker':
                            if msg.to in wait['GROUP']['LM']['S']:
                                wait['GROUP']['LM']['S'] = {}
                                Myflex5(to, " „Äå Sticker „Äç\nSucces delete sticker")
                        elif cmd.startswith('leave msg set'):
                            msg.text = zarifoglu.mycmd(msg.text,wait)
                            if len(msg.text.split("\n")) >= 2:
                                wait["GROUP"]['LM']['P'][msg.to] = msg.text.replace(msg.text.split("\n")[0]+"\n","")
                                Myflex5(msg.to," „Äå Leave Message „Äç\nLeave Message has been set to:\n" + wait["GROUP"]['LM']['P'][msg.to])
                        elif cmd == "welcome on":
                            if msg.to in wait["GROUP"]['WM']['AP']:
                                msgs=" „Äå Welcome Message „Äç\nWelcome Message already ENABLED‚ô™"
                            else:
                                msgs=" „Äå Welcome Message „Äç\nWelcome Message set to ENABLED‚ô™"
                                wait["GROUP"]['WM']['AP'].append(msg.to)
                            Myflex5(to,msgs)
                        elif cmd == "welcome off":
                            if msg.to not in wait["GROUP"]['WM']['AP']:
                                msgs=" „Äå Welcome Message „Äç\nWelcome Message already DISABLED‚ô™"
                            else:
                                msgs=" „Äå Welcome Message „Äç\nWelcome Message set to DISABLED‚ô™"
                                wait["GROUP"]['WM']['AP'].remove(msg.to)
                            Myflex5(to, msgs)
                        elif cmd.startswith('welcome msg set'):
                            msg.text = zarifoglu.mycmd(msg.text,wait)
                            if len(msg.text.split("\n")) >= 2:
                                wait["GROUP"]['WM']['P'][msg.to] = msg.text.replace(msg.text.split("\n")[0]+"\n","").replace('|',' @!')
                                Myflex5(msg.to," „Äå Welcome Message „Äç\nWelcome Message has been set to:\n" + wait["GROUP"]['WM']['P'][msg.to])
                        elif cmd == 'welcomemsg':
                            key = settings['keyCommand'].title()
                            if settings['setKey'] == False:key = ''
                            if msg.to in wait["GROUP"]['WM']['AP']:
                                msgs=" „Äå Welcome Message „Äç\nWelcome Message: ON‚ô™"
                                if msg.to in wait["GROUP"]['WM']['S']:
                                    a = zarifoglu.shop.getProduct(packageID=int(wait["GROUP"]['WM']['S'][msg.to]['Sticker']['STKPKGID']), language='ID', country='ID')
                                    msgs+="\nSticker: " + a.title
                                else:msgs+=''
                                if msg.to in wait["GROUP"]['WM']['P']:
                                    if wait["GROUP"]['WM']['P'][msg.to] == '':msgs+= ''
                                    else:msgs+="\nMessage: \n" + wait["GROUP"]['WM']['P'][msg.to] + "\n"
                                else:msgs+=''
                            else:
                                msgs=" „Äå Welcome Message „Äç\nWelcome Message: OFF"
                                if msg.to in wait["GROUP"]['WM']['S']:
                                    a = zarifoglu.shop.getProduct(packageID=int(wait["GROUP"]['WM']['S'][msg.to]['Sticker']['STKPKGID']), language='ID', country='ID')
                                    msgs+="\nSticker: " + a.title
                                else:msgs+=''
                                if msg.to in wait["GROUP"]['WM']['P']:
                                    if wait["GROUP"]['WM']['P'][msg.to] == '':msgs+= ''
                                    else:msgs+="\nMessage: \n" + wait["GROUP"]['WM']['P'][msg.to] + "\n"
                                else:msgs+=''
                            Myflex5(to,msgs+"\nType: Welcome Set\n  Usage:"+key+" welcome [on|off]\nType: Welcome Sticker\n  Usage:"+key+" add welcome sticker\nType: Welcome msg setting\n  Usage:"+key+" welcome msg set <text>\n  OR:"+key+" welcome msg set <text|text>")
                        elif cmd == 'add welcome sticker':
                            if msg.to not in wait["GROUP"]['WM']['S']:
                                wait["GROUP"]['WM']['S'][msg.to] = {'AP':False,'Sticker':{}}
                            wait["GROUP"]['WM']['S'][msg.to]['AP'] = True
                            Myflex5(msg.to, " „Äå Sticker „Äç\nSend the sticker")
                        elif cmd == 'del welcome sticker':
                            if msg.to in wait['GROUP']['WM']['S']:
                                wait['GROUP']['WM']['S'] = {}
                                Myflex5(to, ' „Äå Sticker „Äç\nSucces delete sticker')
#=====================================================================
#=====================================================================
                        elif cmd.startswith("addaudio"):
                            apl = removeCmd("addaudio", text)
                            apl = apl.lower()
                            if apl not in kimak["Audios"]:
                                kimak["Audios"][apl.lower()] = "Alldata/%s.mp3" % apl
                                kimak["Audio"] = "%s" % apl
                                kimak["Addaudio"] = True
                                Myflex5(to, "„Äå Audio „Äç\nType: Add Audio\nStatus: Send audio if you want to save")
                            else:
                                zarifoglu.sendMessage(to, "„Äå Error „Äç\nType: Add Audio\nStatus: Audio already in list")
                        elif cmd == "audiolist":
                            if kimak["Audios"] == {}:
                                zarifoglu.sendMessage(to, "„Äå Audio „Äç\nType: List audio\nStatus: Nothing")
                            else:
                                ret_ = "„Äå Audio „Äç\nType: List audio\nTotal {} Voice".format(str(len(kimak["Audios"])))
                                jmlh = 1
                                for listword in kimak["Audios"]:
                                    ret_ += "\n"+str(jmlh)+". "+listword.title().lower()
                                    jmlh += 1
                                Myflex5(to, str(ret_))
                        elif cmd.startswith("delaudio"):
                            xres = removeCmd("delaudio", text)
                            xres = xres.lower()
                            if xres in kimak["Audios"]:
                                del kimak["Audios"][xres.lower()]
                                path = os.remove("Alldata/%s.mp3" % str(xres))
                                zarifoglu.sendMessage(to, "„Äå Succes „Äç\nType: Del audio\nStatus: Succes del audio %s" % xres)
                            else:
                                zarifoglu.sendMessage(to, "„Äå Error „Äç\nType: Del audio\nFile %s Nothing" % xres)
                        elif msg.text.lower() in kimak["Audios"]:
                            zarifoglu.sendAudio(to, kimak["Audios"][msg.text.lower()])
                        elif cmd.startswith("unsend "):
                            args = cmd.replace("unsend ","")
                            mes = 0
                            try:
                                mes = int(args)
                            except:
                                mes = 1
                            M = zarifoglu.getRecentMessagesV2(to, 101)
                            MId = []
                            for ind,i in enumerate(M):
                                if ind == 0:
                                    pass
                                else:
                                    if i._from == zarifoglu.profile.mid:
                                        MId.append(i.id)
                                        if len(MId) == mes:
                                            break
                            def unsMes(id):
                                zarifoglu.unsendMessage(id)                                
                            for i in MId:
                                thread1 = threading.Thread(target=unsMes, args=(i,))
                                thread1.start()
                                thread1.join()
                            Myflex3(msg.to, '„Äå {} mesaj ba≈üarƒ±yla geri alƒ±ndƒ± „Äç'.format(len(MId)))
#=====================================================================
#=====================================================================
                        elif cmd == 'friendlist':a = zarifoglu.refreshContacts();zarifoglu.datamention(msg.to,'List Friend',a)
                        elif cmd.startswith('getid'):
                            if 'MENTION' in msg.contentMetadata.keys()!=None:
                                key = eval(msg.contentMetadata["MENTION"])
                                key1 = key["MENTIONEES"][0]["M"]
                                zarifoglu.getinformation(msg.to,key1,wait)
                            else:
                                if len(cmd.split(' ')) == 2:
                                    a = zarifoglu.getGroupIdsJoined()
                                    zarifoglu.getinformation(msg.to,a[int(cmd.split(' ')[1])-1],wait)
                                if cmd == 'getid':zarifoglu.getinformation(msg.to,msg.to,wait)
                        elif cmd.startswith("friend info "):
                            msg.text = msg.text = zarifoglu.mycmd(msg.text,wait)
                            if len(msg.text.split(' ')) == 3:
                                b = zarifoglu.refreshContacts()
                                zarifoglu.getinformation(to,b[int(msg.text.split(' ')[2])-1],wait)

                        elif cmd == "clearfriend":
                            n = len(zarifoglu.getAllContactIds())
                            try:
                                zarifoglu.clearContacts()
                            except: 
                                pass
                            t = len(zarifoglu.getAllContactIds())
                            Myflex5(to,"Type: Friendlist\n ‚å¨ Detail: Clear Contact\n ‚å¨ Before: %s Friendlist\n ‚å¨ After: %s Friendlist\n ‚å¨ Total removed: %s Friendlist\n ‚å¨ Status: Succes.."%(n,t,(n-t)))
                        elif cmd == "delete":
                            n = len(zarifoglu.getAllContactIds())
                            try:
                                zarifoglu.deleteContact(to)
                            except:pass
                            t = len(zarifoglu.getAllContactIds())
                            zarifoglu.sendMessage(to, "Type: Friendlist\n ‚å¨ Detail: Delete friend\n ‚å¨ Status: Succes..\n ‚å¨ Before: %s Friendlist\n ‚å¨ After: %s Friendlist"%(n,t))
                        elif cmd.startswith("delfriend "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    contact = zarifoglu.getContact(ls)
                                    n = len(zarifoglu.getAllContactIds())
                                    try:
                                        zarifoglu.deleteContact(ls)
                                    except:pass
                                    t = len(zarifoglu.getAllContactIds())
                                    Myflex5(to, "Type: Friendlist\n ‚å¨ Detail: Delete friend\n ‚å¨ Status: Succes..\n ‚å¨ Before: %s Friendlist\n ‚å¨ After: %s Friendlist"%(n,t))
                        elif cmd.startswith("addfriend "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    contact = zarifoglu.getContact(ls)
                                    zarifoglu.findAndAddContactsByMid(ls)
                                Myflex5(to, "Success add " + str(contact.displayName) + " to Friendlist")
                        elif cmd.startswith("blockfriend "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    contact = zarifoglu.getContact(ls)
                                    zarifoglu.blockContact(ls)
                                Myflex5(to, "Success add " + str(contact.displayName) + " to Blocklist")
                        elif cmd.startswith("del friend "):
                            anu = zarifoglu.refreshContacts()
                            zarifoglu.deletefriendnum(to, wait, cmd)
                        elif cmd.startswith("status "):
                            if msg.toType == 2:                   
                                _name = removeCmd("status", text)
                                gs = zarifoglu.getGroup(to)
                                targets = []
                                for g in gs.members:
                                    if _name in g.displayName.lower():
                                        targets.append(g.mid)
                                        if targets == []:
                                            zarifoglu.sendMessage(to,"Not found.")
                                        else:
                                            for target in targets:
                                                try:
                                                    M = Message()
                                                    M.to = to
                                                    M.contentType = 13
                                                    M.contentMetadata = {'mid': target}
                                                    Myflex5(to, zarifoglu.getContact(target).displayName+":\n\n" + zarifoglu.getContact(target).statusMessage)                                                            
                                                except:
                                                    pass
                        elif cmd.startswith("contact "):
                            name = removeCmd("contact", text)
                            user = zarifoglu.getAllContactIds()
                            ahay = zarifoglu.getContacts(user)
                            targets = []
                            for contact in ahay:
                                if name in contact.displayName.lower():
                                    targets.append(contact.mid)
                                    if targets == []:
                                        zarifoglu.sendMessage(to,"Contact Not found.")
                                    else:
                                        for target in targets:
                                            try:
                                                M = Message()
                                                M.to = to
                                                M.contentType = 13
                                                M.contentMetadata = {'mid': target}
                                                zarifoglu.sendContact(to,target)
                                            except:
                                                pass      
                        elif cmd.startswith("whois "):
                            if msg.toType == 2:                   
                                _name = removeCmd("whois", text)
                                gs = zarifoglu.getGroup(to)
                                targets = []
                                for g in gs.members:
                                    if _name in g.displayName.lower():
                                        targets.append(g.mid)
                                        if targets == []:
                                            zarifoglu.sendMessage(to,"Not found.")
                                        else:
                                            for target in targets:
                                                try:
                                                    M = Message()
                                                    M.to = to
                                                    M.contentType = 13
                                                    M.contentMetadata = {'mid': target}
                                                    mentions(to, "User identifier: " + target + "\n\nUser Name: @!" + "\n\nUser status: " + zarifoglu.getContact(target).statusMessage,[target])
                                                    zarifoglu.sendContact(to,target)
                                                except:
                                                    pass            
                        elif cmd.startswith("update post "):
                            try:
                                j = int(cmd.split(' ')[2])
                                timer = str(cmd.split(' ')[3])
                                a = [zarifoglu.adityasplittext(cmd,'s').replace('{} {}'.format(j,timer),'')]*j
                                text = cmd.replace('update post {} {}'.format(int(j),timer),'')
                                if timer == "1hari":holdingTime = 86400
                                if timer == "6jam":holdingTime = 21600
                                if timer == "1jam":holdingTime = 3600
                                if timer == "1menit":holdingTime = 60
                                times = int(holdingTime)
                                try:
                                    f = [zarifoglu.createPost(text,times) for f in a]
                                except Exception as e: 
                                    zarifoglu.sendMessage(to, str(e))
                            except Exception as e:
                                zarifoglu.sendMessage(to, str(e))
                        elif cmd.startswith("updatepost "):
                            try:
                                Turkey = text.split(" ")
                                agri = text.replace(Turkey[0] + " ","")
                                try:
                                    f = zarifoglu.createPost(agri)
                                    zarifoglu.sendPostToTalk(to,f["result"]["feed"]["post"]["postInfo"]["postId"])
                                except Exception as e: 
                                    zarifoglu.sendMessage(to, str(e))
                            except Exception as e:
                                zarifoglu.sendMessage(to, str(e))
                        elif cmd.startswith("create note "):
                            cmd = cmd.replace('create note ','')
                            NoteCreate(to,cmd,msg)
                        elif cmd.startswith("dick "):
                            Turkey = removeCmd("dick", text)
                            s = urllib.parse.quote(Turkey)
                            MyFooter(to,"http://en.inkei.net/dick/"+s)
                        elif cmd.startswith("anus "):
                            Turkey = removeCmd("anus", text)
                            s = urllib.parse.quote(Turkey)
                            MyFooter(to,"http://en.inkei.net/anus/"+s)
                        elif cmd.startswith("tits "):
                            Turkey = removeCmd("tits", text)
                            s = urllib.parse.quote(Turkey)
                            MyFooter(to,"http://en.inkei.net/tits/"+s)
                        elif cmd.startswith("vagina "):
                            Turkey = removeCmd("vagina", text)
                            s = urllib.parse.quote(Turkey)
                            MyFooter(to,"http://en.inkei.net/vagina/"+s)
                        elif cmd.startswith("countdown "):
                           number = removeCmd("countdown", text)
                           if len(number) > 0:
                               if number.isdigit():
                                   number = int(number)
                                   if number > 10000:                                             
                                       zarifoglu.sendMessage(to,"invalid >_< ! Max: 100.")
                                   else:
                                       for i in range(0,number):
                                           zarifoglu.sendMessage(to,str(number))
                                           number -= 1
                                           time.sleep(0.008)
                               else:
                                  zarifoglu.sendMessage(to,"Please specify a valid number.")
                        elif cmd.startswith("countforward "):
                           number = removeCmd("countforward", text)
                           if len(number) > 0:
                               if number.isdigit():
                                   number = int(number)
                                   if number > 10000:                                             
                                       zarifoglu.sendMessage(to,"Invalid >_< ! Max 100.")
                                   else:
                                       for i in range(0,number):
                                           zarifoglu.sendMessage(to,str(i+1))
                                           i += 1+1
                                           time.sleep(0.008)
                               else:
                                  zarifoglu.sendMessage(to,"Please input count number.")

                        elif cmd.startswith("fuck "):
                           number = removeCmd("fuck", text)
                           if len(number) > 0:
                               if number.isdigit():
                                   number = int(number)
                                   if number > 10000:                                             
                                       zarifoglu.sendMessage(to,"invalid >_< ! Max: 100.")
                                   else:
                                       for i in range(0,number):
                                           zarifoglu.sendMessage(to,str(number))
                                           number -= 1
                                           time.sleep(0.001)
                                           Myflex5(to,str(i+1))
                                           i += 1+1
                                           time.sleep(0.001)
                               else:
                                  zarifoglu.sendMessage(to,"Please input count number.")
                        if text.startswith("b64encode "):
        	                de_str = msg.text.replace("b64encode ","")
        	                hasil = base64.b64encode(de_str.encode())
        	                zarifoglu.sendMessage(to,str(hasil.decode('utf-8')))
                        if text.startswith("b64decode "):
                	        de_str = msg.text.replace("b64decode ","")
                	        hasil = base64.b64decode(de_str.encode())
                	        zarifoglu.sendMessage(to,str(hasil.decode('utf-8')))
#=====================================================================
#=====================================================================
                        elif cmd == "mentionall -s":
                            zarifoglu.unsendMessage(msg_id)
                            try:group = zarifoglu.getGroup(msg.to);nama = [contact.mid for contact in group.members];nama.remove(zarifoglu.getProfile().mid)
                            except:group = zarifoglu.getRoom(msg.to);nama = [contact.mid for contact in group.contacts]
                            k = len(nama)//20
                            for a in range(k+1):
                                if a == 0:zarifoglu.mentionmention(to=msg.to,wait=wait,text='',dataMid=nama[:20],pl=0,ps='‚ï≠„Äå Mention „Äç‚îÄ',pg='MENTIONALLUNSED',pt=nama)
                                else:zarifoglu.mentionmention(to=msg.to,wait=wait,text='',dataMid=nama[a*20 : (a+1)*20],pl=a*20,ps='‚îú„Äå Mention „Äç‚îÄ',pg='MENTIONALLUNSED',pt=nama)
                        elif cmd == settings['mentionall']:
                            group = zarifoglu.getGroup(to);nama = [contact.mid for contact in group.members];nama.remove(zarifoglu.getProfile().mid)
                            zarifoglu.datamention(to,'‚ò¨üáπüá∑ T·¥ú Ä·¥ã·¥á è T·¥á·¥Ä·¥ç üáπüá∑‚ò¨',nama)
							
                        elif cmd.startswith('mention '):
                            msg.text = zarifoglu.mycmd(msg.text,wait)
                            if msg.toType == 0:
                                zarifoglu.datamention(to,'Spam',[to]*int(cmd.split(" ")[1]))
                            elif msg.toType == 2:
                                gs = zarifoglu.getGroup(to)
                                nama = [contact.mid for contact in gs.members]
                                try:
                                    if 'MENTION' in msg.contentMetadata.keys()!=None:zarifoglu.datamention(to,'Spam',[eval(msg.contentMetadata["MENTION"])["MENTIONEES"][0]["M"]]*int(cmd.split(" ")[1]))
                                    else:texst = zarifoglu.adityasplittext(cmd)
                                    gs = zarifoglu.getGroup(to)
                                    nama = [contact.mid for contact in gs.members];nama.remove(zarifoglu.getProfile().mid)
                                    c = ['{}:-:{}'.format(a.displayName,a.mid) for a in gs.members]
                                    c.sort()
                                    b = []
                                    for s in c:
                                        if len(texst) == 1:dd = s[len(texst)-1].lower()
                                        else:dd = s[:len(texst)].lower()
                                        if texst in dd:b.append(s.split(':-:')[1])
                                    zarifoglu.datamention(to,'‚ò¨üáπüá∑ T·¥ú Ä·¥ã·¥á è T·¥á·¥Ä·¥ç üáπüá∑‚ò¨',b)
                                except:zarifoglu.adityaarchi(wait,'Mention','',to,zarifoglu.adityasplittext(msg.text),msg,'\n‚îúGroup: '+gs.name[:20],nama=nama)
                        elif cmd.startswith('mentionname '):
                            texst = zarifoglu.adityasplittext(cmd)
                            gs = zarifoglu.getGroup(to)
                            c = ['{}:-:{}'.format(a.displayName,a.mid) for a in gs.members]
                            c.sort()
                            b = []
                            for s in c:
                                if texst in s.split(':-:')[0].lower():b.append(s.split(':-:')[1])
                            zarifoglu.datamention(to,'Mention By Name',b)
                        elif cmd == "del mention":
                            del wait['ROM'][to]
                            Myflex5(to, "„Äå Delete Mention „Äç\nYour data mention has been deleted")
                        elif cmd == "check mention":
                            if to in wait['ROM']:
                                moneys = {}
                                msgas = ''
                                for a in wait['ROM'][to].items():
                                    moneys[a[0]] = [a[1]['msg.id'],a[1]['waktu']] if a[1] is not None else idnya
                                sort = sorted(moneys)
                                sort.reverse()
                                sort = sort[0:]
                                msgas = ' „Äå Mention Me „Äç'
                                h = []
                                no = 0
                                for m in sort:
                                    has = ''
                                    nol = -1
                                    for kucing in moneys[m][0]:
                                        nol+=1
                                        has+= '\nline://nv/chatMsg?chatId={}&messageId={} {}'.format(to,kucing,humanize.naturaltime(datetime.fromtimestamp(moneys[m][1][nol]/1000)))
                                    h.append(m)
                                    no+=1
                                    if m == sort[0]:
                                        msgas+= '\n{}. @!{}x{}'.format(no,len(moneys[m][0]),has)
                                    else:
                                        msgas+= '\n\n{}. @!{}x{}'.format(no,len(moneys[m][0]),has)
                                mentions(to, msgas, h)
                                del wait['ROM'][to]
                            else:
                                try:
                                    mids = ["u3e941ed98d2a98e04ad01784b7baacf6"]
                                    msgas = 'Sorry @!In {} nothink get a mention'.format(zarifoglu.getGroup(to).name)
                                    mentions(to, msgas, [zarifogluMID])
                                except:
                                    mids = ["u3e941ed98d2a98e04ad01784b7baacf6"]
                                    msgas = 'Sorry @!In Chat @!nothink get a mention'
                                    mentions(to, msgas, [zarifogluMID])
                        elif cmd.startswith("ginfo "):
                            number = removeCmd("ginfo",text)
                            groups = zarifoglu.getGroupIdsJoined()
                            ret_ = ""
                            try:
                                group = groups[int(number)-1]
                                G = zarifoglu.getGroup(group)
                                path = "http://dl.profile.line-cdn.net/" + G.pictureStatus
                                try:
                                    gCreator = G.creator.displayName
                                except:
                                    gCreator = "Tidak ditemukan"
                                if G.invitee is None:
                                    gPending = "0"
                                else:
                                    gPending = str(len(G.invitee))
                                if G.preventedJoinByTicket == True:
                                    gQr = "Tertutup"
                                    gTicket = "Tidak ada"
                                else:
                                    gQr = "Terbuka"
                                    gTicket = "https://line.me/R/ti/g/{}".format(str(zarifoglu.reissueGroupTicket(G.id)))
                                timeCreated = []
                                timeCreated.append(time.strftime("%d-%m-%Y [ %H:%M:%S ]", time.localtime(int(G.createdTime) / 1000)))
                                ret_ += "„Äå Group Info „Äç\n"
                                ret_ += "\nNama Group : {}".format(G.name)
                                ret_ += "\nID Group : {}".format(G.id)
                                ret_ += "\nPembuat : {}".format(gCreator)
                                ret_ += "\nWaktu Dibuat : {}".format(str(timeCreated))
                                ret_ += "\nJumlah Member : {}".format(str(len(G.members)))
                                ret_ += "\nJumlah Pending : {}".format(gPending)
                                ret_ += "\nGroup Qr : {}".format(gQr)
                                ret_ += "\nGroup Ticket : {}".format(gTicket)
                                zarifoglu.sendImageWithURL(to, path)
                                Myflex5(to, str(ret_))
                                zarifoglu.sendContact(to, G.creator.mid)
                            except:
                                pass
                        elif cmd.startswith("changegn"):
                            if msg.toType == 2:
                                X = zarifoglu.getGroup(to)
                                X.name = removeCmd("changegn", text)
                                zarifoglu.updateGroup(X)                       
#=====================================================================
                        elif cmd == "lurk":
                            if 'lurkauto' not in wait:wait['lurkauto'] = False
                            if wait['lurkauto'] == False:sd = "\n‚îÇLurk Auto: OFF"
                            else:sd = "\n‚îÇLurk Auto: ON"
                            if to in wait['readPoint']:
                                a = "\n‚îÇLurk State: ON"+sd
                            else:
                                a = "\n‚îÇLurk State: OFF"+sd
                            if to in wait["lurkp"]:
                                if wait["lurkp"][to] == {}:
                                    b='\n‚ï∞Lurk People: None'
                                    h="‚ï≠„Äå Lurk „Äç‚îÄ"+a+"\n‚îÇ    | Command |  \n‚îÇLurtk Point\n‚îÇ  Usage: lurk on\n‚îÇ  Usage: lurk auto on\n‚îÇLurk Del\n‚îÇ  Usage: lurk off\n‚îÇ  Usage: lurk auto off\n‚îÇLurk Cek\n‚îÇ  Usage: lurk result"
                                    Myflex5(to,h+b)
                                else:
                                    h= "‚ï≠„Äå Lurk „Äç‚îÄ"+a+"\n‚îÇ    | Command |  \n‚îÇLurk Point\n‚îÇ  Usage: lurk on\n‚îÇ  Usage: lurk auto on\n‚îÇLurk Del\n‚îÇ  Usage: lurk off\n‚îÇ  Usage: lurk auto off\n‚îÇLurk Cek\n‚îÇ  Usage: lurk result\n‚îÇLurk People: {}".format(len(wait["lurkp"][to]))
                                    no=0
                                    hh = []
                                    for c in wait["lurkp"][to]:
                                        no+=1
                                        hh.append(c)
                                        if no == len(wait["lurkp"][to]):h+= '\n‚ï∞ {}. @!'.format(no)
                                        else:h+= '\n‚îÇ {}. @!'.format(no)
                                    mentions(to,h,hh)
                            else:
                                b='\n‚ï∞Lurk People: None'
                                h="‚ï≠„Äå Lurk „Äç‚îÄ"+a+"\n‚îÇ    | Command |  \n‚îÇLurk Point\n‚îÇ  Usage: lurk on\n‚îÇ  Usage: lurk auto on\n‚îÇLurk Del\n‚îÇ  Usage: lurk off\n‚îÇ  Usage: lurk auto off\n‚îÇLurk Cek\n‚îÇ  Usage: lurk result"
                                Myflex5(to,h+b)
                        elif cmd == "lurk on":
                            if to in wait['readPoint']:
                                zarifoglu.sendMessage(to, " „Äå Lurk „Äç\nLurk already set‚ô™")
                            else:
                                try:
                                    del wait['readPoint'][to];del wait['setTime'][to]
                                except:
                                    pass
                                wait['readPoint'][to] = msg.id;wait['setTime'][to]  = {};wait['ROM1'][to] = {}
                                Myflex5(to, " „Äå Lurk „Äç\nLurk point set‚ô™")
                        elif cmd == "lurk off":
                            if msg.to not in wait['readPoint']:
                                zarifoglu.sendMessage(to, " „Äå Lurk „Äç\nLurk already off‚ô™")
                            else:
                                try:
                                   del wait['readPoint'][to];wait['setTime'][to] = {};wait['ROM1'][to] = {}
                                except:
                                   pass
                                Myflex5(to, " „Äå Lurk „Äç\nLurk point off‚ô™")
                        elif cmd == "lurk result":
                            if to in wait['readPoint']:
                                try:
                                    anulurk(to,wait)
                                    wait['setTime'][to]  = {}
                                except:zarifoglu.sendMessage(to,'‚ï≠„Äå Lurkers „Äç‚îÄ\n‚ï∞ None')
                            else:zarifoglu.sendMessage(to, " „Äå Lurk „Äç\nLurk point not on‚ô™")
                        elif cmd == "lurk auto on":
                            if to in wait['readPoint']:
                                if wait['lurkauto'] == True:zarifoglu.sendMessage(to, " „Äå Lurk „Äç\nLurk already set‚ô™")
                            else:
                                try:
                                    del wait['readPoint'][to];del wait['setTime'][to]
                                except:
                                    pass
                                wait['readPoint'][to] = msg.id;wait['setTime'][to]  = {};wait['ROM1'][to] = {}
                                wait['lurkauto'] = True
                                zarifoglu.sendMessage(to, " „Äå Lurk „Äç\nLurk point set‚ô™")
                        elif cmd == "lurk auto off":
                            if wait['lurkauto'] == False:
                                zarifoglu.sendMessage(to, " „Äå Lurk „Äç\nLurk auto already off‚ô™")
                            else:
                                wait['lurkauto'] = False
                                zarifoglu.sendMessage(to, " „Äå Lurk „Äç\nLurk auto point off‚ô™")
                        elif cmd.startswith("lurk on "):
                            if 'MENTION' in msg.contentMetadata.keys()!=None:
                                key = eval(msg.contentMetadata["MENTION"])
                                targets = key["MENTIONEES"][0]["M"]
                                if targets in wait['readPoints']:
                                    zarifoglu.sendMention(to, " „Äå Lurk „Äç\nLurk in @! already active",'',[targets])
                                else:
                                    try:
                                        del wait['readPoints'][targets];del wait['lurkt'][to];del wait['lurkp'][to][targets]
                                    except:
                                        pass
                                    wait['readPoints'][targets] = msg.id
                                    if to not in wait['lurkt']:
                                        wait['lurkt'][to] = {}
                                        wait['lurkp'][to] = {}
                                    if targets not in wait['lurkp'][to]:
                                        wait['lurkp'][to][targets] = {}
                                        wait['lurkt'][to][targets] = {}
                                    zarifoglu.sendMention(to, " „Äå Lurk „Äç\nLurk in @! set to active",'',[targets])
                        elif cmd.startswith("lurk off "):
                            if 'MENTION' in msg.contentMetadata.keys()!=None:
                                key = eval(msg.contentMetadata["MENTION"])
                                targets = key["MENTIONEES"][0]["M"]
                                if targets not in wait['readPoints']:
                                    zarifoglu.sendMention(to, " „Äå Lurk „Äç\nLurk in @! already mute",'',[targets])
                                else:
                                    try:
                                        del wait['readPoints'][targets];del wait['lurkp'][to];del wait["lurkt"][to]
                                    except:
                                        pass
                                    zarifoglu.sendMention(to, " „Äå Lurk „Äç\nLurk in @! set to mute",'',[targets])
                        elif cmd.startswith("lurk result "):
                            if 'MENTION' in msg.contentMetadata.keys()!=None:
                                key = eval(msg.contentMetadata["MENTION"])
                                targets = key["MENTIONEES"][0]["M"]
                                if targets in wait['readPoints']:
                                    chiya = []
                                    for rom in wait["lurkp"][to][targets].items():
                                        chiya.append(rom[1])
                                        print(rom[1])
                                    k = len(chiya)//100
                                    for a in range(k+1):
                                        if a == 0:zarifoglu.mentionmention(to=to,wait=wait,text='',dataMid=chiya[:100],pl=0,ps='‚ï≠„Äå Lurkers „Äç‚îÄ',pg='SIDERMES',pt=chiya)
                                        else:zarifoglu.mentionmention(to=to,wait=wait,text='',dataMid=chiya[a*100 : (a+1)*100],pl=a*100,ps='‚îú„Äå Lurkers „Äç‚îÄ',pg='SIDERMES',pt=chiya)
                                    wait['lurkt'][to][targets]  = {};wait['lurkp'][to][targets] = {}
                                else:zarifoglu.sendMention(to, " „Äå Lurk „Äç\nLurk in @! not active",'',[targets])
#=====================================================================
#=====================================================================
                        elif cmd.startswith("add pict ") and sender == zarifogluMID:
                            load()
                            name = removeCmd("add pict", text)
                            name = name.lower()
                            if name not in images:
                                settings["addImage"]["status"] = True
                                settings["addImage"]["name"] = str(name.lower())
                                images[str(name.lower())] = ""
                                f = codecs.open('ZarifKing/image.json','w','utf-8')
                                json.dump(images, f, sort_keys=True, indent=4, ensure_ascii=False)
                                Myflex5(to, "Type: Picture\n ‚å¨ Detail: Add picture\n ‚å¨ Statud: Send pict...")
                            else:
                                Myflex5(to, "Type: Picture\n ‚å¨ Detail: Add picture\n ‚å¨ Status: Failed, Picture already in list...")
                        elif cmd.startswith("del pict ") and sender == zarifogluMID:
                            load()
                            name = removeCmd("del pict", text)
                            name = name.lower()
                            if name in images:
                                zarifoglu.deleteFile(images[str(name.lower())])
                                del images[str(name.lower())]
                                f = codecs.open('ZarifKing/image.json','w','utf-8')
                                json.dump(images, f, sort_keys=True, indent=4, ensure_ascii=False)
                                Myflex5(to, "Type: Picture\n ‚å¨ Detail: Delete list picture\n ‚å¨ Status: Succes delete Picture {}".format(str(name.lower())))
                            else:
                                Myflex5(to, "Type: Picture\n ‚å¨ Detail: Delete list picture\n ‚å¨ Status: Failed, Picture not in list...")
                        elif cmd.startswith("changepict ") and sender == zarifogluMID:
                            load()
                            name = removeCmd("changepict", text)
                            name = name.lower()
                            if name in images:
                                settings["addImage"]["status"] = True
                                settings["addImage"]["name"] = str(name.lower())
                                images[str(name.lower())] = ""
                                f = codecs.open('ZarifKing/image.json','w','utf-8')
                                json.dump(images, f, sort_keys=True, indent=4, ensure_ascii=False)
                                zarifoglu.sendMessage(to, "Type: Picture\n ‚å¨ Detail: Change picture\n ‚å¨ Status: Send pict...")
                            else:
                                zarifoglu.sendMessage(to, "Type: Picture\n ‚å¨ Detail: Change picture\n ‚å¨ Status: Failed, Picture not in list...")
                        elif cmd == "list pict":
                            load()
                            no = 0
                            ret_ = " „Äå List Picture „Äç"
                            for image in images:
                                no += 1
                                ret_ += "\n{}. {}".format(int(no), image.title())
                            ret_ += "\n\nTotal {} Picture".format(str(len(images)))
                            Myflex5(to, ret_)
                        elif cmd.startswith("sendpict ") and sender == zarifogluMID:
                            load()
                            text = removeCmd("sendpict", text)
                            cond = text.split(" ")
                            jml = int(cond[0])
                            imagename = text.replace(cond[0] + " ","").lower()
                            if imagename in images:
                                imgURL = images[imagename]
                            else:
                                zarifoglu.sendMessage(to, "Type: Picture\n ‚å¨ Detail: Send picture\n ‚å¨ Status: Failed, Picture name not in list...")
                                return
                            for x in range(jml):
                                zarifoglu.sendImage(to, imgURL)
#=====================================================================
#=====================================================================
                        elif cmd.startswith("add sflex ") and sender == zarifogluMID:
                            load()
                            name = removeCmd("add sflex", text)
                            name = name.lower()
                            if name not in stickers1:
                                nissa["addTikel2"]["status"] = True
                                nissa["addTikel2"]["name"] = name.lower()
                                stickers1[name.lower()] = {}
                                f = codecs.open('ZarifKing/sticker1.json','w','utf-8')
                                json.dump(stickers1, f, sort_keys=True, indent=4, ensure_ascii=False)
                                Myflex5(to, "Send stickers to save as {} ".format(name.lower()))
                            else:
                                Myflex5(to, "Stickers {} already in list.".format(name.lower()))
                        elif cmd.startswith("del sflex") and sender == zarifogluMID:
                            name = removeCmd("del sflex", text)
                            name = name.lower()
                            if name in stickers1:
                                del stickers1[name.lower()]
                                f = codecs.open('ZarifKing/sticker1.json','w','utf-8')
                                json.dump(stickers2, f, sort_keys=True, indent=4, ensure_ascii=False)
                                Myflex5(to, "Success delete stickers {} ".format(name.lower()))
                            else:
                                Myflex5(to, "Stickers {} not found in list.".format(name.lower())) 
                        elif cmd.startswith("add sticker ") and sender == zarifogluMID:
                            load()
                            name = removeCmd("add sticker", text)
                            name = name.lower()
                            if name not in stickers2:
                                anyun["addTikel"]["status"] = True
                                anyun["addTikel"]["name"] = name.lower()
                                stickers2[name.lower()] = {}
                                f = codecs.open('ZarifKing/sticker2.json','w','utf-8')
                                json.dump(stickers2, f, sort_keys=True, indent=4, ensure_ascii=False)
                                Myflex5(to, "Send stickers to save as {} ".format(name.lower()))
                            else:
                                Myflex5(to, "Stickers {} already in list.".format(name.lower()))
                        elif cmd.startswith("del sticker ") and sender == zarifogluMID:
                            name = removeCmd("del sticker", text)
                            name = name.lower()
                            if name in stickers2:
                                del stickers2[name.lower()]
                                f = codecs.open('ZarifKing/sticker2.json','w','utf-8')
                                json.dump(stickers2, f, sort_keys=True, indent=4, ensure_ascii=False)
                                Myflex5(to, "Success delete stickers {} ".format(name.lower()))
                            else:
                                Myflex5(to, "Stickers {} not found in list.".format(name.lower())) 
                        elif cmd.startswith("add stickerz ") and sender == zarifogluMID:
                            load()
                            name = removeCmd("add stickerz", text)
                            name = name.lower()
                            if name not in stickers:
                                settings["addSticker"]["status"] = True
                                settings["addSticker"]["name"] = str(name.lower())
                                stickers[str(name.lower())] = {}
                                f = codecs.open('ZarifKing/sticker.json','w','utf-8')
                                json.dump(stickers, f, sort_keys=True, indent=4, ensure_ascii=False)
                                Myflex5(to, "Type: Stickers\n ‚å¨ Detail: Add sticker\n ‚å¨ Status: Send sticker..")
                            else:
                                Myflex5(to, "Type: Stickers\n ‚å¨ Detail: Add sticker\n ‚å¨ Status: Failed, Sticker name already in list..")
                        elif cmd.startswith("del stickerz ") and sender == zarifogluMID:
                            load()
                            name = removeCmd("del stickerz", text)
                            name = name.lower()
                            if name in stickers:
                                del stickers[str(name.lower())]
                                f = codecs.open('ZarifKing/sticker.json','w','utf-8')
                                json.dump(stickers, f, sort_keys=True, indent=4, ensure_ascii=False)
                                Myflex5(to, "Type: Sticker\n ‚å¨ Detail: Delete sticker\n ‚å¨ Status: Succes delete Sticker {}".format(str(name.lower())))
                            else:
                                Myflex5(to, "Type: Sticker\n ‚å¨ Detail: Delete sticker\n ‚å¨ Status: Failed, Sticker name not in list")
                        elif cmd.startswith("changestickerz ") and sender == zarifogluMID:
                            load()
                            name = removeCmd("changestickerz", text)
                            name = name.lower()
                            if name in stickers:
                                settings["addSticker"]["status"] = True
                                settings["addSticker"]["name"] = str(name.lower())
                                stickers[str(name.lower())] = ""
                                f = codecs.open('ZarifKing/sticker.json','w','utf-8')
                                json.dump(stickers, f, sort_keys=True, indent=4, ensure_ascii=False)
                                zarifoglu.sendMessage(to, "Type: Stickers\n ‚å¨ Detail: Change sticker\n ‚å¨ Status: Send sticker..")
                            else:
                                zarifoglu.sendMessage(to, "Type: Stickers\n ‚å¨ Detail: Change sticker\n ‚å¨ Status: Failed, Sticker not in list..")
                        elif cmd == "list sticker":
                            load()
                            ret_ = "„Äå Sticker List „Äç\n"
                            for sticker in stickers2:
                                ret_ += "\n" + sticker.title()
                            ret_ += "\n\nTotal {} Stickers".format(str(len(stickers2)))
                            Myflex5(to, ret_)
                        elif cmd == "list sflex":
                            load()
                            ret_ = "„Äå Sticker Flex „Äç\n"
                            for sticker in stickers1:
                                ret_ += "\n" + sticker.title()
                            ret_ += "\n\nTotal {} Stickers".format(str(len(stickers1)))
                            Myflex5(to, ret_)
                        elif cmd == "list stickerz":
                            load()
                            ret_ = "„Äå Sticker List „Äç\n"
                            for sticker in stickers:
                                ret_ += "\n" + sticker.title()
                            ret_ += "\n\nTotal {} Stickers".format(str(len(stickers)))
                            Myflex5(to, ret_)
                        elif cmd.startswith("sendstickerz ") and sender == zarifogluMID:
                            load()
                            text = removeCmd("sendstickerz", text)
                            cond = text.split(" ")
                            jml = int(cond[0])
                            stickername = text.replace(cond[0] + " ","").lower()
                            if stickername in stickers:
                                sid = stickers[stickername]["STKID"]
                                spkg = stickers[stickername]["STKPKGID"]
                                sver = stickers[stickername]["STKVER"]
                            else:
                                return
                            for x in range(jml):
                                sendStickers(to, sver, spkg, sid)
                        elif cmd.startswith("lyrics "):
                            anu = removeCmd("lyrics", text)
                            slyric(to, text)
                        elif cmd.startswith("searchlyric "):
                            sep = text.split(" ")
                            txt = text.replace(sep[0] + " ","")
                            cond = txt.split("|")
                            query = cond[0]
                            key = settings["keyCommand"].title()
                            if settings["setKey"] == False:key = ''
                            with requests.session() as web:
                                web.headers["user-agent"] = "Mozilla/5.0"
                                url = web.get("https://www.musixmatch.com/search/{}".format(urllib.parse.quote(query)))
                                data = BeautifulSoup(url.content, "html.parser")
                                result = []
                                for trackList in data.findAll("ul", {"class":"tracks list"}):
                                    for urlList in trackList.findAll("a"):
                                        title = urlList.text
                                        url = urlList["href"]
                                        result.append({"title": title, "url": url})
                                if len(cond) == 1:
                                    ret_ = "Lyric  Result :\n"
                                    num = 0
                                    for title in result:
                                        num += 1
                                        ret_ += "\n{}. {}".format(str(num), str(title["title"]))
                                    ret_ += "\n\nTotal {} Lyric".format(str(len(result)))
                                    ret_ += "\n\nSearchLyric {}|„Äånumber„Äç".format(str(query))
                                    Myflex5(to, ret_)
                                elif len(cond) == 2:
                                    num = int(cond[1])
                                    if num <= len(result):
                                        data = result[num - 1]
                                        with requests.session() as web:
                                            web.headers["user-agent"] = "Mozilla/5.0"
                                            url = web.get("https://www.musixmatch.com{}".format(urllib.parse.quote(data["url"])))
                                            data = BeautifulSoup(url.content, "html5lib")
                                            for lyricContent in data.findAll("p", {"class":"mxm-lyrics__content "}):
                                                lyric = lyricContent.text
                                                Myflex5(to, lyric)
                        elif cmd.startswith("play "):
                            name = removeCmd("play",text)
                            path = zarifoglu.downloadFileURL(name)
                            zarifoglu.sendAudio(to, path)
                            os.remove(path)

                        if cmd == "invite":
                            undang["invite"] = True
                            Myflex5(to, "Send a contact to invite")
                        elif cmd =="lope":
                            data = {
                                        "type": "flex",
                                        "altText": "Request Login",
                                        "contents": {
                                            "type": "bubble",
                                            "footer": {
                                                "type": "box",
                                                "layout": "vertical",
                                                "spacing": "sm",
                                                "contents": [
                                                    {
                                                       "type": "button",
                                                       "style": "primary",
                                                        "color": "#000000",
                                                        "height": "sm",
                                                        "action": {
                                                            "type": "uri",
                                                            "label": "CLICK HERE FOR LOGIN",
                                                            "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid,
                                                        }                                                   
                                                    },
                                                    {
                                                        "type": "spacer",
                                                        "size": "sm",
                                                    }
                                                ],
                                                "flex": 0
                                            }
                                        }
                                    }
                            sendTemplate(to, data)
#=====================================================================
                        elif cmd == "get note":
                            to = msg.to
                            data = zarifoglu.getGroupPost(to)
                            msg.text = zarifoglu.mycmd(msg.text,wait)
                            if data['result'] != []:
                                try:
                                    no = 0
                                    b = []
                                    a = " „Äå Groups „Äç\nType: Get Note"
                                    for i in data['result']['feeds']:
                                        b.append(i['post']['userInfo']['writerMid'])
                                        try:
                                            for aasd in i['post']['contents']['textMeta']:b.append(aasd['mid'])
                                        except:pass
                                        no += 1
                                        gtime = i['post']['postInfo']['createdTime']
                                        try:g = i['post']['contents']['text'].replace('@','@!')
                                        except:g="None"
                                        if no == 1:sddd = '\n'
                                        else:sddd = '\n\n'
                                        a +="{}{}. Penulis : @!\nDescription: {}\nTotal Like: {}\nCreated at: {}\n".format(sddd,no,g,i['post']['postInfo']['likeCount'],humanize.naturaltime(datetime.fromtimestamp(gtime/1000)))
                                    a +="Status: Success Get "+str(data['result']['homeInfo']['postCount'])+" Note"
                                    zarifoglu.sendMention(to,a,'',b)
                                except Exception as e:
                                    return zarifoglu.sendMessage(to,"„Äå Auto Respond „Äç\n"+str(e))
                        elif cmd.startswith("get note "):
                            to = msg.to
                            data = zarifoglu.getGroupPost(to)
                            msg.text = zarifoglu.mycmd(msg.text,wait)
                            try:
                                music = data['result']['feeds'][int(msg.text.split(' ')[2]) - 1]
                                b = [music['post']['userInfo']['writerMid']]
                                try:
                                    for a in music['post']['contents']['textMeta']:b.append(a['mid'])
                                except:pass
                                try:
                                    g= "\n\nDescription:\n"+str(music['post']['contents']['text'].replace('@','@!'))
                                except:
                                    g=""
                                a="\n   Total Like: "+str(music['post']['postInfo']['likeCount'])
                                a +="\n   Total Comment: "+str(music['post']['postInfo']['commentCount'])
                                gtime = music['post']['postInfo']['createdTime']
                                a +="\n   Created at: "+str(humanize.naturaltime(datetime.fromtimestamp(gtime/1000)))
                                a += g
                                zx = ""
                                zxc = " „Äå Groups „Äç\nType: Get Note\n   Penulis : @!"+a
                                try:
                                    zarifoglu.sendMention(to,zxc,'',b)
                                except Exception as e:
                                    zarifoglu.sendMessage(to, str(e))
                                try:
                                    for c in music['post']['contents']['media']:
                                        params = {'userMid': zarifoglu.getProfile().mid, 'oid': c['objectId']}
                                        path = zarifoglu.server.urlEncode(zarifoglu.server.LINE_OBS_DOMAIN, '/myhome/h/download.nhn', params)
                                        if 'PHOTO' in c['type']:
                                            try:
                                                Myflex5(to," „Äå Note „Äç\nPlease wait, while send your picture...")
                                                zarifoglu.sendImageWithURL(to,path)
                                            except:pass
                                        else:
                                            pass
                                        if 'VIDEO' in c['type']:
                                            try:
                                                Myflex5(to," „Äå Note „Äç\nPlease wait, while send your videos...")
                                                zarifoglu.sendVideoWithURL(to,path)
                                            except:pass
                                        else:
                                            pass
                                except:
                                    pass
                            except Exception as e:
                                return zarifoglu.sendMessage(to,"„Äå Auto Respond „Äç\n"+str(e))
                        elif cmd == "get announ":
                            msg.text = zarifoglu.mycmd(msg.text,wait)
                            to = msg.to
                            a = zarifoglu.getChatRoomAnnouncements(msg.to)
                            if a == []:
                                zarifoglu.sendMention(to, 'Sorry @!In {} nothink get a Announcements'.format(self.getGroup(to).name),' „Äå Announcements „Äç\n', [self.getProfile().mid])
                                return
                            no = 0
                            c = ' „Äå Announcements „Äç'
                            h = []
                            ds = [a[b].creatorMid for b in range(len(a)) if a[b].creatorMid not in h]
                            for b in a:
                                if b.creatorMid not in h:
                                    h.append(b.creatorMid)
                                    no += 1
                                    c += "\n{}. @! #{}x".format(no,str(a).count(b.creatorMid))
                                zarifoglu.sendMention(msg.to,c,'',h)
                        elif cmd.startswith("get announ "):
                            msg.text = zarifoglu.mycmd(msg.text,wait)
                            to = msg.to
                            a = zarifoglu.getChatRoomAnnouncements(msg.to)
                            if a == []:
                                zarifoglu.sendMention(to, 'Sorry @!In {} nothink get a Announcements'.format(zarifoglu.getGroup(to).name),' „Äå Announcements „Äç\n', [zarifoglu.getProfile().mid])
                                return
                            c = ' „Äå Announcements „Äç'
                            no = 0
                            h = []
                            ds = [a[b].creatorMid for b in range(len(a)) if a[b].creatorMid not in h]
                            if len(msg.text.split(' ')) == 3:
                                sd = ds[int(msg.text.split(' ')[2])-1]
                            c+= '\nCreate by: @!'
                            no=0
                            for b in a:
                                if b.contents.link != None:
                                    if b.creatorMid in sd:
                                        no+=1
                                if 'line://nv/chatMsg?chatId=' in b.contents.link:sdg = '{}'.format(b.contents.link)
                                else:sdg = '{}'.format(b.contents.text)
                                if no == 1:c+= '\n{}. „Äå {} „Äç\n{}'.format(no,humanize.naturaltime(datetime.fromtimestamp(b.createdTime/1000)),sdg)
                                else:c+= '\n\n{}. „Äå {} „Äç\n{}'.format(no,humanize.naturaltime(datetime.fromtimestamp(b.createdTime/1000)),sdg)
                            zarifoglu.sendMention(msg.to,c,'',[sd])
                        elif cmd.startswith("weather "):
                            try:
                                region = removeCmd("weather", text)
                                r = requests.get("https://api.eater.pw/api/weather/?apikey=beta&region=%s"%region)
                                data = json.loads(r.text)
                                result = "„Äå Weather „Äç\n"
                                result += "\nRegion : %s"%data["result"]["name"]
                                result += "\nLatitude : %s"%data["result"]["coord"]["lat"]
                                result += "\nLongitude : %s"%data["result"]["coord"]["lon"]
                                result += "\nCountry : %s"%data["result"]["sys"]["country"]
                                for anuan in data["result"]["weather"]:
                                    result += "\nDescription : %s"%anuan["description"]
                                result += "\nTemp : %s"%data["result"]["main"]["temp"]
                                result += "\nHumidity : %s"%data["result"]["main"]["humidity"]
                                result += "\nPressure : %s"%data["result"]["main"]["pressure"]
                                result += "\nWind speed: %s"%data["result"]["wind"]["speed"]
                                Myflex5(receiver, str(result))
                            except Exception as e:
                                zarifoglu.sendMessage(receiver, str(e))
                        elif cmd.startswith("anime "):
                            judul = removeCmd("anime", text)
                            with _session as web:
                                try:
                                    r = web.get("https://kitsu.io/api/edge/anime?filter[text]={}".format(str(judul)))
                                    data = r.text
                                    data = json.loads(data)
                                    anu = data["data"][0]
                                    title = anu["attributes"]["titles"]["en_jp"]
                                    synopsis = anu["attributes"]["synopsis"]
                                    id = anu["id"]
                                    link = anu["links"]["self"]
                                    ret_ = "„ÄåAbout Anime„Äç"
                                    ret_ += "\n\nTitle : {}\nSynopsis : {}\nId : {}\nLink : {}".format(str(title), str(synopsis), str(id), str(link))
                                    MyFooter(to, str(ret_))
                                except:
                                    zarifoglu.sendMessage(to, "Tidak ada hasil ditemukan")
                        if cmd.startswith('nhentai '):nhentai(to,msg,liffnya,cmd)
                        elif cmd.startswith("asking "):
                            kata = removeCmd("asking", text)
                            sch = kata.replace(" ","+")
                            with _session as web:
                                urlz = "http://lmgtfy.com/?q={}".format(str(sch))
                                r = _session.get("http://tiny-url.info/api/v1/create?apikey=A942F93B8B88C698786A&provider=cut_by&format=json&url={}".format(str(urlz)))
                                data = r.text
                                data = json.loads(data)
                                url = data["shorturl"]
                                ret_ = "„ÄåAsk„Äç"
                                ret_ += "\n\nLink : {}".format(str(url))
                                MyFooter(to, str(ret_))
                        elif cmd.startswith("@create "):
                            sep = text.split(" ")
                            txt = text.replace(sep[0] + " ","")
                            url = "line://app/1597127494-QDP2OlYl/?type=text&text={}".format(urllib.parse.quote(txt))
                            Thread(target=zarifoglu.sendImageWithURL,args=(to, "https://reportnasdem.000webhostapp.com/text2image/?type=3&text={}&size=30".format(txt),)).start()
                            data = {
                                "type": "flex",
                                "altText": "Turkey-Selfbot",
                                "contents": {
                                    "type": "bubble",
                                    "body": {
                                        "type": "box",
                                        "layout": "vertical",
                                        "contents": [
                                            {
                                                "type": "text",
                                                "align": "center",
                                                "color": "#00FFF3",
                                                "text": "{}".format(txt),
                                                "wrap": True,
                                                "action": {
                                                    "type": "uri",
                                                    "uri": url
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                            sendTemplate(to, data)
                        elif cmd == "doujinnews":
                            result = requests.get("https://nhentai.net")
                            data = BeautifulSoup(result.content, 'html5lib')
                            hasil = "[ Doujin News ]"                                  
                            no = 1
                            for sam in data.findAll('div', attrs={'class':'gallery'}):
                                hasil += "\n{}. {}".format(str(no), str(sam.find('a').text))
                                hasil += "\nhttps://nhentai.net{}".format(str(sam.find('a')['href']))                                        
                                no = (no+1)                                    
                            MyFooter(to, str(hasil))                      
                        elif cmd == "announ clear":
                            a = zarifoglu.getChatRoomAnnouncements(msg.to)
                            try:
                                for b in a:
                                    zarifoglu.removeChatRoomAnnouncement(msg.to,b.announcementSeq)
                                    zarifoglu.sendMessage(msg.to, 'Done')
                            except Exception as e:
                                ee = traceback.format_exc()
                                zarifoglu.sendMessage(msg.to, '{}'.format(e))
                        elif cmd == "chatbot off":
                            if sender in zarifogluMID or sender in chatbot["admin"]:
                                if to not in chatbot["botMute"]:
                                    chatbot["botMute"].append(to)
                                    Myflex5(to, "I'll be here when you need me")
                            else:
                                if to not in chatbot["botOff"]:
                                    chatbot["botOff"].append(to)
                                    Myflex5(to, "I'll be here when you need me")
                        elif cmd == "get album":
                            zarifoglu.getalbum(to, wait)
                        elif cmd == "banlist":
                            if bl["blacklist"] == []:
                                zarifoglu.sendMessage(to,"„Äå BlackList „Äç")
                            else:
                                num = 1
                                mc = "„Äå BlackList „Äç\n"
                                for me in bl["blacklist"]:
                                    mc += "\n- %i.  %s" % (num, zarifoglu.getContact(me).displayName)
                                    num = (num+1)
                                mc += "\n\nTotaL %i BlackList" % len(bl["blacklist"])
                                Myflex5(to, mc)
                        elif cmd.startswith("get album "):
                            name = removeCmd("get album ",text)
                            zarifoglu.getalbum2(to, text, wait)
                        elif cmd == "mysticker":
                            a = zarifoglu.shop.getActivePurchases(start=0, size=1000, language='ID', country='ID').productList
                            c = "List Download Sticker:"
                            no = 0
                            for b in a:
                                no +=1
                                c += "\n"+str(no)+". "+b.title[:21]+" ID:"+str(b.packageId)
                            k = len(c)//10000
                            for aa in range(k+1):
                                MyFooter(msg.to,'{}'.format(c[aa*10000 : (aa+1)*10000]))
                        elif cmd.startswith('find '):
                            if 'MENTION' in msg.contentMetadata.keys()!=None:
                                key = eval(msg.contentMetadata["MENTION"])
                                key1 = key["MENTIONEES"][0]["M"]
                                a = zarifoglu.getGroupIdsJoined();i = zarifoglu.getGroups(a)
                                c = []
                                for h in i:
                                    g = [c.append(h.name[0:20]+',.s/'+str(len(h.members))) for d in h.members if key1 in d.mid]
                                h = "‚ï≠„Äå Find Contact „Äç‚îÄ"
                                no = 0
                                for group in c:
                                    no += 1
                                    h+= "\n‚îÇ{}. {} | {}".format(no, group.split(',.s/')[0], group.split(',.s/')[1])
                                MyFooter(msg.to,h+"\n‚ï∞‚îÄ„Äå {} Groups I Found it „Äç".format(len(c)))
                        elif cmd.startswith("inviteid "):
                            text = removeCmd("inviteid", text)
                            sep = text.split(" ")
                            idnya = text.replace(sep[0] + " ", text)
                            conn = zarifoglu.findContactsByUserid(idnya)
                            zarifoglu.findAndAddContactsByMid(conn.mid)
                            zarifoglu.inviteIntoGroup(msg.to,[conn.mid])
                            group = zarifoglu.getGroup(msg.to)
                            xname = zarifoglu.getContact(conn.mid)
                            zx = ""
                            zxc = ""
                            zx2 = []
                            xpesan = '„Äå Invited from Id „Äç\nName '
                            Turkey = str(xname.displayName)
                            pesan = ''
                            pesan2 = pesan+"@a\n"
                            xlen = str(len(zxc)+len(xpesan))
                            xlen2 = str(len(zxc)+len(pesan2)+len(xpesan)-1)
                            zx = {'S':xlen, 'E':xlen2, 'M':xname.mid}
                            zx2.append(zx)
                            zxc += pesan2
                            text = xpesan+ zxc + "To group " + str(group.name) +""
                            zarifoglu.sendMessage(receiver, text, contentMetadata={'MENTION':str('{"MENTIONEES":'+json.dumps(zx2).replace(' ','')+'}')}, contentType=0)

                        elif cmd.startswith("closeqr "):
                            number = removeCmd("closeqr", text)
                            groups = zarifoglu.getGroupIdsJoined()
                            try:
                                group = groups[int(number)-1]
                                G = zarifoglu.getGroup(group)
                                try:
                                    G.preventedJoinByTicket = True
                                    zarifoglu.updateGroup(G)
                                except:
                                    G.preventedJoinByTicket = True
                                    zarifoglu.updateGroup(G)
                                MyFooter(to, "„Äå Close Qr „Äç\n\nGroup : " + G.name)
                            except Exception as error:
                                zarifoglu.sendMessage(to, str(error))
                        elif cmd.startswith("openqr "):
                            number = removeCmd("openqr", text)
                            groups = zarifoglu.getGroupIdsJoined()
                            try:
                                group = groups[int(number)-1]
                                G = zarifoglu.getGroup(group)
                                try:
                                    G.preventedJoinByTicket = False
                                    zarifoglu.updateGroup(G)
                                    gurl = "https://line.me/R/ti/g/{}".format(str(zarifoglu.reissueGroupTicket(G.id)))
                                except:
                                    G.preventedJoinByTicket = False
                                    zarifoglu.updateGroup(G)
                                    gurl = "https://line.me/R/ti/g/{}".format(str(zarifoglu.reissueGroupTicket(G.id)))
                                MyFooter(to, "„Äå Open Qr „Äç\n\nGroup : " + G.name + "\nLink: " + gurl)
                            except Exception as error:
                                zarifoglu.sendMessage(to, str(error))
                        elif cmd.startswith("groupcastvoice ") and sender == zarifogluMID:
                                bctxt = removeCmd("groupcastvoice", text)
                                bc = ("Broadcast voice")
                                cb = (bctxt + bc)
                                tts = gTTS(cb, lang='tr', slow=False)
                                tts.save('tts.mp3')
                                n = zarifoglu.getGroupIdsJoined()
                                for manusia in n:
                                    zarifoglu.sendAudio(manusia, 'tts.mp3')
                        elif cmd.startswith("friendcastvoice ") and sender == zarifogluMID:
                                bctxt = removeCmd("friendcastvoice", text)
                                bc = ("Broadcast voice")
                                cb = (bctxt + bc)
                                tts = gTTS(cb, lang='tr', slow=False)
                                tts.save('tts.mp3')
                                n = zarifoglu.getAllContactIdsJoined()
                                for manusia in n:
                                    zarifoglu.sendAudio(manusia, 'tts.mp3')
                        elif cmd.startswith("updatename "):
                            string = removeCmd("updatename", text)
                            if len(string) <= 10000000000:
                                pname = zarifoglu.getContact(sender).displayName
                                profile = zarifoglu.getProfile()
                                profile.displayName = string
                                zarifoglu.updateProfile(profile)
                                Myflex5(to, "„Äå Update Name „Äç\nStatus : Success\nFrom : "+str(pname)+"\nTo :"+str(string))
                        elif cmd.startswith("updatestatus "):
                            string = removeCmd("updatestatus", text)
                            if len(string) <= 10000000000:
                                pname = zarifoglu.getContact(sender).statusMessage
                                profile = zarifoglu.getProfile()
                                profile.statusMessage = string
                                zarifoglu.updateProfile(profile)
                                Myflex5(to, "„Äå Update Status „Äç\nStatus : Success\nFrom : "+str(pname)+"\nTo :"+str(string))
#                     \\ MEDIA //
#=========================================================
                        elif cmd.startswith('webtzoon '):
                            msg.text = zarifoglu.mycmd(msg.text,wait)
                            drama = msg.text.split(' ')[1].lower()
                            try:
                                if drama == 'drama':aa = 0
                                if drama == 'fantasi':aa = 1
                                if drama == 'comedy':aa = 2
                                if drama == 'sol':aa = 3
                                if drama == 'romance':aa = 4
                                if drama == 'thriller':aa = 5
                                if drama == 'horror':aa = 6
                                a = zarifoglu.blekedok(aa,'data')
                                try:
                                    if int(msg.text.split(' ')[2]) > len(a):
                                        Myflex5(msg.to,' „Äå Webtoon „Äç\nDaftar Webtoon {} urutan ke {} tidak ditemukan'.format(drama.title(),msg.text.split(' ')[2]))
                                    gd = zarifoglu.blekedok(aa)[int(msg.text.split(' ')[2])-1].get('href')
                                    b = requests.get(gd)
                                    soup1 = BeautifulSoup(b.text,'html5lib')
                                    data11 = soup1.find_all(class_='subj')
                                    data1 = soup1.find_all(class_='date')
                                    data2 = soup1.find_all(id='_listUl')
                                    data3 = data2[0].find_all('a')
                                    A = ' „Äå Webtoon „Äç\n    | {} |'.format(a[int(msg.text.split(' ')[2])-1].find_all('p')[0].text)
                                    for c in range(0,10):
                                        if c+1 == 1:AA = '\n'
                                        else:AA = '\n\n'
                                        A+= '{}{}. {} | {}\n    {}'.format(AA,c+1,data11[c+1].text,data1[c].text.strip(),data3[c].get('href'))
                                    Myflex5(msg.to,A)
                                except:
                                    A = ' „Äå Webtoon „Äç\n    | {} |'.format(drama.replace('sol','slice of life').title())
                                    no=0
                                    for b in a:
                                        no+=1
                                        if no == 1:AA = '\n'
                                        else:AA = '\n\n'
                                        if len(str(no)) == 1:cdd = '\n     Author: {}'.format(b.find_all('p')[1].text)
                                        if len(str(no)) == 2:cdd = '\n      Author: {}'.format(b.find_all('p')[1].text)
                                        A+= '{}{}. {} | {} Like{}'.format(AA,no,b.find_all('p')[0].text[:20],b.find_all('p')[2].find_all('em')[0].text,cdd)
                                    Myflex5(msg.to,A)
                            except Exception as e:zarifoglu.sendMessage(msg.to,str(e))
                        elif cmd == "quranlist":
                            data = zarifoglu.adityarequestweb("http://api.alquran.cloud/surah")
                            if data["data"] != []:
                                no = 0
                                ret_ = "‚ï≠‚îÄ‚îÄ„Äå Al-Qur'an „Äç"
                                for music in data["data"]:
                                    no += 1
                                    if no == len(data['data']):ret_ += "\n‚ï∞{}. {}".format(no,music['englishName'])
                                    else:ret_ += "\n‚îÇ{}. {}".format(no,music['englishName'])
                                MyFooter(to,ret_)
                        elif cmd.startswith("qur'an "):
                            msg.text = zarifoglu.mycmd(msg.text,wait)
                            data = zarifoglu.adityarequestweb("http://api.alquran.cloud/surah/{}".format(zarifoglu.adityasplittext(msg.text)))
                            if len(msg.text.split(' ')) == 1:
                                if data["data"] != []:
                                    no = 0
                                    ret_ = "‚ï≠‚îÄ‚îÄ„Äå Al-Qur'an „Äç"
                                    for music in data["data"]:
                                        no += 1
                                        if no == len(data['data']):ret_ += "\n‚ï∞{}. {}".format(no,music['englishName'])
                                        else:ret_ += "\n‚îÇ{}. {}".format(no,music['englishName'])
                                    MyFooter(msg.to,ret_)
                            if len(msg.text.split(' ')) == 2:
                                try:
                                    no = 0
                                    ret_ = " „Äå Al-Qur'an „Äç\nSurah: {}".format(data['data']['englishName'])
                                    for music in data["data"]["ayahs"]:
                                        no += 1
                                        ret_ += "\n{}. {}".format(no,music['text'])
                                    k = len(ret_)//10000
                                    for aa in range(k+1):
                                        Myflex5(msg.to,'{}'.format(ret_[aa*10000 : (aa+1)*10000]))
                                except:zarifoglu.sendMessage(msg.to," „Äå Al-Qur'an „Äç\nI can't found surah number {}".format(zarifoglu.adityasplittext(msg.text)))
                            if len(msg.text.split(' ')) == 3:
                                try:
                                    nama = data["data"]["ayahs"]
                                    selection = zarifoglu.MySplit(zarifoglu.adityasplittext(msg.text.lower(),'s'),range(1,len(nama)+1))
                                    k = len(nama)//100
                                    text = " „Äå Al-Qur'an „Äç\nSurah: {}".format(data['data']['englishName'])
                                    no = 0
                                    for i in selection.parse():
                                        no+= 1
                                        text+= "\n{}. {}".format(i,nama[i-1]['text'])
                                    k = len(text)//10000
                                    for aa in range(k+1):
                                        zarifoglu.sendMessage(msg.to,'{}'.format(text[aa*10000 : (aa+1)*10000]))
                                except:
                                    zarifoglu.sendMessage(msg.to," „Äå Al-Qur'an „Äç\nI can't found surah number {}".format(zarifoglu.adityasplittext(msg.text)))
                        elif cmd == 'blacklist':zarifoglu.adityasuperdata(to,wait,'Blacklist','bl',wait['blacklist'])
                        elif cmd == 'whitelist':zarifoglu.adityasuperdata(to,wait,'Whitelist','wl',wait['bots'])
                        elif cmd.startswith("ytdl "):
                            anu = removeCmd("ytdl",text)
                            a = zarifoglu.adityarequestweb("https://rest.farzain.com/api/yt_download.php?id={}&apikey=Q7I7o74ss7NrVm9QV0Gfr93fr".format(anu))
                            print(a)
                            #zarifoglu.sendMessage(to, str(a))
                            zarifoglu.sendVideoWithURL(to, a["urls"][0]["id"])
                        elif cmd.startswith("porns "):
                            kata = removeCmd("porns", text)
                            with _session as web:
                                try:
                                    r = web.get("https://api.redtube.com/?data=redtube.Videos.searchVideos&output=json&search={}".format(urllib.parse.quote(kata)))
                                    data = r.text
                                    data = json.loads(data)
                                    ret_ = "„ÄåPorn„Äç"
                                    no = 1
                                    anu = data["videos"]
                                    if len(anu) >= 5:
                                        for s in range(5):
                                            hmm = anu[s]
                                            title = hmm['video']['title']
                                            duration = hmm['video']['duration']
                                            views = hmm['video']['views']
                                            link = hmm['video']['embed_url']
                                            ret_ += "\n\n{}. Title : {}\n    Duration : {}\n    Views : {}\n    Link : {}".format(str(no), str(title), str(duration), str(views), str(link))
                                            no += 1
                                    else:
                                        for s in anu:
                                            hmm = s
                                            title = hmm['video']['title']
                                            duration = hmm['video']['duration']
                                            views = hmm['video']['views']
                                            link = hmm['video']['embed_url']
                                            ret_ += "\n\n{}. Title : {}\n    Duration : {}\n    Views : {}\n    Link : {}".format(str(no), str(title), str(duration), str(views), str(link))
                                            no += 1
                                    MyFooter(to, str(ret_))
                                except:
                                    Myflex5(to, "Porn Not Found !")
                        elif cmd.startswith("#image "):
                            start = time.time()
                            search = removeCmd("image", text)
                            url = "https://xeonwz.herokuapp.com/images/google.api?q=" + urllib.parse.quote(search)
                            with _session as web:
                                web.headers["User-Agent"] = random.choice(settings["userAgent"])
                                r = web.get(url)
                                data = r.text
                                data = json.loads(data)
                                if data["status"] == True:
                                    items = data["content"]
                                    path = random.choice(items)
                                    a = items.index(path)
                                    b = len(items)
                                    zarifoglu.sendImageWithURL(to, str(path))
                                    elapsed_time = time.time() - start
                                    Myflex5(to,"Got image in %s seconds" %(elapsed_time))
                        elif cmd.startswith("devianart "):
                            start = time.time()
                            search = removeCmd("devianart", text)
                            with _session as web:
                                web.headers["User-Agent"] = random.choice(settings["userAgent"])
                                r = web.get("https://xeonwz.herokuapp.com/images/deviantart.api?q={}".format(urllib.parse.quote(search)))
                                data = r.text
                                data = json.loads(data)
                                if data["status"] == True:
                                    path = random.choice(data["content"])
                                    zarifoglu.sendImageWithURL(to, str(path))
                                    elapsed_time = time.time() - start
                                    Myflex5(to,"[Image Result]\nGot image in %s seconds" %(elapsed_time))
                                else:
                                    zarifoglu.sendMessage(to, "Arama sonucu bulunamadƒ±")
                        elif cmd.startswith("google "):
                            spl = re.split("google ",msg.text,flags=re.IGNORECASE)
                            if spl[0] == "":
                                if spl[1] != "":
                                    try:
                                        zarifoglu.sendMessage(to,"Searching ..")
                                        resp = BeautifulSoup(requests.get("https://www.google.co.th/search",params={"q":spl[1],"gl":"th"}).content,"html.parser")
                                        text = "Google:\n\n"
                                        for el in resp.findAll("h3",attrs={"class":"r"}):
                                            try:
                                                tmp = el.a["class"]
                                                continue
                                            except:
                                                pass
                                            try:
                                                if el.a["href"].startswith("/search?q="):
                                                    continue
                                            except:
                                                continue
                                            text += el.a.text+"\n"
                                            text += str(el.a["href"][7:]).split("&sa=U")[0]+"\n\n"
                                        text = text[:-2]
                                        MyFooter(to,str(text))
                                    except Exception as e:
                                        print(e)
                        elif cmd.startswith("wikipedia "):
                            search = removeCmd("wikipedia", text)
                            wiki = WikiApi({'locale':'id'})
                            results = wiki.find(search)
                            for a in results:
                                ret_ = "Wikipedia :\n"
                                article = wiki.get_article(a)
                                if article.image is not None: zarifoglu.sendImageWithURL(to,str(article.image))
                                ret_ += "\nTitle : {}".format(str(article.heading))
                                ret_ += "\nURL : {}".format(str(article.url))
                                ret_ += "\nSummary\n{}".format(str(article.summary.replace("^","")))
                                MyFooter(to,ret_)
                        elif cmd.startswith("githubprofile "):
                            username = removeCmd("githubprofile", text)
                            r = _session.get("https://api.github.com/users/" + username)
                            data = r.text
                            profile = json.loads(data)
                            if profile != [] and "message" not in profile:
                                ret_ = "„Äå Github „Äç\n"
                                ret_ += "\nType : Profile"
                                ret_ += "\nUsername : " + str(profile["login"])
                                ret_ += "\nFull Name : " + str(profile["name"])
                                ret_ += "\nType : " + str(profile["type"])
                                if profile["company"] is None:
                                    ret_ += "\nCompany : None"
                                else:
                                    ret_ += "\nCompany : " + str(profile["company"])
                                if profile["blog"] is None:
                                    ret_ += "\nWebsite : None"
                                else:
                                    ret_ += "\nWebsite : " + str(profile["blog"])
                                if profile["location"] is None:
                                    ret_ += "\nLocation : None"
                                else:
                                    ret_ += "\nLocation : " + str(profile["location"])
                                if profile["email"] is None:
                                    ret_ += "\nEmail : None"
                                else:
                                    ret_ += "\nEmail : " + str(profile["email"])
                                if profile["bio"] is None:
                                    ret_ += "\nBiography : None"
                                else:
                                    ret_ += "\nBiography : " + str(profile["bio"])
                                ret_ += "\nPublic Repository : " + format_number(str(profile["public_repos"]))
                                ret_ += "\nPublic Gists : " + format_number(str(profile["public_gists"]))
                                ret_ += "\nFollowers : " + format_number(str(profile["followers"]))
                                ret_ += "\nFollowing : " + format_number(str(profile["following"]))
                                ret_ += "\nCreated At : " + str(profile["created_at"])
                                ret_ += "\nUpdated At : " + str(profile["updated_at"])
                                links = "https://github.com/" + username
                                zarifoglu.sendImageWithURL(to, str(profile["avatar_url"]))
                                zarifoglu.sendMessage(to, str(ret_))
                            elif "message" in profile:
                                zarifoglu.sendMessage(to, "‚ï≠‚îÄ„Äå Github „Äç\n‚ï∞ Username not found")
                        elif cmd.startswith("githubfollowers "):
                            text = removeCmd("githubfollowers", text)
                            cond = text.split("|")
                            username = cond[0]
                            r = requests.get("https://api.github.com/users/{}/followers".format(username))
                            data = r.text
                            data = json.loads(data)
                            no = 0
                            if len(cond) == 1:
                                if data != [] and "message" not in data:
                                    ret_ = "„Äå Github Followers „Äç\n"
                                    for followers in data:
                                        no += 1
                                        ret_ += "\n" + str(no) + ". " + str(followers["login"])
                                    ret_ += "\n\n„Äå Total {} User „Äç".format(str(len(data)))
                                    ret_ += "\n\nUsage : GithubFollowers {}|„Äånumber„Äç".format(text)
                                    zarifoglu.sendMessage(to,ret_)
                                elif "message" in data:
                                    zarifoglu.sendMessage(to,"User not found")
                                elif data == []:
                                    zarifoglu.sendMessage(to,"User didn't have followers")
                            elif len(cond) == 2:
                                if data != [] and "message" not in data:
                                    if int(cond[1]) <= len(data):
                                        followers = data[int(cond[1])-1]
                                        ret_ = "„Äå Github Followers „Äç\n"
                                        ret_ += "\nUsername : " + str(followers["login"])
                                        ret_ += "\n\n„Äå https://github.com/{} „Äç".format(followers["login"])
                                        zarifoglu.sendImageWithURL(to,str(followers["avatar_url"]))
                                        zarifoglu.sendMessage(to,ret_)
                                    else:
                                        zarifoglu.sendMessage(to,"Index out of range")
                                elif "message" in data:
                                    zarifoglu.sendMessage(to,"User not found")
                                elif data == []:
                                    zarifoglu.sendMessage(to,"User didn't have followers")
                        elif cmd.startswith("githubzip "):
                            try:
                                query = removeCmd("githubzip", text)
                                cond = query.split("|")
                                username = str(cond[0])
                                repository = str(cond[1])
                                r = requests.get("https://api.github.com/repos/{}/{}".format(str(username), str(repository)))
                                data = r.text
                                data = json.loads(data)
                                ret_ = "„Äå Github Zip „Äç\n"
                                ret_ += "\nName Owner : {}".format(str(data["owner"]["login"]))
                                ret_ += "\nId Owner : {}".format(str(data["owner"]["id"]))
                                ret_ += "\nLink Repo {} : {}".format(str(data["name"]), str(data["clone_url"]))
                                ret_ += "\nId Repo {} : {}".format(str(data["name"]), str(data["id"]))
                                ret_ += "\nProgramming Language : {}".format(str(data["language"]))
                                zarifoglu.sendMessage(to, str(ret_))
                                zarifoglu.sendImageWithURL(to, str(data["owner"]["avatar_url"]))
                                os.system("git clone {}".format(str(data["clone_url"])))
                                os.system("zip -r {}.zip {}".format(str(repository), str(repository)))
                                zarifoglu.sendFile(to, "{}.zip".format(str(repository)))
                                time.sleep(4)
                                os.remove('{}.zip'.format(repository))
                                os.system('rm -r {}'.format(repository))
                            except Exception as error:
                                print("[ ERROR ] {} ~".format(error))
                                zarifoglu.sendMessage(to, ' „Äå ERROR „Äç')
                        elif cmd.startswith("githubrepo "):
                            text = removeCmd("githubrepo", text)
                            cond = text.split("|")
                            username = cond[0]
                            r = requests.get("https://api.github.com/users/{}/repos".format(username))
                            data = r.text
                            data = json.loads(data)
                            no = 0
                            if len(cond) == 1:
                                if data != [] and "message" not in data:
                                    ret_ = "„Äå Github RepoSitory „Äç\n"
                                    for repo in data:
                                        no += 1
                                        ret_ += "\n" + str(no) + ". " + str(repo["name"])
                                    ret_ += "\n\n„Äå Total {} User „Äç".format(str(len(data)))
                                    ret_ += "\n\nUsage : GithubRepo {}|„Äånumber„Äç".format(text)
                                    zarifoglu.sendMessage(to,ret_)
                                elif "message" in data:
                                    zarifoglu.sendMessage(to,"User not found")
                                elif data == []:
                                    zarifoglu.sendMessage(to,"User doesn't have any repository")
                            elif len(cond) == 2:
                                if data != [] and "message" not in data:
                                    if int(cond[1]) <= len(data):
                                        repo = data[int(cond[1])-1]
                                        ret_ = "„Äå Github RepoSitory „Äç\n"
                                        ret_ += "\nName Repository : " + str(repo["name"])
                                        ret_ += "\nOwner : " + str(repo["owner"]["login"])
                                        if repo["private"] == True:
                                            ret_ += "\nPrivate : Yes"
                                        else:
                                            ret_ += "\nPrivate : No"
                                        if repo["description"] is None:
                                            ret_ += "\nDescription : None"
                                        else:
                                            ret_ += "\nDescription : " + str(repo["description"])
                                        if repo["fork"] == True:
                                            ret_ += "\nFork : Yes"
                                        else:
                                            ret_ += "\nFork : No"
                                        ret_ += "\n URL : " + str(repo["svn_url"])
                                        ret_ += "\nGit URL : " + str(repo["git_url"])
                                        ret_ += "\nSSH URL : " + str(repo["ssh_url"])
                                        ret_ += "\nCreated On : " + str(repo["created_at"])
                                        ret_ += "\nUpdated On : " + str(repo["updated_at"])
                                        ret_ += "\nPushed On : " + str(repo["pushed_at"])
                                        ret_ += "\nSize Repository : ".format(str(repo["size"]))
                                        ret_ += "\nLanguage : " + str(repo["language"])
                                        ret_ += "\nTotal Forked : ".format(str(repo["forks_count"]))
                                        ret_ += "\nTotal Issues : ".format(str(repo["open_issues_count"]))
                                        ret_ += "\n\n„Äå https://github.com/{} „Äç".format(str(repo["owner"]["login"]))
                                        ret_ += "\n\nUsage : GithubFollowing {}".format(username)
                                        ret_ += "\nUsage : GithubFollowers {}".format(username)
                                        zarifoglu.sendMessage(to, str(ret_))
                                    else:
                                        zarifoglu.sendMessage(to,"Index out of range")
                                elif "message" in data:
                                    zarifoglu.sendMessage(to,"User not found")
                                elif data == []:
                                    zarifoglu.sendMessage(to,"User doesn't have any repository")

                        elif cmd.startswith("githubfollowing "):
                            text = removeCmd("githubfollowing", text)
                            cond = text.split("|")
                            username = cond[0]
                            r = requests.get("https://api.github.com/users/{}/following".format(username))
                            data = r.text
                            data = json.loads(data)
                            no = 0
                            if len(cond) == 1:
                                if data != [] and "message" not in data:
                                    ret_ = "„Äå Github Following „Äç\n"
                                    for following in data:
                                        no += 1
                                        ret_ += "\n " + str(no) + ". " + str(following["login"])
                                    ret_ += "\n\n„Äå Total {} User „Äç".format(str(len(data)))
                                    ret_ += "\n\nUsage : GithubFollowing {}|„Äånumber„Äç".format(text)
                                    zarifoglu.sendMessage(to,ret_)
                                elif "message" in data:
                                    zarifoglu.sendMessage(to,"User not found")
                                elif data == []:
                                    zarifoglu.sendMessage(to,"User didn't following anybody")
                            elif len(cond) == 2:
                                if data != [] and "message" not in data:
                                    if int(cond[1]) <= len(data):
                                        following = data[int(cond[1])-1]
                                        ret_ = "„Äå Github Following „Äç\n"
                                        ret_ += "\nUsername : " + str(following["login"])
                                        ret_ += "\n\n„Äå https://github.com/{} „Äç".format(following["login"])
                                        zarifoglu.sendImageWithURL(to,str(following["avatar_url"]))
                                        zarifoglu.sendMessage(to,ret_)
                                    else:
                                        zarifoglu.sendMessage(to,"Index out of range")
                                elif "message" in data:
                                    zarifoglu.sendMessage(to,"User not found")
                                elif data == []:
                                    zarifoglu.sendMessage(to,"User didn't following anybody")

                        elif cmd.startswith('√∂zeldavet '):
                            sep = text.split(" ")
                            num = int(sep[1])
                            try:                           
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        for var in range(0,num):
                                            group = zarifoglu.getGroup(to)
                                            members = [ls]
                                            kunkun = zarifoglu.getContact("u5d854616fc8ea66893e7a85b7cb0b9f1").displayName
                                            zarifoglu.acquireGroupCallRoute(to)
                                            zarifoglu.inviteIntoGroupCall(to, contactIds=members)
                                        Myflex3(to, "√ñzel ses daveti ba≈üarƒ±lƒ±..")
                            except Exception as error:
                                zarifoglu.sendMessage(to, str(error))
                        elif cmd.startswith('spamcall '):
                                if msg.toType == 2:
                                    sep = text.split(" ")
                                    strnum = text.replace(sep[0] + " ","")
                                    num = int(strnum)
                                    #zarifoglu.sendMessage(to, "Succesfully Spam Call to Group")
                                    for var in range(0,num):
                                       group = zarifoglu.getGroup(to)
                                       members = [mem.mid for mem in group.members]
                                       zarifoglu.acquireGroupCallRoute(to)
                                       zarifoglu.inviteIntoGroupCall(to, contactIds=members)
                                    Myflex3(to, "Ses daveti spamlama ba≈üarƒ±lƒ±..")
                        elif cmd.startswith("love"):
                                sep = text.split(" ")
                                you = sep[1]
                                lop = sep[2]
                                per = random.randint(1,100)
                                Myflex3(to, "Uygunluk {} Ve {} Sevgi Y√ºzdesi {}% :)".format(you, lop, per),)
                                if per >= 80:
                                    Myflex3(to, "√áok Uygun Bir √áift ^_^")
                                if per >= 50 <= 80:
                                        Myflex3(to, "Kƒ±smette Varsa ≈ûimdiden Hayƒ±rlƒ± Olsun ‚ù§ :)",)
                                if per <= 50:
                                    Myflex3(to, "√úzg√ºn√ºm {} G√∂r√ºn√º≈üe G√∂re Bahtƒ±nƒ±z Kara".format(you),)
									
                        elif cmd == "/me":
                            thegold = zarifoglu.getContact(sender)
                            data = {
                                "type":"flex","altText":"ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê","contents": {"type": "carousel","contents": [
                                {"type":"bubble","size":"kilo","hero":{"type":"box","layout":"vertical",
                                "contents":[{"type":"image","url":"https://obs.line-scdn.net/{}".format(thegold.pictureStatus),"size":"full","aspectRatio":"2:3","aspectMode":"cover"},
                                {"type":"image","url":"https://i.ibb.co/5swJrfx/pngkey-com-white-light-png-784082.png","position":"absolute","size":"full","aspectMode":"cover","offsetTop":"140px"},
                                {"type":"text","text":"{}".format(zarifoglu.getProfile().displayName),"align":"center","gravity":"center","wrap":True,"weight":"bold","color":"{}".format(setbot["text"])}],"borderWidth":"3px","cornerRadius":"10px","borderColor":"{}".format(setbot["separator"]),"backgroundColor":"{}".format(setbot["background"])}},
                                {"type":"bubble","size":"kilo","hero":{"type":"box","layout":"vertical",
                                "contents":[{"type":"image","url": str(zarifoglu.getProfileCoverURL(sender)),"size":"full","aspectMode":"cover","aspectRatio":"2:3"},
                                {"type":"text","text":"KAPAK FOTOƒûRAFI","color":"{}".format(setbot["text"]),"align":"center","weight":"bold","offsetBottom":"2px"},
                                {"type":"text","text":"- BIO -","weight":"bold","position":"absolute","align":"center","color":"{}".format(setbot["text"]),"gravity":"center","size":"lg","offsetStart":"100px"},
                                {"type":"box","layout":"vertical",
                                "contents":[{"type":"text","text":format(thegold.statusMessage),"align":"center","color":"{}".format(setbot["text"]),"offsetTop":"40px","style":"italic","wrap":True,"offsetStart":"-20px","gravity":"bottom","size":"xs"},
                                {"type":"image","url":"https://i.ibb.co/RgpWB5N/19c1c7a4aeaf8ce9bbf86957bff00b0b.png","size":"full","offsetTop":"-130px","offsetStart":"-20px","position":"absolute"}],
                                "position":"absolute","backgroundColor":"#000000aa","width":"300px","height":"400px"}],"backgroundColor":"{}".format(setbot["background"])},"borderWidth":"3px","cornerRadius":"10px"}]}}
                            sendTemplate(to, data)
                        elif cmd == "me":
                            thegold = zarifoglu.getContact(sender)
                            data={
                                "type": "flex","altText": "Profile {}".format(zarifoglu.getProfile().displayName),
                                "contents": {"type": "carousel",
                                "contents": [{"type": "bubble","size":"kilo",'styles': {"body": {"backgroundColor": "#000000"},"footer": {"backgroundColor": "#000000","separator":True}},"body":{"layout":"vertical",
                                "contents":[{"url":"https://obs.line-scdn.net/{}".format(thegold.pictureStatus),"aspectRatio":"2:3","action":{"uri":"https://os.line.naver.jp/os/p/{}".format(zarifogluMID),"type":"uri"},"size":"full","type":"image","aspectMode":"cover"},{"layout":"vertical","paddingStart":"6px","paddingAll":"2px","offsetTop":"5px","cornerRadius":"50px","position":"absolute",
                                "contents":[{"text":"Profile","color":"#ffffff","size":"sm","action":{"uri":"https://line.me/ti/p/~" + zarifoglu.profile.userid,"type":"uri"},"type":"text"}],"backgroundColor":"#900000","paddingEnd":"6px","offsetStart":"5px","type":"box"},{"offsetEnd":"0px","layout":"vertical","offsetBottom":"0px","position":"absolute","paddingTop":"29px",
                                "contents":[{"layout":"vertical","offsetBottom":"12px","type":"box","width":"180px","offsetStart":"70px",
                                "contents":[{"text":"{}".format(zarifoglu.getProfile().displayName),"color":"#ffffff","size":"lg","type":"text"},{"text":"Operated by","color":"#ffffff","size":"xs","type":"text"}]}],"backgroundColor":"#00000a9c","offsetStart":"0px","type":"box"},{"offsetEnd":"40px","layout":"vertical","offsetBottom":"8px","position":"absolute","type":"box",
                                "contents":[{"size":"sm","url":"https://i.ibb.co/ydrw0Yn/Pics-Art-01-03-10-13-59.png","aspectMode":"fit","aspectRatio":"3:1","type":"image"}]},{"layout":"vertical","offsetBottom":"5px","position":"absolute","type":"box","offsetStart":"5px",
                                "contents":[{"url":"https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif","aspectRatio":"1:1","action":{"uri":"line://ti/p/~@fto6969x","type":"uri"},"size":"xs","type":"image","aspectMode":"fit"}]},{"offsetEnd":"5px","layout":"vertical","offsetTop":"5px","position":"absolute","type":"box",
                                "contents":[{"url":"https://imageshack.com/a/img924/1917/lbfFyL.png","aspectRatio":"1:1","action":{"uri":"line://call/contacts","type":"uri"},"size":"xxs","type":"image","aspectMode":"fit"},{"url":"https://imageshack.com/a/img921/378/kpn6Bb.png","aspectRatio":"1:1","action":{"uri":"line://nv/profile","type":"uri"},"size":"xxs","type":"image","aspectMode":"fit"},{"url":"https://imageshack.com/a/img921/5824/Iw54As.png","aspectRatio":"1:1","action":{"uri":"line://nv/camera","type":"uri"},"size":"xxs","type":"image","aspectMode":"fit"},{"url":"https://imageshack.com/a/img924/8331/lDJHi0.png","aspectRatio":"1:1","action":{"uri":"line://nv/cameraRoll/single","type":"uri"},"size":"xxs","type":"image","aspectMode":"fit"},{"url":"https://imageshack.com/a/img921/5333/ZDMKnM.png","aspectRatio":"1:1","action":{"uri":"line://nv/settings/chatSettings","type":"uri"},"size":"xxs","type":"image","aspectMode":"fit"}]}],"paddingAll":"0px","type":"box"}}]}}
                            sendTemplate(to, data)
                        if cmd == "me2":
                            thegold = zarifoglu.getContact(sender)
                            data={
                                "type": "flex","altText": "Profile {}".format(zarifoglu.getProfile().displayName),
                                "contents": {"type": "carousel",
                                "contents": [{"type": "bubble","size":"kilo","body":
                                {"contents":[{"aspectMode":"cover","aspectRatio":"3:4","gravity":"center","size":"full","type":"image","url": str(zarifoglu.getProfileCoverURL(sender))},
                                {"action":{"label":"action","type":"uri","uri":"line://nv/profile"},"borderColor":"#808080","borderWidth":"0px",
                                "contents":[{"align":"center","aspectMode":"cover","aspectRatio":"1:1","gravity":"center","size":"sm","type":"image","url":"https://obs.line-scdn.net/{}".format(thegold.pictureStatus)}],
                                "cornerRadius":"100px","layout":"vertical","offsetBottom":"95px","offsetStart":"90px","position":"absolute","type":"box"},
                                {"contents":[{"align":"center","color":"#ffffff","gravity":"center","size":"md","text":"{}".format(zarifoglu.getProfile().displayName),"type":"text","weight":"bold"},
                                {"align":"center","color":"#ffffff","size":"xxs","text":format(thegold.statusMessage),"type":"text"}],"height":"60px","layout":"vertical","offsetStart":"20px","offsetTop":"300px","position":"absolute","type":"box","width":"220px"},
                                {"contents":[{"action":{"label":"action","type":"uri","uri":"https://line.me/ti/p/~" + zarifoglu.profile.userid},"align":"center","color":"#808080","offsetStart":"60px","offsetTop":"24px","position":"absolute","size":"xxs","text":"Sohbet","type":"text"},
                                {"action":{"label":"action","type":"uri","uri":"line://nv/more"},"align":"center","color":"#808080","offsetEnd":"50px","offsetTop":"23px","position":"absolute","size":"xxs","text":"Arama","type":"text"},
                                {"offsetStart":"70px","offsetTop":"6px","position":"absolute","size":"md","type":"icon","url":"https://cdn2.iconfinder.com/data/icons/online-communication-i/24/Material_icons-04-33-512.png"},
                                {"offsetEnd":"65px","offsetTop":"5px","position":"absolute","size":"md","type":"icon","url":"https://titecnoeducacion.com.mx/images/imgs/icono-telefono-gris.png"}],"height":"40px","layout":"baseline","type":"box"}],"layout":"vertical","paddingAll":"0px","type":"box"}}
                                ]}}
                            sendTemplate(to,data)
                        if cmd == "me3":
                            thegold = zarifoglu.getContact(sender)
                            data={
                                "type": "flex","altText": "Profile {}".format(zarifoglu.getProfile().displayName),
                                "contents": {"type": "carousel",
                                "contents": [{"type": "bubble","size":"kilo",
      "body": {
        "layout": "vertical",
        "contents": [
          {
            "url": "https://obs.line-scdn.net/{}".format(thegold.pictureStatus),
            "aspectRatio": "1:1",
            "action": {
              "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid,
              "type": "uri"
            },
            "size": "full",
            "type": "image",
            "aspectMode": "cover"
          },
          {
            "url": "https://obs.line-scdn.net/{}".format(thegold.pictureStatus),
            "aspectRatio": "1:1",
            "action": {
              "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid,
              "type": "uri"
            },
            "position": "absolute",
            "size": "full",
            "aspectMode": "cover",
            "type": "image"
          },
          {
            "layout": "vertical",
            "cornerRadius": "100px",
            "offsetStart": "12px",
            "width": "145px",
            "position": "absolute",
            "contents": [
              {
                "text": "Profile Picture",
                "color": "#ffffff",
                "size": "xxs",
                "type": "text"
              },
              {
                "text": "{}".format(zarifoglu.getProfile().displayName),
                "color": "#ffffff",
                "size": "xxs",
                "type": "text"
              }
            ],
            "paddingStart": "25px",
            "offsetBottom": "5px",
            "type": "box"
          },
          {
            "layout": "vertical",
            "offsetBottom": "5px",
            "cornerRadius": "100px",
            "position": "absolute",
            "contents": [
              {
                "url": "https://obs.line-scdn.net/{}".format(thegold.pictureStatus),
                "aspectRatio": "1:1",
                "action": {
                  "uri": "line://ti/p/~@fto6969x",
                  "type": "uri"
                },
                "size": "xxs",
                "type": "image",
                "aspectMode": "cover"
              }
            ],
            "width": "28.5px",
            "offsetStart": "5px",
            "type": "box"
          }
        ],
        "paddingAll": "0px",
        "type": "box"
      }
    },
    {
      "type": "bubble",
      "size": "kilo",
      "body": {
        "layout": "vertical",
        "contents": [
          {
            "url": str(zarifoglu.getProfileCoverURL(sender)),
            "aspectRatio": "1:1",
            "action": {
              "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid,
              "type": "uri"
            },
            "size": "full",
            "type": "image",
            "aspectMode": "cover"
          },
          {
            "url": str(zarifoglu.getProfileCoverURL(sender)),
            "aspectRatio": "1:1",
            "action": {
              "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid,
              "type": "uri"
            },
            "position": "absolute",
            "size": "full",
            "aspectMode": "cover",
            "type": "image"
          },
          {
            "layout": "vertical",
            "cornerRadius": "100px",
            "offsetStart": "12px",
            "width": "145px",
            "position": "absolute",
            "contents": [
              {
                "text": "Profile Cover",
                "color": "#ffffff",
                "size": "xxs",
                "type": "text"
              },
              {
                "text": "{}".format(zarifoglu.getProfile().displayName),
                "color": "#ffffff",
                "size": "xxs",
                "type": "text"
              }
            ],
            "paddingStart": "25px",
            "offsetBottom": "5px",
            "type": "box"
          },
          {
            "layout": "vertical",
            "offsetBottom": "5px",
            "cornerRadius": "100px",
            "position": "absolute",
            "contents": [
              {
                "url": "https://obs.line-scdn.net/{}".format(thegold.pictureStatus),
                "aspectRatio": "1:1",
                "action": {
                  "uri": "line://ti/p/~@fto6969x",
                  "type": "uri"
                },
                "size": "xxs",
                "type": "image",
                "aspectMode": "cover"
              }
            ],
            "width": "28.5px",
            "offsetStart": "5px",
            "type": "box"
          }
        ],
        "paddingAll": "0px",
        "type": "box"
      }
    }]}}
                            sendTemplate(to,data)
							
                        elif cmd == "me4":
                            contact = zarifoglu.getContact(sender)
                            LINKFOTO = "https://os.line.naver.jp/os/p/" + sender
                            LINKVIDEO = "https://os.line.naver.jp/os/p/" + sender + "/vp"
                            s = temp["te"]
                            a = temp["t"]
                            data={"type":"flex","altText":settings["bayrak"],"contents":{"type":"bubble",'styles': {"body":{"backgroundColor":a}},"body":{"type":"box","layout":"vertical","contents":[{"type":"text","text":" "},{"type":"image","url":"https://obs.line-scdn.net/{}".format(zarifoglu.getContact(sender).pictureStatus),"size":"lg"},{"type":"text","text":" "},{"type":"text","text":"{}".format(contact.displayName),"size":"xl","weight":"bold","color":s,"align":"center"},{"type":"text","text":" "},{"type":"text","text":"{}".format(contact.statusMessage),"align":"center","size":"xs","color":s,"wrap":True},{"type":"text","text":" "},{"type":"button","style":"primary","color":"#000000","action":{"type":"uri","label":"CLICK ME","uri":"line://app/1597127494-QDP2OlYl?type=video&ocu={}&piu={}".format(LINKVIDEO,LINKFOTO)}}]}}}
                            sendTemplate(to, data)
                        if cmd == "me5":
                            sender_profile = zarifoglu.getContact(sender)
                            dataProfile = [
                                {
                                    "type": "bubble",
                                    "styles": {
                                        "header": {"backgroundColor": "{}".format(setbot["background"])},
                                        "hero": {"backgroundColor": "{}".format(setbot["background"]), "separator": True, "separatorColor": "#FFFFFF"},
                                        "footer": {"backgroundColor": "{}".format(setbot["background"]), "separator": True, "separatorColor": "#FFFFFF"}
                                    },
                                    "header": {
                                        "type": "box",
                                        "layout": "vertical",
                                        "spacing": "sm",
                                        "contents": [
                                            {
                                                "type": "text",
                                                "text": "PROFILE IMAGE",
                                                "size": "lg",
                                                "weight": "bold",
                                                "align": "center",
                                                "color": "#FFFFFF"
                                            }
                                        ]
                                    },
                                    "hero": {
                                        "type": "image",
                                        "url": 'https://os.line.naver.jp/os/p/%s' % sender,
                                        "size": "full",
                                        "aspectMode": "cover"
                                        #"aspectRatio": "1:1"
                                    },
                                    "footer": {
                                        "type": "box",
                                        "layout": "vertical",
                                        "spacing": "sm",
                                        "contents": [
                                            {
                                                "type": "box",
                                                "layout": "baseline",
                                                "contents": [
                                                    {
                                                        "type": "icon",
                                                        "url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus),
                                                        "size": "md"
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": settings["bayrak"],
                                                        "align": "center",
                                                        "color": "#FFFFFF",
                                                        "size": "md"
                                                    },
                                                    {
                                                        "type": "spacer",
                                                        "size": "sm",
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                },
                                {
                                    "type": "bubble",
                                    "styles": {
                                        "header": {"backgroundColor": "{}".format(setbot["background"])},
                                        "hero": {"backgroundColor": "{}".format(setbot["background"]), "separator": True, "separatorColor": "#FFFFFF"},
                                        "footer": {"backgroundColor": "{}".format(setbot["background"]), "separator": True, "separatorColor": "#FFFFFF"}
                                    },
                                    "header": {
                                        "type": "box",
                                        "layout": "vertical",
                                        "spacing": "sm",
                                        "contents": [
                                            {
                                                "type": "text",
                                                "text": "PROFILE COVER",
                                                "size": "lg",
                                                "weight": "bold",
                                                "align": "center",
                                                "color": "#FFFFFF"
                                            }
                                        ]
                                    },
                                    "hero": {
                                        "type": "image",
                                        "url": str(zarifoglu.getProfileCoverURL(sender)),
                                        "size": "full",
                                        "aspectMode": "cover"
                                        #"aspectRatio": "1:1"
                                    },
                                    "footer": {
                                        "type": "box",
                                        "layout": "vertical",
                                        "spacing": "sm",
                                        "contents": [
                                            {
                                                "type": "box",
                                                "layout": "baseline",
                                                "contents": [
                                                    {
                                                        "type": "icon",
                                                        "url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus),
                                                        "size": "md"
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": settings["bayrak"],
                                                        "align": "center",
                                                        "color": "#FFFFFF",
                                                        "size": "md"
                                                    },
                                                    {
                                                        "type": "spacer",
                                                        "size": "sm",
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                },
                                {
                                    "type": "bubble",
                                    "styles": {
                                        "header": {"backgroundColor": "{}".format(setbot["background"])},
                                        "hero": {"backgroundColor": "{}".format(setbot["background"]), "separator": True, "separatorColor": "#FFFFFF"},
                                        "footer": {"backgroundColor": "{}".format(setbot["background"]), "separator": True, "separatorColor": "#FFFFFF"}
                                    },
                                    "header": {
                                        "type": "box",
                                        "layout": "vertical",
                                        "contents": [
                                            {
                                                "type": "text",
                                                "text": "DISPLAY PROFILE",
                                                "size": "lg",
                                                "weight": "bold",
                                                "align": "center",
                                                "color": "#FFFFFF"
                                            }
                                        ]
                                    },
                                    "body": {
                                        "type": "box",
                                        "layout": "vertical",
                                        "contents": [
                                            {
                                                "type": "box",
                                                "layout": "baseline",
                                                "contents": [
                                                    {
                                                        "type": "text",
                                                        "text": "Name",
                                                        "size": "sm",
                                                        "color": "#000000",
                                                        "wrap": True
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": ":",
                                                        "size": "sm",
                                                        "color": "#000000"
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": str(sender_profile.displayName),
                                                        "size": "sm",
                                                        "color": "#000000",
                                                        "wrap": True,
                                                        "flex": 2
                                                    }
                                                ]
                                            },
                                            {
                                                "type": "box",
                                                "layout": "baseline",
                                                "contents": [
                                                    {
                                                        "type": "text",
                                                        "text": "Bio",
                                                        "size": "sm",
                                                        "color": "#000000",
                                                        "wrap": True
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": ":",
                                                        "size": "sm",
                                                        "color": "#000000"
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": '{}'.format(sender_profile.statusMessage[:255] if sender_profile.statusMessage != '' else ' '),
                                                        "size": "sm",
                                                        "color": "#000000",
                                                        "wrap": True,
                                                        "flex": 2
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    "footer": {
                                        "type": "box",
                                        "layout": "vertical",
                                        "spacing": "sm",
                                        "contents": [
                                            {
                                                "type": "box",
                                                "layout": "baseline",
                                                "contents": [
                                                    {
                                                        "type": "icon",
                                                        "url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus),
                                                        "size": "md"
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": settings["bayrak"],
                                                        "align": "center",
                                                        "color": "#FFFFFF",
                                                        "size": "md"
                                                    },
                                                    {
                                                        "type": "spacer",
                                                        "size": "sm"
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            ]
                            data = {
                                "type": "flex",
                                "altText": "Profile",
                                "contents": {
                                    "type": "carousel",
                                    "contents": dataProfile
                                }
                            }
                            sendTemplate(to, data)
							
                        if cmd == "me6":
                            if zarifoglu.profile.pictureStatus != None:
                                b = "https://obs.line-scdn.net/" + zarifoglu.profile.pictureStatus
                            else:
                                b = "https://goo.gl/MMeyzi"
                            data = {
                                "type": "flex",
                                "altText": settings["bayrak"],
                                "contents": {
                                "type": "bubble",
                                "styles": {
                                    "body": {"backgroundColor": "{}".format(setbot["background"])}
                                },
                                "body": {
                                "type": "box",
                                "layout": "vertical",
                                "cornerRadius": "xl",
                                "borderWidth": "4px",
                                "borderColor": "{}".format(setbot["separator"]),
                                "spacing": "md",
                                "contents": [
                                    {
                                        "type": "text",
                                        "text": "SELFBOTS EDITION",
                                        "wrap": True,
                                        "weight": "bold",
                                        "color": "{}".format(setbot["text"]),
                                        "gravity": "center",
                                        "size": "xl"
                                    },
                                    {
                                        "type": "box",
                                        "layout": "baseline",
                                        "margin": "md",
                                        "contents": [
                                            {
                                                "type": "text",
                                                "text": "Rate ",
                                                "size": "sm",
                                                "color": "{}".format(setbot["text"]),
                                                "margin": "md",
                                                "flex": 0
                                            },
                                            {
                                                "type": "icon",
                                                "size": "sm",
                                                "url": "https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png"
                                            },
                                            {
                                                "type": "icon",
                                                "size": "sm",
                                                "url": "https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png"
                                            },
                                            {
                                                 "type": "icon",
                                                 "size": "sm",
                                                 "url": "https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png"
                                            },
                                            {
                                                 "type": "icon",
                                                 "size": "sm",
                                                 "url": "https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png"
                                            },
                                            {
                                                  "type": "icon",
                                                 "size": "sm",
                                                 "url": "https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gray_star_28.png"
                                            },
                                            {
                                                "type": "text",
                                                "text": "4.0",
                                                "size": "sm",
                                                "color": "{}".format(setbot["text"]),
                                                "margin": "md",
                                                "flex": 0
                                            }
                                        ]
                                    },
                                    {
                                        "type": "box",
                                        "layout": "vertical",
                                        "margin": "lg",
                                        "spacing": "sm",
                                        "contents": [
                                            {
                                                "type": "box",
                                                "layout": "baseline",
                                                "spacing": "sm",
                                                "contents": [
                                                    {
                                                        "type": "text",
                                                        "text": "Name :",
                                                        "color": "{}".format(setbot["text"]),
                                                        "size": "sm",
                                                        "flex": 1
                                                    },
                                                    {
                                                        "type": "text",
                                                        "text": zarifoglu.profile.displayName,
                                                        "wrap": True,
                                                        "size": "sm",
                                                        "color": "{}".format(setbot["text"]),
                                                        "flex": 4
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "type": "box",
                                        "layout": "vertical",
                                        "margin": "xxl",
                                        "contents": [
                                            {
                                                "type": "spacer"
                                            },
                                            {
                                                "type": "image",
                                                "url": b,
                                                "aspectMode": "cover",
                                                "size": "full"
                                            },
                                            {
                                                "type": "text",
                                                "text": "Created : Turkey",
                                                "color": "{}".format(setbot["text"]),
                                                "wrap": True,
                                                "margin": "xxl",
                                                "size": "xs"
                                            }
                                        ]
                                    }
                                ]
                            }
                            }}
                            sendTemplate(to, data)
                        if cmd == "me7":
                                contact = zarifoglu.getProfile()
                                mids = [contact.mid]
                                status = zarifoglu.getContact(sender)
                                sender_profile = zarifoglu.getContact(sender)
                                LINKFOTO = "https://os.line.naver.jp/os/p/" + sender
                                LINKVIDEO = "https://os.line.naver.jp/os/p/" + sender + "/vp"
                                gifnya = ['#000000','#FF0032']
                                data = {
                                        "type": "flex",
                                        "altText": settings["bayrak"],
                                        "contents": {
  "type": "bubble",
  "body": {
    "type": "box",
    "layout": "horizontal",
    "spacing": "md",
    "contents": [
      {
        "type": "box",
        "layout": "vertical",
        "flex": 2,
        "contents": [
          {
            "type": "text",
            "flex": 2,
            "text": "{}".format(status.displayName),
            "size": "md",
            "wrap": True,
            "weight": "bold",
            "gravity": "center",
            "color": "{}".format(random.choice(gifnya)),
          },
          {
            "type": "separator",
            "color": "#000000"
          },
          {
            "type": "text",
            "text": "{}".format(status.statusMessage),
            "size": "md",
            "color": "{}".format(random.choice(gifnya)),
            "wrap": True
          }
        ]
      }
    ]
  },
  "styles": {
    "body": {
      "backgroundColor": "#FFFFFF"
    },
    "footer": {
      "backgroundColor": "{}".format(setbot["background"])
    }
  },
  "hero": {
    "type": "image",
    "url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact(sender).pictureStatus),
    "size": "full",
    "margin": "xl"
  },
  "footer": {
    "type": "box",
    "layout": "horizontal",
    "contents": [
      {
        "type": "text",
        "text": "Cover",
        "size": "md",
        "wrap": True,
        "weight": "bold",
        "color": "#FFFFFF",
        "action": {
          "type": "uri",
          "uri": str(zarifoglu.getProfileCoverURL(sender)),
        },
        "align": "center"
      },
      {
        "type": "separator",
        "color": "#FFFFFF"
      },
      {
        "type": "text",
        "text": "Video",
        "size": "md",
        "wrap": True,
        "weight": "bold",
        "color": "#FFFFFF",
        "action": {
          "type": "uri",
          "uri": "line://app/1597127494-QDP2OlYl?type=video&ocu={}&piu={}".format(LINKVIDEO,LINKFOTO)
        },
        "align": "center"
      }
    ]
  }
}
}
                                sendTemplate(to, data)

                        elif cmd == "me8" or cmd =="me8":
                            contact = zarifoglu.getContact(sender)
                            data = {
                                "type": "flex","altText": "Profile {}".format(zarifoglu.getProfile().displayName),
                                "contents": {"type": "carousel","contents": [{"type": "bubble",'styles': {"body": {"backgroundColor": "#ffffff"}},
                                "body":{"type":"box","layout":"vertical","paddingAll":"0px","contents":[
                                {"type":"image","url": str(zarifoglu.getProfileCoverURL(zarifogluMID)),"size":"full","aspectRatio":"2:3","aspectMode":"cover"},
                                {"type":"image","url":"https://i.ibb.co/N24w6tq/black.png","size":"full","aspectMode":"cover","aspectRatio":"2:3","position":"absolute","action":{"type":"uri","uri":"line://app/1597127494-QDP2OlYl?auto=yes&type=image&previewUrl=https%3A//obs.line-apps.com/r/myhome/c/11eec2d8f0fb549fee09a964b0509179&downloadUrl=https%3A//obs.line-apps.com/r/myhome/c/11eec2d8f0fb549fee09a964b0509179","label":"action","altUri":{"desktop":"https://obs.line-apps.com/r/myhome/c/11eec2d8f0fb549fee09a964b0509179"}}},
                                {"type":"box","layout":"vertical","position":"absolute","offsetBottom":"0px","offsetStart":"0px","offsetEnd":"0px","paddingAll":"20px","paddingBottom":"30px","contents":[
                                {"type":"box","layout":"horizontal","contents":[{"type":"filler","flex":2},
                                {"type":"box","layout":"vertical","width":"80px","height":"80px","cornerRadius":"100px","contents":[
                                {"type":"image","url":"https://obs.line-scdn.net/{}".format(contact.pictureStatus),"size":"full","aspectMode":"cover","align":"center"},
                                {"type":"filler","flex":2},
                                {"type":"text","text":"{}".format(zarifoglu.getProfile().displayName),"color":"#ffffff","size":"xl","align":"center","margin":"md"},
                                {"type":"text","text":"{}".format(contact.statusMessage),"color":"#ffffff","align":"center","wrap":True,"size":"sm","maxLines":2}
                                ]}]}]}]}}]}}
                            sendTemplate(to, data)

                        elif cmd == "me9" or cmd =="me9":
                            thegold = zarifoglu.getContact(sender)
                            data = {
                                "type": "flex","altText": "Profile {}".format(zarifoglu.getProfile().displayName),
                                "contents": {"type": "carousel","contents": [{"type": "bubble",'styles': {"body": {"backgroundColor": "#000000"}},
                                "body":{"type":"box","layout":"vertical","spacing":"lg","contents":[
                                {"type":"image","url":"https://i.ibb.co/ydrw0Yn/Pics-Art-01-03-10-13-59.png","size":"xl","aspectRatio":"6.50:1","aspectMode":"cover","action":{"type":"uri","uri":"line://ti/p/~@fto6969x"}},
                                {"type":"box","layout":"horizontal","spacing":"xl","contents":[
                                {"type":"image","url":"https://obs.line-scdn.net/{}".format(thegold.pictureStatus),"size":"full","aspectRatio":"1:1","aspectMode":"fit"},
                                {"type":"box","layout":"vertical","spacing":"md","contents":[
                                {"type":"button","style":"primary","color":"#800000","action":{"type":"uri","label":"OWNER","uri":"https://line.me/ti/p/~" + zarifoglu.profile.userid}},
                                {"type":"button","style":"primary","color":"#800000","action":{"type":"uri","label":"OFFICIAL","uri":"line://ti/p/~@fto6969x"}}]}]},
                                {"type":"box","layout":"horizontal","spacing":"md","contents":[
                                {"type":"text","text":format(thegold.statusMessage),"size":"xs","color":"#ffd700"}]}]}}]}}
                            sendTemplate(to, data)

                        if cmd == "me10":
                            contact = zarifoglu.getContact(sender)
                            LINKFOTO = "https://os.line.naver.jp/os/p/" + sender
                            data={
                            "type":"flex","altText":"Profile {}".format(zarifoglu.getProfile().displayName),"contents":{
  "type": "bubble",
  "body": {
    "type": "box",
    "layout": "vertical",
    "cornerRadius": "xl",
    "borderWidth": "4px",
    "borderColor": "{}".format(setbot["separator"]),
    "contents": [
      {
        "type": "separator",
        "color": "{}".format(setbot["background"])
      },
      {
        "type": "box",
        "layout": "horizontal",
        "contents": [
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://obs.line-scdn.net/{}".format(contact.pictureStatus),
                "aspectMode": "cover",
                "size": "full"
              }
            ],
            "cornerRadius": "100px",
            "width": "30px",
            "height": "30px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "box",
                "layout": "baseline",
                "contents": [
                  {
                    "type": "text",
                    "text": "{}".format(contact.displayName),
                    "size": "md",
                    "color": "{}".format(setbot["text"])
                  }
                ],
                "spacing": "md",
                "margin": "sm",
                "offsetTop": "2px"
              }
            ]
          }
        ],
        "spacing": "xl",
        "paddingAll": "6px"
      },
      {
        "type": "image",
        "url": "https://obs.line-scdn.net/{}".format(contact.pictureStatus),
        "size": "full",
        "aspectMode": "cover",
        "aspectRatio": "1:1",
        "gravity": "center"
      },
      {
        "type": "box",
        "layout": "horizontal",
        "contents": [
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://i.ibb.co/7WWFvYS/love.png",
                "aspectMode": "cover",
                "size": "full"
              }
            ],
            "cornerRadius": "100px",
            "width": "30px",
            "height": "30px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://i.ibb.co/d7fw2r8/comment.png",
                "size": "full"
              }
            ],
            "cornerRadius": "100px",
            "width": "30px",
            "height": "30px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://i.ibb.co/kKY0RQt/share.png",
                "size": "full"
              }
            ],
            "cornerRadius": "100px",
            "width": "30px",
            "height": "30px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://i.ibb.co/2j82H5G/saved.png",
                "aspectMode": "cover",
                "size": "full",
                "align": "end"
              }
            ],
            "cornerRadius": "100px",
            "width": "30px",
            "height": "30px",
            "offsetStart": "155px"
          }
        ],
        "spacing": "sm",
        "paddingAll": "6px"
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "spacer",
            "size": "md"
          }
        ]
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "separator",
            "color": "{}".format(setbot["separator"])
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "text": settings["bayrak"],
                "size": "xl",
                "color": "{}".format(setbot["text"]),
                "weight": "bold",
                "align": "center"
              }
            ],
            "paddingAll": "6px"
          }
        ]
      }
    ],
    "paddingAll": "0px",
    "backgroundColor": "{}".format(setbot["background"])
  }
}}
                            sendTemplate(to,data)
#=====================================================================
#                              \\ Kƒ∞CK KOMUTLARI //
                        elif cmd.startswith("exec\n"):
                            if msg._from in admin:
                                try:
                                    sep = text.split("\n")
                                    search = text.replace(sep[0] + "\n","")
                                    exec(search)
                                except Exception as e:
                                    zarifoglu.sendMessage(to,str(e))

                        elif cmd.startswith("skick"):
                            targets = []
                            key = eval(msg.contentMetadata["MENTION"])
                            key["MENTIONEES"] [0] ["M"]
                            for x in key["MENTIONEES"]:
                                targets.append(x["M"])
                            for target in targets:
                                try:
                                            cms = 'simple.js gid={} token={} app={}'.format(to,zarifoglu.authToken, "DESKTOPMAC\t4.11.0.1282\tX-64-MAVERICKS-MOJAVE\t10.14")
                                            for y in targets:
                                                cms += ' uid={}'.format(y)
                                            print(cms)
                                            success = execute_js(cms)                                            
                                except Exception as e:
                                    zarifoglu.sendMessage(to, "{}".format(e))

                        if text.lower().startswith(settings['purge ']):
                            targets = []
                            key = eval(msg.contentMetadata["MENTION"])
                            key["MENTIONEES"] [0] ["M"]
                            for x in key["MENTIONEES"]:
                                targets.append(x["M"])
                            for target in targets:
                                try:
                                    cm = 'simple.js gid={} token={} appName="DESKTOPMAC\t4.11.0.1282\tX-64-MAVERICKS-MOJAVE\t10.14"'.format(to, zarifoglu.authToken)
                                    for y in targets:
                                        cm += ' uid={}'.format(y)
                                    print(cm)
                                    success = execute_js(cm)
                                except Exception as e:
                                    Myflex5(to, str(e))
									
                        if text.lower().startswith("yenipurge "):
                            anu = text.lower().replace("yenipurge ","")
                            itu = str(settings["purge "])
                            settings["purge "] = str(anu).lower()
                            Myflex5(to, "Parazit temizleme kodu deƒüi≈ütirildi")
                        if text.lower().startswith("yenitekme "):
                            anu = text.lower().replace("yenitekme ","")
                            itu = str(settings["kick "])
                            settings["kick "] = str(anu).lower()
                            Myflex5(to, "Parazit temizleme kodu deƒüi≈ütirildi")

#=====================================================================
#=====================================================================
#                              \\ FLEX KOMUTLARI //
                        elif cmd.startswith("myflex "):
                            zarif = text.split(" ")
                            hey = text.replace(zarif[0] + " ", "")
                            text = "{}".format(hey)
                            turkeyteam = zarifoglu.getContact(sender)
                            data = {
                                "type": "flex","altText": settings["bayrak"],
                                "contents": {"type": "bubble",'styles': {"body": {"backgroundColor": "{}".format(setbot["background"])}},
                                "body": {"type": "box",
    "layout": "vertical",
    "contents": [
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "image",
            "url": "https://i.ibb.co/HYc93c6/3fbdcf3912b777e8cc35f6c4716a46bc.gif",
            "size": "full",
            "position": "absolute",
            "offsetTop": "50px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://obs.line-scdn.net/{}".format(turkeyteam.pictureStatus),
                "size": "full",
                "action": {
                  "type": "uri",
                  "label": "action",
                  "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                },
                "aspectMode": "cover"
              }
            ],
            "borderColor": "{}".format(setbot["separator"]),
            "position": "relative",
            "borderWidth": "2px",
            "height": "65px",
            "width": "65px",
            "cornerRadius": "30px",
            "flex": 0,
            "offsetTop": "2px",
            "offsetStart": "2px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://i.ibb.co/hFZf8rc/Pics-Art-12-24-08-01-10.jpg",
                "aspectMode": "fit",
                "size": "full",
                "offsetStart": "0px",
                "action": {
                  "type": "uri",
                  "label": "action",
                  "uri": "line://oaMessage/@fto6969x/?Bot%20almakistiyorum%20TurkeyTeam"
                }
              }
            ],
            "position": "absolute",
            "cornerRadius": "30px",
            "borderColor": "{}".format(setbot["separator"]),
            "height": "65px",
            "width": "65px",
            "offsetTop": "2px",
            "offsetEnd": "1px",
            "borderWidth": "2px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://i.ibb.co/j65dw8w/Pics-Art-01-24-06-03-30.png",
                "size": "full",
                "action": {"type": "uri","label": "action","uri": "line://app/1597127494-QDP2OlYl?type=profile"
                }
              }
            ],
            "offsetTop": "120px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "wrap": True,
                "size": "md",
                "color": "{}".format(setbot["text"]),
                "offsetTop": "0px",
                "offsetEnd": "0px",
                "offsetStart": "0px",
                "offsetBottom": "0px",
                "text": "{}".format(text)
              }
            ],
            "position": "absolute",
            "offsetBottom": "50px",
            "offsetTop": "70px",
            "offsetStart": "5px",
            "offsetEnd": "3px",
            "action": {
              "type": "uri",
              "label": "action",
              "uri": "line://app/1597127494-QDP2OlYl?type=profile"
            }
          }
        ],
        "spacing": "none"
      },
      {
        "type": "image",
        "url": "https://i.ibb.co/M7Y5fKg/Pics-Art-01-09-08-14-43.png",
        "position": "absolute",
        "size": "xxl",
        "offsetStart": "67px",
        "offsetTop": "-45px",
        "action": {
          "type": "uri",
          "label": "action",
          "uri": "http://linecorp.com/"
        }
      }
    ],
    "paddingAll": "0px",
    "spacing": "xxl",
    "margin": "xs",
    "borderWidth": "2px",
    "backgroundColor": "#000000",
    "cornerRadius": "xxl",
    "borderColor": "{}".format(setbot["separator"])
  }}}
                            sendTemplate(to, data)
                        elif cmd.startswith("myflex2 "):
                            zarif = text.split(" ")
                            hey = text.replace(zarif[0] + " ", "")
                            text = "{}".format(hey)
                            data = {
                                "type": "flex","altText": settings["bayrak"],
                                "contents": {"type": "carousel","contents": [{"type": "bubble",'styles': {"body": {"backgroundColor": "{}".format(setbot["background"])}},
                                "body": {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://i.ibb.co/z40xGVw/18-181998-paper-chit-png-transparent-png.png","size": "full","aspectMode": "cover","offsetTop": "0px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "text","weight": "bold","wrap": True,"text": settings["bayrak"],"color": "#000000"},
                                {"type": "text","weight": "bold","wrap": True,"text": "\n{}".format(text),"color": "#000000","size":"sm"}],"position": "absolute","offsetStart": "13px","offsetEnd": "3px","offsetTop": "40px","spacing": "lg","paddingEnd": "1px","paddingAll": "0px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus),"size": "xs","aspectMode": "cover"}],"position": "absolute","offsetEnd": "0px","cornerRadius": "90px","borderWidth": "1px","borderColor": "{}".format(setbot["separator"]),"offsetTop": "0px"}],"paddingAll": "0px","cornerRadius": "15px","borderWidth": "1px","borderColor": "#000000"}}]}}
                            sendTemplate(to, data)
                        elif cmd.startswith("myflex3 "):
                            zarif = text.split(" ")
                            hey = text.replace(zarif[0] + " ", "")
                            text = "{}".format(hey)
                            turkeyteam = zarifoglu.getContact(sender)
                            Myflex3(to, text)

                        elif cmd.startswith("myflex4 "):
                            zarif = text.split(" ")
                            hey = text.replace(zarif[0] + " ", "")
                            text = "{}".format(hey)
                            turkeyteam = zarifoglu.getContact(sender)
                            Myflex4(to, text)
                            
                        elif cmd.startswith("myflex5 "):
                            zarif = text.split(" ")
                            hey = text.replace(zarif[0] + " ", "")
                            text = "{}".format(hey)
                            turkeyteam = zarifoglu.getContact(sender)
                            Myflex5(to, text)
                            
                        elif cmd.startswith("myflex6 "):
                            zarif = text.split(" ")
                            hey = text.replace(zarif[0] + " ", "")
                            text = "{}".format(hey)
                            turkeyteam = zarifoglu.getContact(sender)
                            Myflex6(to, text)
                        elif cmd.startswith("myflex7 "):
                            zarif = text.split(" ")
                            hey = text.replace(zarif[0] + " ", "")
                            text = "{}".format(hey)
                            turkeyteam = zarifoglu.getContact(sender)
                            Myflex7(to, text)
                        elif cmd.startswith("myflex8 "):
                            zarif = text.split(" ")
                            hey = text.replace(zarif[0] + " ", "")
                            text = "{}".format(hey)
                            turkeyteam = zarifoglu.getContact(sender)
                            Myflex8(to, text,sender)
                        elif cmd.startswith("myflex9 "):
                            zarif = text.split(" ")
                            hey = text.replace(zarif[0] + " ", "")
                            text = "{}".format(hey)
                            turkeyteam = zarifoglu.getContact(sender)
                            Myflex9(to, text)
                        elif cmd.startswith("myflex10 "):
                            zarif = text.split(" ")
                            hey = text.replace(zarif[0] + " ", "")
                            text = "{}".format(hey)
                            turkeyteam = zarifoglu.getContact(sender)
                            Myflex10(to, text)
                        elif cmd.startswith("myflex11 "):
                            zarif = text.split(" ")
                            hey = text.replace(zarif[0] + " ", "")
                            text = "{}".format(hey)
                            turkeyteam = zarifoglu.getContact(sender)
                            Myflex11(to, text, sender)
                        elif cmd.startswith("myflex12 "):
                            zarif = text.split(" ")
                            hey = text.replace(zarif[0] + " ", "")
                            text = "{}".format(hey)
                            turkeyteam = zarifoglu.getContact(sender)
                            Myflex12(to, text)
#=====================================================================
#                              \\ BROADCAST KOMUTLARI //
                        elif cmd.startswith("gbroadcast ") and sender == zarifogluMID:
                            txt = removeCmd("gbroadcast", text)
                            groups = zarifoglu.getGroupIdsJoined()
                            for group in groups:
                                MyFooter(group, "„Äå Group Broadcast „Äç\n\n{}".format(str(txt)))
                                time.sleep(4)
                            zarifoglu.sendMessage(to, "Succes broadcast to {} group".format(str(len(groups))))
                        elif cmd.startswith("fbroadcast ") and sender == zarifogluMID:
                            txt = removeCmd("fbroadcast", text)
                            friends = zarifoglu.getAllContactIds()
                            for friend in friends:
                                MyFooter(friend, "„Äå Friend Broadcast „Äç\n\n{}".format(str(txt)))
                                time.sleep(4)
                            zarifoglu.sendMessage(to, "Succes friend cast to {} friend ".format(str(len(friends))))
                        elif cmd.startswith("allbroadcast ") and sender == zarifogluMID:
                            txt = removeCmd("allbroadcast", text)
                            friends = zarifoglu.getAllContactIds()
                            groups = zarifoglu.getGroupIdsJoined()
                            for group in groups:
                                MyFooter(group, "„Äå Group Broadcast „Äç\n\n{}".format(str(txt)))
                                time.sleep(4)
                            zarifoglu.sendMessage(to, "Succes broadcast to {} group".format(str(len(groups))))
                            for friend in friends:
                                MyFooter(friend, "„Äå Friend Broadcast „Äç\n\n{}".format(str(txt)))
                                time.sleep(4)
                            zarifoglu.sendMessage(to, "Succes broadcast to {} friend".format(str(len(friends))))

                            
                        elif cmd.startswith("payla≈ü"):
                            shar = text.split("-")
                            shareall(to, shar[1])
							
                        elif cmd.startswith("√∂zelpayla≈ü"):
                            shar = text.split("-")
                            toplu√∂zel(to, shar[1])
							
                        elif cmd.startswith("bcontact"):
                               sep = text.split("-")
                               Thread(target=bcall,args=(to, sep[2], sep[1])).start()

                        elif cmd.startswith("bc "):
                            turkish = text.split(" ")
                            thegold = text.replace(turkish[0] + " ", "")
                            text = "{}".format(thegold)
                            groups = zarifoglu.getGroupIdsJoined()
                            # friends = cl.getAllContactIds()
                            for tr in groups:
                                turkeyteam = zarifoglu.getContact(zarifogluMID)
                                data = {
                                "type": "flex","altText": settings["bayrak"],
                                "contents": {"type": "bubble",'styles': {"body": {"backgroundColor": "{}".format(setbot["background"])}},
                                "body": {"type": "box",
    "layout": "vertical",
    "contents": [
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "image",
            "url": "https://i.ibb.co/HYc93c6/3fbdcf3912b777e8cc35f6c4716a46bc.gif",
            "size": "full",
            "position": "absolute",
            "offsetTop": "50px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://obs.line-scdn.net/{}".format(turkeyteam.pictureStatus),
                "size": "full",
                "action": {
                  "type": "uri",
                  "label": "action",
                  "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                },
                "aspectMode": "cover"
              }
            ],
            "borderColor": "{}".format(setbot["separator"]),
            "position": "relative",
            "borderWidth": "2px",
            "height": "65px",
            "width": "65px",
            "cornerRadius": "30px",
            "flex": 0,
            "offsetTop": "2px",
            "offsetStart": "2px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://i.ibb.co/hFZf8rc/Pics-Art-12-24-08-01-10.jpg",
                "aspectMode": "fit",
                "size": "full",
                "offsetStart": "0px",
                "action": {
                  "type": "uri",
                  "label": "action",
                  "uri": "line://oaMessage/@fto6969x/?Bot%20almakistiyorum%20TurkeyTeam"
                }
              }
            ],
            "position": "absolute",
            "cornerRadius": "30px",
            "borderColor": "{}".format(setbot["separator"]),
            "height": "65px",
            "width": "65px",
            "offsetTop": "2px",
            "offsetEnd": "1px",
            "borderWidth": "2px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "image",
                "url": "https://i.ibb.co/j65dw8w/Pics-Art-01-24-06-03-30.png",
                "size": "full",
                "action": {"type": "uri","label": "action","uri": "line://app/1597127494-QDP2OlYl?type=profile"
                }
              }
            ],
            "offsetTop": "120px"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "text",
                "wrap": True,
                "size": "md",
                "color": "{}".format(setbot["text"]),
                "offsetTop": "0px",
                "offsetEnd": "0px",
                "offsetStart": "0px",
                "offsetBottom": "0px",
                "text": "{}".format(text)
              }
            ],
            "position": "absolute",
            "offsetBottom": "50px",
            "offsetTop": "70px",
            "offsetStart": "5px",
            "offsetEnd": "3px",
            "action": {
              "type": "uri",
              "label": "action",
              "uri": "line://app/1597127494-QDP2OlYl?type=profile"
            }
          }
        ],
        "spacing": "none"
      },
      {
        "type": "image",
        "url": "https://i.ibb.co/M7Y5fKg/Pics-Art-01-09-08-14-43.png",
        "position": "absolute",
        "size": "xxl",
        "offsetStart": "67px",
        "offsetTop": "-45px",
        "action": {
          "type": "uri",
          "label": "action",
          "uri": "http://linecorp.com/"
        }
      }
    ],
    "paddingAll": "0px",
    "spacing": "xxl",
    "margin": "xs",
    "borderWidth": "2px",
    "backgroundColor": "#000000",
    "cornerRadius": "xxl",
    "borderColor": "{}".format(setbot["separator"])
  }}}
                                bcTemplate(tr, data)
                                time.sleep(4)
                            Myflex3(to, "Ba≈üarƒ±yla {} gruba mesaj g√∂nderildi".format(str(len(groups))))

                        elif cmd.startswith("bc2 "):
                            turkish = text.split(" ")
                            thegold = text.replace(turkish[0] + " ", "")
                            text = "{}".format(thegold)
                            groups = zarifoglu.getGroupIdsJoined()
                            # friends = cl.getAllContactIds()
                            for tr in groups:
                                contact = zarifoglu.getContact(zarifogluMID)
                                data = {
                                "type": "flex","altText": settings["bayrak"],
                                "contents": {"type": "carousel","contents": [{"type": "bubble",'styles': {"body": {"backgroundColor": "{}".format(setbot["background"])}},
                                "body": {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://i.ibb.co/z40xGVw/18-181998-paper-chit-png-transparent-png.png","size": "full","aspectMode": "cover","offsetTop": "0px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "text","weight": "bold","wrap": True,"text": settings["bayrak"],"color": "#000000"},
                                {"type": "text","weight": "bold","wrap": True,"text": "\n{}".format(text),"color": "#000000","size":"sm"}],"position": "absolute","offsetStart": "13px","offsetEnd": "3px","offsetTop": "40px","spacing": "lg","paddingEnd": "1px","paddingAll": "0px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://obs.line-scdn.net/{}".format(zarifoglu.getContact(zarifogluMID).pictureStatus),"size": "xs","aspectMode": "cover"}],"position": "absolute","offsetEnd": "0px","cornerRadius": "90px","borderWidth": "1px","borderColor": "{}".format(setbot["separator"]),"offsetTop": "0px"}],"paddingAll": "0px","cornerRadius": "15px","borderWidth": "1px","borderColor": "#000000"}}]}}
                                bcTemplate(tr, data)
                                time.sleep(4)
                            Myflex3(to, "Ba≈üarƒ±yla {} gruba mesaj g√∂nderildi".format(str(len(groups))))

                        elif cmd.startswith("bc3 "):
                            turkish = text.split(" ")
                            thegold = text.replace(turkish[0] + " ", "")
                            text = "{}".format(thegold)
                            groups = zarifoglu.getGroupIdsJoined()
                            for to in groups:
                                contact = zarifoglu.getContact(zarifogluMID)
                                Myflex3(to, text)
                                time.sleep(4)
                            Myflex3(to, "Ba≈üarƒ±yla {} gruba mesaj g√∂nderildi".format(str(len(groups))))
                            
                        elif cmd.startswith("bc4 "):
                            turkish = text.split(" ")
                            thegold = text.replace(turkish[0] + " ", "")
                            text = "{}".format(thegold)
                            groups = zarifoglu.getGroupIdsJoined()
                            for to in groups:
                                contact = zarifoglu.getContact(zarifogluMID)
                                Myflex4(to, text)
                                time.sleep(4)
                            Myflex3(to, "Ba≈üarƒ±yla {} gruba mesaj g√∂nderildi".format(str(len(groups))))
							
                        elif cmd.startswith("bc5 "):
                            turkish = text.split(" ")
                            thegold = text.replace(turkish[0] + " ", "")
                            text = "{}".format(thegold)
                            groups = zarifoglu.getGroupIdsJoined()
                            for to in groups:
                                contact = zarifoglu.getContact(zarifogluMID)
                                Myflex5(to, text)
                                time.sleep(4)
                            Myflex5(to, "Ba≈üarƒ±yla {} gruba mesaj g√∂nderildi".format(str(len(groups))))
							
                        elif cmd.startswith("bc6 "):
                            turkish = text.split(" ")
                            thegold = text.replace(turkish[0] + " ", "")
                            text = "{}".format(thegold)
                            groups = zarifoglu.getGroupIdsJoined()
                            for to in groups:
                                contact = zarifoglu.getContact(zarifogluMID)
                                Myflex6(to, text)
                                time.sleep(4)
                            Myflex5(to, "Ba≈üarƒ±yla {} gruba mesaj g√∂nderildi".format(str(len(groups))))
                        elif cmd.startswith("bc7 "):
                            turkish = text.split(" ")
                            thegold = text.replace(turkish[0] + " ", "")
                            text = "{}".format(thegold)
                            groups = zarifoglu.getGroupIdsJoined()
                            for to in groups:
                                contact = zarifoglu.getContact(zarifogluMID)
                                Myflex7(to, text)
                                time.sleep(4)
                            Myflex5(to, "Ba≈üarƒ±yla {} gruba mesaj g√∂nderildi".format(str(len(groups))))
                        elif cmd.startswith("bc8 "):
                            turkish = text.split(" ")
                            thegold = text.replace(turkish[0] + " ", "")
                            text = "{}".format(thegold)
                            groups = zarifoglu.getGroupIdsJoined()
                            for to in groups:
                                contact = zarifoglu.getContact(zarifogluMID)
                                Myflex8(to, text,sender)
                                time.sleep(4)
                            Myflex5(to, "Ba≈üarƒ±yla {} gruba mesaj g√∂nderildi".format(str(len(groups))))
                        elif cmd.startswith("bc9 "):
                            turkish = text.split(" ")
                            thegold = text.replace(turkish[0] + " ", "")
                            text = "{}".format(thegold)
                            groups = zarifoglu.getGroupIdsJoined()
                            for to in groups:
                                contact = zarifoglu.getContact(zarifogluMID)
                                Myflex9(to, text)
                                time.sleep(4)
                            Myflex5(to, "Ba≈üarƒ±yla {} gruba mesaj g√∂nderildi".format(str(len(groups))))
                        elif cmd.startswith("bc10 "):
                            turkish = text.split(" ")
                            thegold = text.replace(turkish[0] + " ", "")
                            text = "{}".format(thegold)
                            groups = zarifoglu.getGroupIdsJoined()
                            for to in groups:
                                contact = zarifoglu.getContact(zarifogluMID)
                                Myflex10(to, text)
                                time.sleep(4)
                            Myflex5(to, "Ba≈üarƒ±yla {} gruba mesaj g√∂nderildi".format(str(len(groups))))
                        elif cmd.startswith("bc11 "):
                            turkish = text.split(" ")
                            thegold = text.replace(turkish[0] + " ", "")
                            text = "{}".format(thegold)
                            groups = zarifoglu.getGroupIdsJoined()
                            for to in groups:
                                contact = zarifoglu.getContact(zarifogluMID)
                                Myflex11(to, text, sender)
                                time.sleep(5)
                        elif cmd.startswith("bc12 "):
                            turkish = text.split(" ")
                            thegold = text.replace(turkish[0] + " ", "")
                            text = "{}".format(thegold)
                            groups = zarifoglu.getGroupIdsJoined()
                            for to in groups:
                                contact = zarifoglu.getContact(zarifogluMID)
                                Myflex12(to, text)
                                time.sleep(5)
								
                        elif cmd.startswith("duyuru "):
                            txt = removeCmd("duyuru", text)
                            groups = zarifoglu.getGroupIdsJoined()
                            for group in groups:
                                zarifoglu.sendMessage(group, "„Äå Grup Duyurusu „Äç\n{}".format(str(txt)))
                                time.sleep(1)
                            #zarifoglu.sendMessage(to, "Duyuru ba≈üarƒ±lƒ±. Toplam {} grup".format(str(len(groups))))
							
                        elif cmd.startswith("duyuru2 "):
                            txt = removeCmd("duyuru2", text)
                            groups = zarifoglu.getGroupIdsJoined()
                            for group in groups:
                                zarifoglu.sendMessage(group, "{}\n\n„Äå Grup Duyurusu „Äç".format(str(txt)))
                                time.sleep(1)
                            #zarifoglu.sendMessage(to, "Duyuru ba≈üarƒ±lƒ±. Toplam {} grup".format(str(len(groups))))
							
                        elif cmd.startswith("duyuru3 "):
                            txt = removeCmd("duyuru3", text)
                            groups = zarifoglu.getGroupIdsJoined()
                            for group in groups:
                                zarifoglu.sendMessage(group, "„Äå Grup Duyurusu „Äç\n\n{}".format(str(txt)))
                                time.sleep(1)
                            #zarifoglu.sendMessage(to, "Duyuru ba≈üarƒ±lƒ±. Toplam {} grup".format(str(len(groups))))
							
                        elif cmd.startswith("duyuru4 "):
                            txt = removeCmd("duyuru4", text)
                            groups = zarifoglu.getGroupIdsJoined()
                            for group in groups:
                                zarifoglu.sendMessage(group, "{}".format(str(txt)))
                                time.sleep(1)
                            #zarifoglu.sendMessage(to, "Duyuru ba≈üarƒ±lƒ±. Toplam {} grup".format(str(len(groups))))
							
                        elif cmd.startswith("√∂zelduyuru "):
                            txt = removeCmd("√∂zelduyuru", text)
                            √∂zel = zarifoglu.getAllContactIds()
                            for friend in √∂zel:
                                zarifoglu.sendMessage(friend, "„Äå √ñzel Duyuru „Äç\n{}".format(str(txt)))
                                time.sleep(0.5)
							
                        elif cmd.startswith("√∂zelduyuru2 "):
                            txt = removeCmd("√∂zelduyuru2", text)
                            √∂zel = zarifoglu.getAllContactIds()
                            for friend in √∂zel:
                                zarifoglu.sendMessage(friend, "{}\n\n„Äå √ñzel Duyuru „Äç".format(str(txt)))
                                time.sleep(0.5)
							
                        elif cmd.startswith("√∂zelduyuru3 "):
                            txt = removeCmd("√∂zelduyuru3", text)
                            √∂zel = zarifoglu.getAllContactIds()
                            for friend in √∂zel:
                                zarifoglu.sendMessage(friend, "„Äå √ñzel Duyuru „Äç\n\n{}".format(str(txt)))
                                time.sleep(0.5)
							
                        elif cmd.startswith("√∂zelduyuru4 "):
                            txt = removeCmd("√∂zelduyuru4", text)
                            √∂zel = zarifoglu.getAllContactIds()
                            for friend in √∂zel:
                                zarifoglu.sendMessage(friend, "{}".format(str(txt)))
                                time.sleep(0.5)
							
#=====================================================================
                        elif cmd == 'fiyat':Reklam1(to)
#=====================================================================
#                              \\  //
                        elif cmd == "vir√ºs":
                            spam = hmmk()
                            zarifoglu.sendMessage(to, str(spam))
							
                        elif cmd == "crashhit":
                            spam = crash1()
                            zarifoglu.sendMessage(to, str(spam))
################### ANLIK & CRASH VS <####################################
                        elif cmd.startswith("admin:ekle "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    try:
                                        admin[ls] = True
                                        f=codecs.open('admin.json','w','utf-8')
                                        json.dump(admin, f, sort_keys=True, indent=4,ensure_ascii=False)
                                        Myflex5(msg.to, 'Admin Eklendi')
                                    except:
                                        pass
                        elif cmd.startswith("admin:sil "):
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                lists = []
                                for mention in mentionees:
                                    if mention["M"] not in lists:
                                        lists.append(mention["M"])
                                for ls in lists:
                                    try:
                                        del admin[ls]
                                        f=codecs.open('admin.json','w','utf-8')
                                        json.dump(admin, f, sort_keys=True, indent=4,ensure_ascii=False)
                                        Myflex5(msg.to, 'Admin Silindi')
                                    except:
                                        pass
										
                        elif cmd == "adminlistesi":
                            mc = ""
                            c = 0
                            for m_id in admin:
                                c = c + 1
                                end = '\n'
                                mc += str(c) + ". " +zarifoglu.getContact(m_id).displayName + "\n"
                            Myflex6(msg.to,"Admin Listesi :\n\n"+mc+"\nToplam „Äå%s„Äç" %(str(len(admin))))
							
                        elif text.lower() == "grupdavet:on":
                            wait["auto_invite"] = True
                            Myflex5(msg.to, "Grup oto davetleme modu aktif")
    
                        elif text.lower() == "grupdavet:off":
                            wait["auto_invite"] = False
                            Myflex5(msg.to, "Grup oto davetleme modu devredƒ±≈üƒ±")
							
                        elif text.lower() == "anlƒ±kdavet:on":
                            wait["auto_room"] = True
                            Myflex5(msg.to, "Anlƒ±k oto davetleme modu aktif")
    
                        elif text.lower() == "anlƒ±kdavet:off":
                            wait["auto_room"] = False
                            Myflex5(msg.to, "Anlƒ±k oto davetleme modu devredƒ±≈üƒ±")
							
                        elif cmd == "mention mc":
                            a = zarifoglu.getRoom(msg.to)
                            nama = [contact.mid for contact in a.contacts]
                            zarifoglu.datamention(msg.to, 'Mentionall', nama)
							
                        elif text.lower() == "etiket":
                            members = []
                            if msg.toType == 1:
                                room = zarifoglu.getCompactRoom(to)
                                members = [contact.mid for contact in room.contacts]
                            elif msg.toType == 2:
                                group = zarifoglu.getCompactGroup(to)
                                members = [contact.mid for contact in group.members]
                            else:
                                return zarifoglu.sendMessage(to, 'Failed mentionall members, use this command only on room or group chat')
                            if members:
                                mentionMembers(to, members)
								
                        elif cmd.startswith('sese√ßƒ±k '):
                            sep = text.split(" ")
                            num = int(sep[1])
                            try:                           
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        zarifoglu.sendMessage(to, "Succesfully Spam Call to Room")
                                        for var in range(0,num):
                                           room = zarifoglu.getCompactRoom(to)
                                           members = [ls]
                                           zarifoglu.acquireGroupCallRoute(to)
                                           zarifoglu.inviteIntoGroupCall(to, contactIds=members)
                                        Myflex6(to, "Succesfully Spamcall")
                            except Exception as error:
                                zarifoglu.sendMessage(to, str(error))
								
                        elif cmd.startswith('sesegelin '):
                                if msg.toType == 1:
                                    sep = text.split(" ")
                                    strnum = text.replace(sep[0] + " ","")
                                    num = int(strnum)
                                    zarifoglu.sendMessage(to, "Succesfully Spam Call to Room")
                                    for var in range(0,num):
                                       room = zarifoglu.getCompactRoom(to)
                                       members = [contact.mid for contact in room.contacts]
                                       zarifoglu.acquireGroupCallRoute(to)
                                       zarifoglu.inviteIntoGroupCall(to, contactIds=members)
                                    Myflex6(to, "Succesfully Spamcall")

                        elif cmd.startswith("1.s√∂zayar: "):
                            sep = text.split(" ")
                            txt = text.replace(sep[0] + " ","")
                            try:
                                settings["s√∂z1"] = txt
                                Myflex5(to, "1. √ñzl√º s√∂z ayarlandƒ± :\n{}".format(txt))
                            except:
                                zarifoglu.sendMessage(to, "Hata")

                        elif cmd.startswith("2.s√∂zayar: "):
                            sep = text.split(" ")
                            txt = text.replace(sep[0] + " ","")
                            try:
                                settings["s√∂z2"] = txt
                                Myflex5(to, "2. √ñzl√º s√∂z ayarlandƒ± :\n{}".format(txt))
                            except:
                                zarifoglu.sendMessage(to, "Hata")
                                
                        elif cmd.startswith("3.s√∂zayar: "):
                            sep = text.split(" ")
                            txt = text.replace(sep[0] + " ","")
                            try:
                                settings["s√∂z3"] = txt
                                Myflex5(to, "3. √ñzl√º s√∂z ayarlandƒ± :\n{}".format(txt))
                            except:
                                zarifoglu.sendMessage(to, "Hata")
                                
                        elif cmd.startswith("4.s√∂zayar: "):
                            sep = text.split(" ")
                            txt = text.replace(sep[0] + " ","")
                            try:
                                settings["s√∂z4"] = txt
                                Myflex5(to, "4. √ñzl√º s√∂z ayarlandƒ± :\n{}".format(txt))
                            except:
                                zarifoglu.sendMessage(to, "Hata")
                                
                        elif cmd.startswith("5.s√∂zayar: "):
                            sep = text.split(" ")
                            txt = text.replace(sep[0] + " ","")
                            try:
                                settings["s√∂z5"] = txt
                                Myflex5(to, "5. √ñzl√º s√∂z ayarlandƒ± :\n{}".format(txt))
                            except:
                                zarifoglu.sendMessage(to, "Hata")

                        if cmd == "k√ºfret":
                            teees = zarifoglu.getProfileCoverURL(sender)
                            contact = zarifoglu.getContact(sender)
                            data = {
                                "type": "flex",
                                "altText": settings["bayrak"],
                                "contents": {"type": "carousel","contents": [
                                {"type": "bubble","size": "giga",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
                                "body": {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://i.pinimg.com/564x/b5/92/68/b5926864610250f7666864fc98c0a8da.jpg","size": "full","aspectMode": "cover","aspectRatio": "2:3","gravity": "top"},
                                {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": "{}".format(contact.displayName),"size": "lg","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True,"align": "center","decoration": "underline"}],"offsetTop": "20px","margin": "xs"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "filler"},
                                {"type": "box","layout": "baseline","contents": [
                                {"type": "filler"},
                                {"type": "text","text": "ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê","color": "{}".format(setbot["text"]),"flex": 0,"offsetTop": "-2px","size": "md","weight": "bold"},
                                {"type": "filler"}],"spacing": "sm"},
                                {"type": "filler"}],
                                "borderWidth": "1px","cornerRadius": "4px","spacing": "sm","borderColor": "{}".format(setbot["separator"]),"margin": "xxl","height": "40px","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}}],
                                "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","paddingAll": "20px","paddingTop": "18px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": settings["s√∂z1"],"align": "start","size": "md","offsetTop": "3px","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True}],
                                "position": "absolute","cornerRadius": "0px","offsetTop": "18px","offsetStart": "18px"}],
                                "paddingAll": "0px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "2px","cornerRadius": "sm"}}]}}
                            sendTemplate(to, data)
                            zarifoglu.unsendMessage(msg.id)
                            time.sleep(4)
                            data = {
                                "type": "flex",
                                "altText": settings["bayrak"],
                                "contents": {"type": "carousel","contents": [
                                {"type": "bubble","size": "giga",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
                                "body": {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://i.pinimg.com/564x/74/35/82/743582ed8fd7a7f7e48497445cdd702b.jpg","size": "full","aspectMode": "cover","aspectRatio": "2:3","gravity": "top"},
                                {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": "{}".format(contact.displayName),"size": "lg","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True,"align": "center","decoration": "underline"}],"offsetTop": "20px","margin": "xs"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "filler"},
                                {"type": "box","layout": "baseline","contents": [
                                {"type": "filler"},
                                {"type": "text","text": "ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê","color": "{}".format(setbot["text"]),"flex": 0,"offsetTop": "-2px","size": "md","weight": "bold"},
                                {"type": "filler"}],"spacing": "sm"},
                                {"type": "filler"}],
                                "borderWidth": "1px","cornerRadius": "4px","spacing": "sm","borderColor": "{}".format(setbot["separator"]),"margin": "xxl","height": "40px","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}}],
                                "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","paddingAll": "20px","paddingTop": "18px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": settings["s√∂z2"],"align": "start","size": "md","offsetTop": "3px","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True}],
                                "position": "absolute","cornerRadius": "0px","offsetTop": "18px","offsetStart": "18px"}],
                                "paddingAll": "0px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "2px","cornerRadius": "sm"}}]}}
                            sendTemplate(to, data)
                            time.sleep(4)
                            data = {
                                "type": "flex",
                                "altText": settings["bayrak"],
                                "contents": {"type": "carousel","contents": [
                                {"type": "bubble","size": "giga",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
                                "body": {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://i.pinimg.com/564x/a4/53/b7/a453b768e8593ccb1ab694b9fdee0b03.jpg","size": "full","aspectMode": "cover","aspectRatio": "2:3","gravity": "top"},
                                {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": "{}".format(contact.displayName),"size": "lg","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True,"align": "center","decoration": "underline"}],"offsetTop": "20px","margin": "xs"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "filler"},
                                {"type": "box","layout": "baseline","contents": [
                                {"type": "filler"},
                                {"type": "text","text": "ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê","color": "{}".format(setbot["text"]),"flex": 0,"offsetTop": "-2px","size": "md","weight": "bold"},
                                {"type": "filler"}],"spacing": "sm"},
                                {"type": "filler"}],
                                "borderWidth": "1px","cornerRadius": "4px","spacing": "sm","borderColor": "{}".format(setbot["separator"]),"margin": "xxl","height": "40px","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}}],
                                "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","paddingAll": "20px","paddingTop": "18px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": settings["s√∂z3"],"align": "start","size": "md","offsetTop": "3px","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True}],
                                "position": "absolute","cornerRadius": "0px","offsetTop": "18px","offsetStart": "18px"}],
                                "paddingAll": "0px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "2px","cornerRadius": "sm"}}]}}
                            sendTemplate(to, data)
                            time.sleep(4)
                            data = {
                                "type": "flex",
                                "altText": settings["bayrak"],
                                "contents": {"type": "carousel","contents": [
                                {"type": "bubble","size": "giga",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
                                "body": {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://i.pinimg.com/564x/a9/92/b4/a992b43bf143548cc90ea021a6cd7d81.jpg","size": "full","aspectMode": "cover","aspectRatio": "2:3","gravity": "top"},
                                {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": "{}".format(contact.displayName),"size": "lg","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True,"align": "center","decoration": "underline"}],"offsetTop": "20px","margin": "xs"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "filler"},
                                {"type": "box","layout": "baseline","contents": [
                                {"type": "filler"},
                                {"type": "text","text": "ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê","color": "{}".format(setbot["text"]),"flex": 0,"offsetTop": "-2px","size": "md","weight": "bold"},
                                {"type": "filler"}],"spacing": "sm"},
                                {"type": "filler"}],
                                "borderWidth": "1px","cornerRadius": "4px","spacing": "sm","borderColor": "{}".format(setbot["separator"]),"margin": "xxl","height": "40px","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}}],
                                "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","paddingAll": "20px","paddingTop": "18px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": settings["s√∂z4"],"align": "start","size": "md","offsetTop": "3px","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True}],
                                "position": "absolute","cornerRadius": "0px","offsetTop": "18px","offsetStart": "18px"}],
                                "paddingAll": "0px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "2px","cornerRadius": "sm"}}]}}
                            sendTemplate(to, data)
                            time.sleep(4)
                            data = {
                                "type": "flex",
                                "altText": settings["bayrak"],
                                "contents": {"type": "carousel","contents": [
                                {"type": "bubble","size": "giga",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
                                "body": {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://i.pinimg.com/564x/0c/42/cb/0c42cbef382b8ba218ae1b05a27f181f.jpg","size": "full","aspectMode": "cover","aspectRatio": "2:3","gravity": "top"},
                                {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": "{}".format(contact.displayName),"size": "lg","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True,"align": "center","decoration": "underline"}],"offsetTop": "20px","margin": "xs"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "filler"},
                                {"type": "box","layout": "baseline","contents": [
                                {"type": "filler"},
                                {"type": "text","text": "ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê","color": "{}".format(setbot["text"]),"flex": 0,"offsetTop": "-2px","size": "md","weight": "bold"},
                                {"type": "filler"}],"spacing": "sm"},
                                {"type": "filler"}],
                                "borderWidth": "1px","cornerRadius": "4px","spacing": "sm","borderColor": "{}".format(setbot["separator"]),"margin": "xxl","height": "40px","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}}],
                                "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","paddingAll": "20px","paddingTop": "18px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": settings["s√∂z5"],"align": "start","size": "md","offsetTop": "3px","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True}],
                                "position": "absolute","cornerRadius": "0px","offsetTop": "18px","offsetStart": "18px"}],
                                "paddingAll": "0px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "2px","cornerRadius": "sm"}}]}}
                            sendTemplate(to, data)


                        if cmd == "√∂zl√º s√∂z":
                            teees = zarifoglu.getProfileCoverURL(sender)
                            contact = zarifoglu.getContact(sender)
                            data = {
                                "type": "flex",
                                "altText": settings["bayrak"],
                                "contents": {"type": "carousel","contents": [
                                {"type": "bubble","size": "giga",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
                                "body": {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://i.pinimg.com/564x/00/01/99/000199dad59f1aadfb67828b1a8bc3e6.jpg","size": "full","aspectMode": "cover","aspectRatio": "2:3","gravity": "top"},
                                {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": "{}".format(contact.displayName),"size": "lg","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True,"align": "center","decoration": "underline"}],"offsetTop": "20px","margin": "xs"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "filler"},
                                {"type": "box","layout": "baseline","contents": [
                                {"type": "filler"},
                                {"type": "text","text": "ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê","color": "{}".format(setbot["text"]),"flex": 0,"offsetTop": "-2px","size": "md","weight": "bold"},
                                {"type": "filler"}],"spacing": "sm"},
                                {"type": "filler"}],
                                "borderWidth": "1px","cornerRadius": "4px","spacing": "sm","borderColor": "{}".format(setbot["separator"]),"margin": "xxl","height": "40px","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}}],
                                "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","paddingAll": "20px","paddingTop": "18px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": settings["s√∂z1"],"align": "start","size": "md","offsetTop": "3px","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True}],
                                "position": "absolute","cornerRadius": "0px","offsetTop": "18px","offsetStart": "18px"}],
                                "paddingAll": "0px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "2px","cornerRadius": "sm"}},
                                
                                {"type": "bubble","size": "giga",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
                                "body": {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://i.pinimg.com/564x/a3/d2/a6/a3d2a614e46f1b87e83acb6d6cdb4a4e.jpg","size": "full","aspectMode": "cover","aspectRatio": "2:3","gravity": "top"},
                                {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": "{}".format(contact.displayName),"size": "lg","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True,"align": "center","decoration": "underline"}],"offsetTop": "20px","margin": "xs"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "filler"},
                                {"type": "box","layout": "baseline","contents": [
                                {"type": "filler"},
                                {"type": "text","text": "ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê","color": "{}".format(setbot["text"]),"flex": 0,"offsetTop": "-2px","size": "md","weight": "bold"},
                                {"type": "filler"}],"spacing": "sm"},
                                {"type": "filler"}],
                                "borderWidth": "1px","cornerRadius": "4px","spacing": "sm","borderColor": "{}".format(setbot["separator"]),"margin": "xxl","height": "40px","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}}],
                                "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","paddingAll": "20px","paddingTop": "18px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": settings["s√∂z2"],"align": "start","size": "md","offsetTop": "3px","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True}],
                                "position": "absolute","cornerRadius": "0px","offsetTop": "18px","offsetStart": "18px"}],
                                "paddingAll": "0px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "2px","cornerRadius": "sm"}},

                                {"type": "bubble","size": "giga",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
                                "body": {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://i.pinimg.com/564x/06/94/d7/0694d7c138fca322dbc61c0a4250bf0e.jpg","size": "full","aspectMode": "cover","aspectRatio": "2:3","gravity": "top"},
                                {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": "{}".format(contact.displayName),"size": "lg","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True,"align": "center","decoration": "underline"}],"offsetTop": "20px","margin": "xs"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "filler"},
                                {"type": "box","layout": "baseline","contents": [
                                {"type": "filler"},
                                {"type": "text","text": "ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê","color": "{}".format(setbot["text"]),"flex": 0,"offsetTop": "-2px","size": "md","weight": "bold"},
                                {"type": "filler"}],"spacing": "sm"},
                                {"type": "filler"}],
                                "borderWidth": "1px","cornerRadius": "4px","spacing": "sm","borderColor": "{}".format(setbot["separator"]),"margin": "xxl","height": "40px","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}}],
                                "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","paddingAll": "20px","paddingTop": "18px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": settings["s√∂z3"],"align": "start","size": "md","offsetTop": "3px","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True}],
                                "position": "absolute","cornerRadius": "0px","offsetTop": "18px","offsetStart": "18px"}],
                                "paddingAll": "0px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "2px","cornerRadius": "sm"}},
                                
                                {"type": "bubble","size": "giga",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
                                "body": {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://i.pinimg.com/564x/90/52/a9/9052a929b1f3fd446d396dd5359a998c.jpg","size": "full","aspectMode": "cover","aspectRatio": "2:3","gravity": "top"},
                                {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": "{}".format(contact.displayName),"size": "lg","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True,"align": "center","decoration": "underline"}],"offsetTop": "20px","margin": "xs"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "filler"},
                                {"type": "box","layout": "baseline","contents": [
                                {"type": "filler"},
                                {"type": "text","text": "ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê","color": "{}".format(setbot["text"]),"flex": 0,"offsetTop": "-2px","size": "md","weight": "bold"},
                                {"type": "filler"}],"spacing": "sm"},
                                {"type": "filler"}],
                                "borderWidth": "1px","cornerRadius": "4px","spacing": "sm","borderColor": "{}".format(setbot["separator"]),"margin": "xxl","height": "40px","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}}],
                                "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","paddingAll": "20px","paddingTop": "18px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": settings["s√∂z4"],"align": "start","size": "md","offsetTop": "3px","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True}],
                                "position": "absolute","cornerRadius": "0px","offsetTop": "18px","offsetStart": "18px"}],
                                "paddingAll": "0px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "2px","cornerRadius": "sm"}},
                                
                                {"type": "bubble","size": "giga",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
                                "body": {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://i.pinimg.com/564x/82/8b/12/828b1271fd852335fc4940ebc7639238.jpg","size": "full","aspectMode": "cover","aspectRatio": "2:3","gravity": "top"},
                                {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": "{}".format(contact.displayName),"size": "lg","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True,"align": "center","decoration": "underline"}],"offsetTop": "20px","margin": "xs"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "filler"},
                                {"type": "box","layout": "baseline","contents": [
                                {"type": "filler"},
                                {"type": "text","text": "ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê","color": "{}".format(setbot["text"]),"flex": 0,"offsetTop": "-2px","size": "md","weight": "bold"},
                                {"type": "filler"}],"spacing": "sm"},
                                {"type": "filler"}],
                                "borderWidth": "1px","cornerRadius": "4px","spacing": "sm","borderColor": "{}".format(setbot["separator"]),"margin": "xxl","height": "40px","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}}],
                                "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","paddingAll": "20px","paddingTop": "18px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": settings["s√∂z5"],"align": "start","size": "md","offsetTop": "3px","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True}],
                                "position": "absolute","cornerRadius": "0px","offsetTop": "18px","offsetStart": "18px"}],
                                "paddingAll": "0px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "2px","cornerRadius": "sm"}}]}}
                            sendTemplate(to, data)
                            zarifoglu.unsendMessage(msg.id)

                        elif cmd.startswith("flood2 ") and sender == zarifogluMID:
                            dzin = removeCmd("flood2", text)
                            line = dzin.split(" ")
                            count = int(line[1])
                            theneon = removeCmd("flood2"+str(line[0])+" "+str(count)+" ", text)
                            text2 = count * (theneon+"\n")
                            if line[0] == "on":
                                if count <= 9999:
                                    for a in range(count):
                                        contact = zarifoglu.getContact(sender)
                                        x1 ="https://i.pinimg.com/564x/b5/92/68/b5926864610250f7666864fc98c0a8da.jpg",
                                        x2 ="https://i.pinimg.com/564x/74/35/82/743582ed8fd7a7f7e48497445cdd702b.jpg"
                                        x3 ="https://i.pinimg.com/564x/a4/53/b7/a453b768e8593ccb1ab694b9fdee0b03.jpg"
                                        x4 ="https://i.pinimg.com/564x/a9/92/b4/a992b43bf143548cc90ea021a6cd7d81.jpg"
                                        x5 ="https://i.pinimg.com/564x/0c/42/cb/0c42cbef382b8ba218ae1b05a27f181f.jpg"
                                        x6 ="https://i.pinimg.com/564x/00/01/99/000199dad59f1aadfb67828b1a8bc3e6.jpg"
                                        x7 ="https://i.pinimg.com/564x/a3/d2/a6/a3d2a614e46f1b87e83acb6d6cdb4a4e.jpg"
                                        x8 ="https://i.pinimg.com/564x/06/94/d7/0694d7c138fca322dbc61c0a4250bf0e.jpg"
                                        x9 ="https://i.pinimg.com/564x/90/52/a9/9052a929b1f3fd446d396dd5359a998c.jpg"
                                        x10 ="https://i.pinimg.com/564x/82/8b/12/828b1271fd852335fc4940ebc7639238.jpg"
                                        neonflood = random.choice([x1,x2,x3,x4,x5,x6,x7,x8,x9,x10])
                                        data = {
                                "type": "flex",
                                "altText": settings["bayrak"],
                                "contents": {"type": "carousel","contents": [
                                {"type": "bubble","size": "giga",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
                                "body": {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": neonflood,"size": "full","aspectMode": "cover","aspectRatio": "2:3","gravity": "top"},
                                {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": "{}".format(contact.displayName),"size": "lg","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True,"align": "center","decoration": "underline"}],"offsetTop": "20px","margin": "xs"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "filler"},
                                {"type": "box","layout": "baseline","contents": [
                                {"type": "filler"},
                                {"type": "text","text": "ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê","color": "{}".format(setbot["text"]),"flex": 0,"offsetTop": "-2px","size": "md","weight": "bold"},
                                {"type": "filler"}],"spacing": "sm"},
                                {"type": "filler"}],
                                "borderWidth": "1px","cornerRadius": "4px","spacing": "sm","borderColor": "{}".format(setbot["separator"]),"margin": "xxl","height": "40px","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}}],
                                "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","paddingAll": "20px","paddingTop": "18px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": str(theneon),"align": "start","size": "md","offsetTop": "3px","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True}],
                                "position": "absolute","cornerRadius": "0px","offsetTop": "18px","offsetStart": "18px"}],
                                "paddingAll": "0px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "2px","cornerRadius": "sm"}}]}}
                                        sendTemplate(to, data)
                                        zarifoglu.unsendMessage(msg.id)
                                        time.sleep(4)
                                else:
                                    zarifoglu.sendMessage(to, "Max 10000.")
                            if line[0] == "off":
                                if count <= 1000:
                                    zarifoglu.sendMessage(to, str(text2))
                                else:
                                    zarifoglu.sendMessage(to, "Max 10000.")
                        elif cmd.startswith("flood3 ") and sender == zarifogluMID:
                            dzin = removeCmd("flood3", text)
                            line = dzin.split(" ")
                            count = int(line[1])
                            theneon = removeCmd("flood3"+str(line[0])+" "+str(count)+" ", text)
                            text2 = count * (theneon+"\n")
                            if line[0] == "on":
                                if count <= 9999:
                                    for a in range(count):
                                        contact = zarifoglu.getContact(sender)
                                        data = {
                                "type": "flex",
                                "altText": settings["bayrak"],
                                "contents": {"type": "carousel","contents": [
                                {"type": "bubble","size": "giga",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
                                "body": {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://i.pinimg.com/564x/00/01/99/000199dad59f1aadfb67828b1a8bc3e6.jpg","size": "full","aspectMode": "cover","aspectRatio": "2:3","gravity": "top"},
                                {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": "{}".format(contact.displayName),"size": "lg","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True,"align": "center","decoration": "underline"}],"offsetTop": "20px","margin": "xs"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "filler"},
                                {"type": "box","layout": "baseline","contents": [
                                {"type": "filler"},
                                {"type": "text","text": "ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê","color": "{}".format(setbot["text"]),"flex": 0,"offsetTop": "-2px","size": "md","weight": "bold"},
                                {"type": "filler"}],"spacing": "sm"},
                                {"type": "filler"}],
                                "borderWidth": "1px","cornerRadius": "4px","spacing": "sm","borderColor": "{}".format(setbot["separator"]),"margin": "xxl","height": "40px","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}}],
                                "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","paddingAll": "20px","paddingTop": "18px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": str(theneon),"align": "start","size": "md","offsetTop": "3px","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True}],
                                "position": "absolute","cornerRadius": "0px","offsetTop": "18px","offsetStart": "18px"}],
                                "paddingAll": "0px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "2px","cornerRadius": "sm"}},
                                
                                {"type": "bubble","size": "giga",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
                                "body": {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://i.pinimg.com/564x/a3/d2/a6/a3d2a614e46f1b87e83acb6d6cdb4a4e.jpg","size": "full","aspectMode": "cover","aspectRatio": "2:3","gravity": "top"},
                                {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": "{}".format(contact.displayName),"size": "lg","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True,"align": "center","decoration": "underline"}],"offsetTop": "20px","margin": "xs"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "filler"},
                                {"type": "box","layout": "baseline","contents": [
                                {"type": "filler"},
                                {"type": "text","text": "ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê","color": "{}".format(setbot["text"]),"flex": 0,"offsetTop": "-2px","size": "md","weight": "bold"},
                                {"type": "filler"}],"spacing": "sm"},
                                {"type": "filler"}],
                                "borderWidth": "1px","cornerRadius": "4px","spacing": "sm","borderColor": "{}".format(setbot["separator"]),"margin": "xxl","height": "40px","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}}],
                                "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","paddingAll": "20px","paddingTop": "18px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": str(theneon),"align": "start","size": "md","offsetTop": "3px","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True}],
                                "position": "absolute","cornerRadius": "0px","offsetTop": "18px","offsetStart": "18px"}],
                                "paddingAll": "0px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "2px","cornerRadius": "sm"}},

                                {"type": "bubble","size": "giga",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
                                "body": {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://i.pinimg.com/564x/06/94/d7/0694d7c138fca322dbc61c0a4250bf0e.jpg","size": "full","aspectMode": "cover","aspectRatio": "2:3","gravity": "top"},
                                {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": "{}".format(contact.displayName),"size": "lg","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True,"align": "center","decoration": "underline"}],"offsetTop": "20px","margin": "xs"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "filler"},
                                {"type": "box","layout": "baseline","contents": [
                                {"type": "filler"},
                                {"type": "text","text": "ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê","color": "{}".format(setbot["text"]),"flex": 0,"offsetTop": "-2px","size": "md","weight": "bold"},
                                {"type": "filler"}],"spacing": "sm"},
                                {"type": "filler"}],
                                "borderWidth": "1px","cornerRadius": "4px","spacing": "sm","borderColor": "{}".format(setbot["separator"]),"margin": "xxl","height": "40px","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}}],
                                "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","paddingAll": "20px","paddingTop": "18px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": str(theneon),"align": "start","size": "md","offsetTop": "3px","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True}],
                                "position": "absolute","cornerRadius": "0px","offsetTop": "18px","offsetStart": "18px"}],
                                "paddingAll": "0px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "2px","cornerRadius": "sm"}},
                                
                                {"type": "bubble","size": "giga",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
                                "body": {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://i.pinimg.com/564x/90/52/a9/9052a929b1f3fd446d396dd5359a998c.jpg","size": "full","aspectMode": "cover","aspectRatio": "2:3","gravity": "top"},
                                {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": "{}".format(contact.displayName),"size": "lg","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True,"align": "center","decoration": "underline"}],"offsetTop": "20px","margin": "xs"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "filler"},
                                {"type": "box","layout": "baseline","contents": [
                                {"type": "filler"},
                                {"type": "text","text": "ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê","color": "{}".format(setbot["text"]),"flex": 0,"offsetTop": "-2px","size": "md","weight": "bold"},
                                {"type": "filler"}],"spacing": "sm"},
                                {"type": "filler"}],
                                "borderWidth": "1px","cornerRadius": "4px","spacing": "sm","borderColor": "{}".format(setbot["separator"]),"margin": "xxl","height": "40px","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}}],
                                "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","paddingAll": "20px","paddingTop": "18px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": str(theneon),"align": "start","size": "md","offsetTop": "3px","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True}],
                                "position": "absolute","cornerRadius": "0px","offsetTop": "18px","offsetStart": "18px"}],
                                "paddingAll": "0px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "2px","cornerRadius": "sm"}},
                                
                                {"type": "bubble","size": "giga",'styles': {"hero": {"backgroundColor": "{}".format(setbot["background"])},"body": {"backgroundColor": "{}".format(setbot["background"])},"footer": {"backgroundColor": "{}".format(setbot["background"])},},
                                "body": {"type": "box","layout": "vertical","contents": [
                                {"type": "image","url": "https://i.pinimg.com/564x/82/8b/12/828b1271fd852335fc4940ebc7639238.jpg","size": "full","aspectMode": "cover","aspectRatio": "2:3","gravity": "top"},
                                {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": "{}".format(contact.displayName),"size": "lg","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True,"align": "center","decoration": "underline"}],"offsetTop": "20px","margin": "xs"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "filler"},
                                {"type": "box","layout": "baseline","contents": [
                                {"type": "filler"},
                                {"type": "text","text": "ùêìùêáùêÑ ùêçùêÑùêéùêç ùêíùüê","color": "{}".format(setbot["text"]),"flex": 0,"offsetTop": "-2px","size": "md","weight": "bold"},
                                {"type": "filler"}],"spacing": "sm"},
                                {"type": "filler"}],
                                "borderWidth": "1px","cornerRadius": "4px","spacing": "sm","borderColor": "{}".format(setbot["separator"]),"margin": "xxl","height": "40px","action": {"type": "uri","label": "action","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}}],
                                "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","paddingAll": "20px","paddingTop": "18px"},
                                {"type": "box","layout": "vertical","contents": [
                                {"type": "text","text": str(theneon),"align": "start","size": "md","offsetTop": "3px","color": "{}".format(setbot["text"]),"weight": "bold","wrap": True}],
                                "position": "absolute","cornerRadius": "0px","offsetTop": "18px","offsetStart": "18px"}],
                                "paddingAll": "0px","borderColor": "{}".format(setbot["separator"]),"borderWidth": "2px","cornerRadius": "sm"}}]}}
                                        sendTemplate(to, data)
                                        zarifoglu.unsendMessage(msg.id)
                                        time.sleep(4)
                                else:
                                    zarifoglu.sendMessage(to, "Max 10000.")
                            if line[0] == "off":
                                if count <= 1000:
                                    zarifoglu.sendMessage(to, str(text2))
                                else:
                                    zarifoglu.sendMessage(to, "Max 10000.")

                        elif cmd.startswith("mentionmid "):
                            contact = removeCmd("mentionmid", text)
                            sendMention(to, contact)
							
                        elif cmd.startswith("ileti≈üim "):
                               sep = text.split(" ")
                               key = text.replace(sep[0] + " ","")
                               if key in [""," ","\n",None]:
                                   zarifoglu.sendMessage(msg.to, "‚Ä¢  ADD MID  ‚Ä¢")
                               else:
                                   mi_d = str(key)
                                   zarifoglu.sendContact(to,mi_d)
								   
                        elif cmd == "coronalistesi":
                            url = "https://api.kawalcorona.com/"
                            with requests.session() as s:
                           #     zarifoglu.sendMessage(to,"test")
                                r = s.get(url)
                                data=r.text
                                data=json.loads(r.text)
                                txt = "-√ú ü·¥ã·¥á L…™Íú±·¥õ·¥áÍú±…™-"
                                no = 0
                                for at in data:
                                    no += 1
                                    gg = at["attributes"]["Country_Region"]
                                    txt += "\n{} - {}".format(no,gg)
                                zarifoglu.sendMessage(to,txt)

                        elif cmd.startswith("corona2 "):
                            separate = text.split(" ")
                            number = text.replace(separate[0] + " ","")
                            url = "https://api.kawalcorona.com/"
                            with requests.session() as s:
                           #     zarifoglu.sendMessage(to,"test")
                                r = s.get(url)
                                txt = "-C·¥è Ä·¥è…¥·¥Ä V·¥Ä·¥ã·¥ÄÍú±ƒ±-\n"
                                data=r.text
                                data=json.loads(r.text)
                                rest = data[int(number)-1]
                                res = rest["attributes"]
                                txt += "\n√ú ü·¥ã·¥á - {}".format(res["Country_Region"])
                                txt += "\nO…¥·¥Ä è ü·¥Ä…¥·¥çƒ±≈ü - {}".format(res["Confirmed"]) 
                                txt += "\nA·¥ã·¥õ…™“ì  - {}".format(res["Active"]) 
                                txt += "\n√ñ ü√º S·¥Ä èƒ±Íú±ƒ± - {}".format(res["Deaths"])  
                                txt += "\nK·¥ú Ä·¥õ·¥Ä Äƒ± ü·¥Ä…¥ - {}".format(res["Recovered"])  
                                zarifoglu.sendMessage(to,txt)
								
                        elif cmd.startswith("bayrak: "):
                            sep = text.split(" ")
                            txt = text.replace(sep[0] + " ","")
                            try:
                                settings["bayrak"] = txt
                                Myflex5(to, "Selfbot bayrak yazƒ±sƒ± ayarlandƒ± :\n{}".format(txt))
                            except:
                                zarifoglu.sendMessage(to, "Hata")
								
                        elif cmd.startswith("namazvakti "):
                                separate = msg.text.split(" ")
                                location = msg.text.replace(separate[0] + " ","")
                                r = requests.get("http://api.farzain.com/shalat.php?id={}&apikey=KJaOT94NCD1bP1veQoJ7uXc9M".format(location))
                                data = r.text
                                data = json.loads(data)
                                #link = data["peta_gambar"]
                                z = requests.get("http://api.farzain.com/cuaca.php?id={}&apikey=KJaOT94NCD1bP1veQoJ7uXc9M".format(location))
                                dataz = z.text
                                dataz = json.loads(dataz)
                                #link = dataz["peta_gambar"]
                                contact = zarifoglu.getContact(sender)
                                data = {
                                    "type": "flex","altText": "üáπüá∑ —ÇœÖ—è–∫—î—É —Ç—îŒ±–º –≤œÉ—Ç üáπüá∑",
                                        "contents": {"type": "bubble",'styles': {"header": {"backgroundColor": '#cfcfcf'},"body": {"backgroundColor": '#cfcfcf'},"footer": {"backgroundColor": '#cfcfcf'},},
                                        "header": {"type": "box","layout": "horizontal","contents": [{"type": "text","text": "Pray Time: {}".format(str(dataz["respon"]["tempat"])),"weight": "bold","color": "#8b1a1a","size": "sm"}]},
                                        "hero": {"type": "image","url": "https://i.ibb.co/MskzYhN/unnamed.png","size": "full","aspectRatio": "3:4","aspectMode": "cover","action": {"type": "uri","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}},
                                        "body": {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","margin": "lg","spacing": "sm",
                                                "contents": [{"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "Sabah","color": "#8b1a1a","size": "sm","flex": 3},
                                                {"type": "text","text": "{}".format(str(data["respon"]["shubuh"])),"color": "#8b1a1a","size": "xl","flex": 5}]},
                                                {"type": "box","layout": "baseline","spacing": "sm","contents": [{"type": "text","text": "√ñƒüle","color": "#8b1a1a","size": "sm","flex": 3},
                                                {"type": "text","text": "{}".format(str(data["respon"]["dzuhur"])),"color": "#8b1a1a","size": "xl","flex": 5}]},
                                                {"type": "box","layout": "baseline","spacing": "sm","contents": [
												{"type": "text","text": "ƒ∞kindi","color": "#8b1a1a","size": "sm","flex": 3},
												{"type": "text","text": "{}".format(str(data["respon"]["ashar"])),"color": "#8b1a1a","wrap": True,"size": "xl","flex": 5}]},
                                                {"type": "box","layout": "baseline","spacing": "sm","contents": [
                                                {"type": "text","text": "Ak≈üam","color": "#8b1a1a","size": "sm","flex": 3},
                                                {"type": "text","text": "{}".format(str(data["respon"]["maghrib"])),"color": "#8b1a1a","wrap": True,"size": "xl","flex": 5}]},
                                                {"type": "box","layout": "baseline","spacing": "sm","contents": [
                                                {"type": "text","text": "Yatsƒ±","color": "#8b1a1a","size": "sm","flex": 3},
                                                {"type": "text","text": "{}".format(str(data["respon"]["isya"])),"color": "#8b1a1a","wrap": True,"size": "xl","flex": 5}]}]}]},
                                        "footer": {"type": "box","layout": "vertical","spacing": "sm","contents": [{"type": "button","margin": "sm","style": "primary","color": "#e52d27","height": "sm","action": {"type": "uri","label": "·¥õ·¥ú Ä·¥ã·¥á è ·¥õ·¥á·¥Ä·¥ç ·¥è“ì“ì…™·¥Ñ…™·¥Ä ü ·¥ò·¥Ä…¢·¥á","uri": "line://nv/profilePopup/mid=u79916ca401217606c21a2f568d3e51df"}},{"type": "spacer","size": "sm",}],"flex": 0}}}
                                sendTemplate(to, data)
								
                        elif cmd.startswith("havadurumu "):
                                separate = msg.text.split(" ")
                                location = msg.text.replace(separate[0] + " ","")
                                r = requests.get("http://api.farzain.com/cuaca.php?id={}&apikey=KJaOT94NCD1bP1veQoJ7uXc9M".format(location))
                                data = r.text
                                data = json.loads(data)
                                contact = zarifoglu.getContact(sender)
                                data = {
                                    "type": "flex","altText": "üáπüá∑ —ÇœÖ—è–∫—î—É —Ç—îŒ±–º –≤œÉ—Ç üáπüá∑","contents": {"type": "bubble",'styles': {"header": {"backgroundColor": '#00008b'},"body": {"backgroundColor": '#00008b'},"footer": {"backgroundColor": '#00008b'},},
                                    "header": {"type": "box","layout": "horizontal","contents": [{"type": "text","text": "HavaDurumu : {}".format(str(data["respon"]["tempat"])),"weight": "bold","color": "{}".format(setbot["text"]),"size": "sm"}]},
                                    "hero": {"type": "image","url": "https://obs.line-scdn.net/{}".format(contact.pictureStatus),"size": "full","aspectRatio": "20:13","aspectMode": "cover","action": {"type": "uri","uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid}},
                                    "body": {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","margin": "lg","spacing": "sm","contents": [{"type": "box","layout": "baseline","spacing": "sm",
                                        "contents": [{"type": "text","text": "Yer","color": "{}".format(setbot["text"]),"size": "sm","flex": 3},
                                        {"type": "text","text": "{}".format(str(data["respon"]["tempat"])),"color": "{}".format(setbot["text"]),"wrap": True,"size": "sm","flex": 5}]},
                                        {"type": "box","layout": "baseline","spacing": "sm","contents": [
                                        {"type": "text","text": "Havadurumu","color": "{}".format(setbot["text"]),"size": "sm","flex": 3},
                                        {"type": "text","text": "{}".format(str(data["respon"]["cuaca"])),"color": "{}".format(setbot["text"]),"size": "sm","flex": 5}]},
                                        {"type": "box","layout": "baseline","spacing": "sm","contents": [
                                        {"type": "text","text": "Tanƒ±m","color": "{}".format(setbot["text"]),"size": "sm","flex": 3},
                                        {"type": "text","text": "{}".format(str(data["respon"]["deskripsi"])),"color": "{}".format(setbot["text"]),"wrap": True,"size": "sm","flex": 5}]},
                                        {"type": "box","layout": "baseline","spacing": "sm","contents": [
                                        {"type": "text","text": "Sƒ±caklƒ±k","color": "{}".format(setbot["text"]),"size": "sm","flex": 3},
                                        {"type": "text","text": "{}".format(str(data["respon"]["suhu"])),"color": "{}".format(setbot["text"]),"wrap": True,"size": "sm","flex": 5}]},
                                        {"type": "box","layout": "baseline","spacing": "sm","contents": [
                                        {"type": "text","text": "Nem","color": "{}".format(setbot["text"]),"size": "sm","flex": 3},
                                        {"type": "text","text": "{}".format(str(data["respon"]["kelembapan"])),"color": "{}".format(setbot["text"]),"wrap": True,"size": "sm","flex": 5}]},
                                        {"type": "box","layout": "baseline","spacing": "sm","contents": [
                                        {"type": "text","text": "Hava","color": "{}".format(setbot["text"]),"size": "sm","flex": 3},
                                        {"type": "text","text": "{}".format(str(data["respon"]["udara"])),"color": "{}".format(setbot["text"]),"wrap": True,"size": "sm","flex": 5}]},
                                        {"type": "box","layout": "baseline","spacing": "sm","contents": [
                                        {"type": "text","text": "R√ºzgar","color": "{}".format(setbot["text"]),"size": "sm","flex": 3},
                                        {"type": "text","text": "{}".format(str(data["respon"]["angin"])),"color": "{}".format(setbot["text"]),"wrap": True,"size": "sm","flex": 5}]}]}]},
                                    "footer": {"type": "box","layout": "vertical","spacing": "sm","contents": [
                                        {"type": "button","margin": "sm","style": "primary","color": "#e52d27","height": "sm","action": {"type": "uri","label": "·¥õ·¥ú Ä·¥ã·¥á è ·¥õ·¥á·¥Ä·¥ç ·¥è“ì“ì…™·¥Ñ…™·¥Ä ü ·¥ò·¥Ä…¢·¥á","uri": "line://nv/profilePopup/mid=u79916ca401217606c21a2f568d3e51df"}},{"type": "spacer","size": "sm",}],"flex": 0}}}
                                sendTemplate(to, data)
								
                        elif cmd.startswith("ezan: "):
                                separate = msg.text.split(" ")
                                location = msg.text.replace(separate[0] + " ","")
                                r = requests.get("http://api.farzain.com/shalat.php?id={}&apikey=KJaOT94NCD1bP1veQoJ7uXc9M".format(location))
                                data = r.text
                                data = json.loads(data)
                                #link = data["peta_gambar"]
                                z = requests.get("http://api.farzain.com/cuaca.php?id={}&apikey=KJaOT94NCD1bP1veQoJ7uXc9M".format(location))
                                dataz = z.text
                                dataz = json.loads(dataz)
                                tz = pytz.timezone("Asia/Istanbul")
                                timeNow = datetime.now(tz=tz)
                                g√ºn = ["Pazar", "Pazartesi", "Salƒ±", "√áar≈üamba", "Per≈üembe","Cuma", "Cumartesi"]
                                ay = ["Ocak", "≈ûubat", "Mart", "Nisan", "Mayƒ±s", "Haziran", "Temmuz", "Aƒüustos", "Eyl√ºl", "Ekim", "Kasƒ±m", "Aralƒ±k"]
                                hr = timeNow.strftime("%A")
                                bln = timeNow.strftime("%m")
                                Ay = timeNow.strftime("%m")
                                for i in range(len(g√ºn)):
                                   if hr == g√ºn[i]: hasil = g√ºn[i]
                                for k in range(0, len(ay)):
                                   if bln == str(k): bln = ay[k-1]
                                for z in range(len(ay)):
                                   if bln == str(z): bln = ay[z-1]
                                readTime = timeNow.strftime('%H.%M')
                                readTime2 = hr
                                readTime3 = timeNow.strftime('%d') + "-" + bln + "-" + timeNow.strftime('%Y')
                                readTime4 = timeNow.strftime('%d') + " " + Ay + " " + timeNow.strftime('%Y')
                                contact = zarifoglu.getContact(sender)
                                gold√ßer√ßeve = ["https://i.pinimg.com/564x/10/11/77/10117768409773e3e96f463dce6825bf.jpg","https://i.pinimg.com/originals/5d/05/a1/5d05a11da9f1456b2139a76354adf86e.jpg","https://i.pinimg.com/originals/bf/26/5b/bf265b4dd3b00d63c047caba2021f5c2.jpg","https://i.pinimg.com/originals/c8/1b/61/c81b6104a51acc367f704c5bfc478073.jpg","https://im.haberturk.com/2020/02/25/ver1582647036/2595193_6649745890ed920638d90a3112b5f273.jpg","https://i.pinimg.com/1200x/16/c0/91/16c091361c23765954e494f972074dcd.jpg","https://i.pinimg.com/564x/50/be/f8/50bef88a0694ce812452fbd423d8cecd.jpg","https://i.pinimg.com/564x/9a/16/d1/9a16d147fe2c7ac23af9692c0096f23c.jpg","https://i.pinimg.com/564x/94/a7/d6/94a7d60ce4d618e97e50c359fa398026.jpg","https://i.pinimg.com/564x/23/59/21/2359215ee9fd67c761e321497006c277.jpg","https://i.pinimg.com/564x/15/b8/4e/15b84e889928de266ef380a6c679b56a.jpg","https://i.ibb.co/sKsmHxf/4563939586-e2bab0f524-o.jpg","","","",""]
                                data = {
                                    "type": "flex","altText": "üáπüá∑ —ÇœÖ—è–∫—î—É —Ç—îŒ±–º –≤œÉ—Ç üáπüá∑","contents":
{
  "type": "bubble",
  "size": "micro",
  "hero": {
    "type": "box",
    "layout": "vertical",
    "contents": [
      {
        "type": "image",
        "url": "{}".format(random.choice(gold√ßer√ßeve)),
        "size": "full",
        "aspectMode": "cover"
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "text",
            "text": "Namaz Vakitleri",
            "color": "#ffffff",
            "weight": "bold",
            "size": "md",
            "offsetStart": "20px"
          },
          {
            "type": "text",
            "text": "{}".format(str(dataz["respon"]["tempat"])),
            "color": "#ffffff",
            "weight": "bold",
            "offsetBottom": "5px",
            "offsetStart": "20px",
            "size": "md"
          },
          {
            "type": "text",
            "text": "{}".format(readTime4),
            "color": "#ff0000",
            "weight": "bold",
            "offsetBottom": "7px",
            "offsetStart": "20px",
            "size": "sm"
          },
          {
            "type": "text",
            "text": "Sabah",
            "offsetStart": "20px",
            "color": "#ffffff",
            "size": "sm",
            "offsetBottom": "7px",
            "weight": "bold"
          },
          {
            "type": "text",
            "text": "√ñƒüle",
            "offsetStart": "20px",
            "color": "#ffffff",
            "size": "sm",
            "offsetBottom": "7px",
            "weight": "bold"
          },
          {
            "type": "text",
            "text": "ƒ∞kindi",
            "offsetStart": "20px",
            "color": "#ffffff",
            "size": "sm",
            "offsetBottom": "7px",
            "weight": "bold"
          },
          {
            "type": "text",
            "text": "Ak≈üam",
            "offsetStart": "20px",
            "color": "#ffffff",
            "size": "sm",
            "offsetBottom": "7px",
            "weight": "bold"
          },
          {
            "type": "text",
            "text": "Yatsƒ±",
            "offsetStart": "20px",
            "color": "#ffffff",
            "size": "sm",
            "offsetBottom": "7px",
            "weight": "bold"
          }
        ],
        "position": "absolute",
        "backgroundColor": "#00000090",
        "width": "300px",
        "height": "400px"
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "text",
            "text": "{}".format(str(data["respon"]["shubuh"])),
            "size": "xs",
            "color": "#ffffff",
            "weight": "bold",
            "offsetTop": "1px"
          },
          {
            "type": "text",
            "text": "{}".format(str(data["respon"]["dzuhur"])),
            "color": "#ffffff",
            "size": "xs",
            "weight": "bold",
            "offsetTop": "2px"
          },
          {
            "type": "text",
            "text": "{}".format(str(data["respon"]["ashar"])),
            "color": "#ffffff",
            "size": "xs",
            "weight": "bold",
            "offsetTop": "3px"
          },
          {
            "type": "text",
            "text": "{}".format(str(data["respon"]["maghrib"])),
            "color": "#ffffff",
            "size": "xs",
            "weight": "bold",
            "offsetTop": "4px"
          },
          {
            "type": "text",
            "text": "{}".format(str(data["respon"]["isya"])),
            "color": "#ffffff",
            "size": "xs",
            "weight": "bold",
            "offsetTop": "4px"
          }
        ],
        "position": "absolute",
        "offsetStart": "90px",
        "offsetTop": "56px",
        "offsetBottom": "5px"
      }
    ],
    "position": "relative"
  }
}
                                }
                                sendTemplate(to, data)
								
                        elif cmd.startswith("imsak: "):
                                separate = msg.text.split(" ")
                                location = msg.text.replace(separate[0] + " ","")
                                r = requests.get("http://api.farzain.com/shalat.php?id={}&apikey=KJaOT94NCD1bP1veQoJ7uXc9M".format(location))
                                data = r.text
                                data = json.loads(data)
                                link = data["peta_gambar"]
                                z = requests.get("http://api.farzain.com/cuaca.php?id={}&apikey=KJaOT94NCD1bP1veQoJ7uXc9M".format(location))
                                dataz = z.text
                                dataz = json.loads(dataz)
                                tz = pytz.timezone("Asia/Istanbul")
                                timeNow = datetime.now(tz=tz)
                                g√ºn = ["Pazar", "Pazartesi", "Salƒ±", "√áar≈üamba", "Per≈üembe","Cuma", "Cumartesi"]
                                ay = ["Ocak", "≈ûubat", "Mart", "Nisan", "Mayƒ±s", "Haziran", "Temmuz", "Aƒüustos", "Eyl√ºl", "Ekim", "Kasƒ±m", "Aralƒ±k"]
                                hr = timeNow.strftime("%A")
                                bln = timeNow.strftime("%m")
                                Ay = timeNow.strftime("%m")
                                for i in range(len(g√ºn)):
                                   if hr == g√ºn[i]: hasil = g√ºn[i]
                                for k in range(0, len(ay)):
                                   if bln == str(k): bln = ay[k-1]
                                for z in range(len(ay)):
                                   if bln == str(z): bln = ay[z-1]
                                readTime = timeNow.strftime('%H.%M')
                                readTime2 = hr
                                readTime3 = timeNow.strftime('%d') + "-" + bln + "-" + timeNow.strftime('%Y')
                                readTime4 = timeNow.strftime('%d') + " " + Ay + " " + timeNow.strftime('%Y')
                                contact = zarifoglu.getContact(sender)
                                gold√ßer√ßeve = ["https://i.pinimg.com/564x/10/11/77/10117768409773e3e96f463dce6825bf.jpg","https://i.pinimg.com/originals/5d/05/a1/5d05a11da9f1456b2139a76354adf86e.jpg","https://i.pinimg.com/originals/bf/26/5b/bf265b4dd3b00d63c047caba2021f5c2.jpg","https://i.pinimg.com/originals/c8/1b/61/c81b6104a51acc367f704c5bfc478073.jpg","https://im.haberturk.com/2020/02/25/ver1582647036/2595193_6649745890ed920638d90a3112b5f273.jpg","https://i.pinimg.com/1200x/16/c0/91/16c091361c23765954e494f972074dcd.jpg","https://i.pinimg.com/564x/50/be/f8/50bef88a0694ce812452fbd423d8cecd.jpg","https://i.pinimg.com/564x/9a/16/d1/9a16d147fe2c7ac23af9692c0096f23c.jpg","https://i.pinimg.com/564x/94/a7/d6/94a7d60ce4d618e97e50c359fa398026.jpg","https://i.pinimg.com/564x/23/59/21/2359215ee9fd67c761e321497006c277.jpg","https://i.pinimg.com/564x/15/b8/4e/15b84e889928de266ef380a6c679b56a.jpg","https://i.ibb.co/sKsmHxf/4563939586-e2bab0f524-o.jpg"]
                                hadis = ["**Oru√ß kalkandƒ±r.**","**Bedenin zekatƒ± oru√ßtur**","**Oru√ß sabrƒ±n yarƒ±sƒ±dƒ±r.**","**Oru√ß tutanƒ±n duasƒ± \nreddedilmez.**","**Oru√ß tutunuz,sƒ±hhat \nbulunuz**"]
                                true = True
                                data = {
                                    "type": "flex","altText": "üáπüá∑ —ÇœÖ—è–∫—î—É —Ç—îŒ±–º –≤œÉ—Ç üáπüá∑","contents":
{
  "type": "bubble",
  "size": "micro",
  "hero": {
    "type": "box",
    "layout": "vertical",
    "contents": [
      {
        "type": "image",
        "url": "{}".format(random.choice(gold√ßer√ßeve)),
        "size": "full",
        "aspectMode": "cover"
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "text",
            "text": "ƒ∞msak & ƒ∞ftar",
            "color": "#ffffff",
            "weight": "bold",
            "size": "md",
            "offsetStart": "20px"
          },
          {
            "type": "text",
            "text": "{}".format(str(dataz["respon"]["tempat"])),
            "color": "#ffffff",
            "weight": "bold",
            "offsetBottom": "5px",
            "offsetStart": "20px",
            "size": "md"
          },
          {
            "type": "text",
            "text": "{}".format(readTime4),
            "color": "#ff0000",
            "weight": "bold",
            "offsetBottom": "7px",
            "offsetStart": "20px",
            "size": "sm"
          },
          {
            "type": "text",
            "text": "ƒ∞msak",
            "offsetStart": "20px",
            "color": "#ffffff",
            "size": "sm",
            "offsetBottom": "7px",
            "weight": "bold"
          },
          {
            "type": "text",
            "text": "ƒ∞ftar",
            "offsetStart": "20px",
            "color": "#ffffff",
            "size": "sm",
            "offsetBottom": "7px",
            "weight": "bold"
          },
          {
            "type": "text",
            "text": "Hadis-i ≈ûerif:",
            "offsetStart": "20px",
            "color": "#ff0000",
            "size": "sm",
            "offsetBottom": "7px",
            "weight": "bold"
          },
          {
            "type": "text",
            "text": "{}".format(random.choice(hadis)),
            "offsetStart":"5px",
            "offsetEnd":"0px",
            "color": "#ffd700",
            "size": "sm",
            "offsetBottom": "7px",
            "weight": "bold",
            "wrap": true
          }
        ],
        "position": "absolute",
        "backgroundColor": "#00000090",
        "width": "300px",
        "height": "400px"
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "text",
            "text": "{}".format(str(data["respon"]["shubuh"])),
            "size": "xs",
            "color": "#ffffff",
            "weight": "bold",
            "offsetTop": "1px"
          },
          {
            "type": "text",
            "text": "{}".format(str(data["respon"]["maghrib"])),
            "color": "#ffffff",
            "size": "xs",
            "weight": "bold",
            "offsetTop": "2px"
          }
        ],
        "position": "absolute",
        "offsetStart": "90px",
        "offsetTop": "56px",
        "offsetBottom": "5px"
      }
    ],
    "position": "relative"
  }
}
                                }
                                sendTemplate(to, data)
								
                        elif cmd.startswith("corona "):
                            separate = text.split(" ")
                            number = text.replace(separate[0] + " ","")
                            url = "https://api.kawalcorona.com/"
                            with requests.session() as s:
                                r = s.get(url)
                                txt = "* C·¥è Ä·¥è…¥·¥Ä V·¥Ä·¥ã·¥ÄÍú±ƒ± *"
                                data=r.text
                                data=json.loads(r.text)
                                rest = data[int(number)-1]
                                res = rest["attributes"]
                                txt += "\n√ú ü·¥ã·¥á - {}".format(res["Country_Region"])
                                txt += "\nO…¥·¥Ä è ü·¥Ä…¥·¥çƒ±≈ü - {}".format(res["Confirmed"]) 
                                txt += "\nA·¥ã·¥õ…™“ì  - {}".format(res["Active"]) 
                                txt += "\n√ñ ü√º S·¥Ä èƒ±Íú±ƒ± - {}".format(res["Deaths"])  
                                txt += "\nK·¥ú Ä·¥õ·¥Ä Äƒ± ü·¥Ä…¥ - {}".format(res["Recovered"])  
                                #zarifoglu.sendMessage(to,txt)
                                corona = ["https://i.pinimg.com/564x/1e/bb/70/1ebb70dc41990b7abb11926531b41bbe.jpg","https://i.pinimg.com/564x/8b/b5/d3/8bb5d3ee10149629306a68e740894eef.jpg","https://cdn1.ntv.com.tr/gorsel/RFhUS86nqkKmixEnUKv5sg.jpg?width=1200&mode=crop&scale=both&v=20200319045218671","https://www.yeditepe.edu.tr/sites/default/files/styles/large/public/koronavirus_covid-19_rehberi.jpg?itok=3TwOHwKr","https://www.cambridgeindependent.co.uk/_media/img/HUT8LOIQ6YWOY7YX7L4E.jpg","https://i2.milimaj.com/i/milliyet/75/0x410/5e861c0b5542811804501a68.jpg","https://i2.milimaj.com/i/milliyet/75/0x0/5e81a9135542811ce4ebf21c.jpg","https://iaftm.tmgrup.com.tr/ebcfb3/632/314/0/70/1000/567?u=https://iftm.tmgrup.com.tr/2020/04/18/dunya-genelinde-corona-virusu-vaka-sayisi-kac-abdde-rekor-olum-sayisi-1587234614278.jpg","https://m.economictimes.com/thumb/msid-74665367,width-1200,height-900,resizemode-4,imgsize-980841/from-the-trumpet-shaped-protrusion-at-the-centre-of-a-daffodil-or-narcissus-to-a-part-of-a-cornice-with-a-vertical-face-to-the-most-popular-shape-of-chandeliers-corona-has-long-been-an-acceptable-part-of-society-.jpg","https://wpcdn.us-east-1.vip.tn-cloud.net/www.koamnewsnow.com/content/uploads/2020/03/medical-face-mask-with-the-word-coronavirus-on-it-1024x576.jpg","https://i.sozcu.com.tr/wp-content/uploads/2020/03/13/iecrop/korona-shutter_16_9_1584102946.jpg","https://www.savebutonu.com/wp-content/uploads/2020/01/maxresdefault-3.jpg"]
                                data = {
                                    "type": "flex","altText": "üáπüá∑ —ÇœÖ—è–∫—î—É —Ç—îŒ±–º –≤œÉ—Ç üáπüá∑","contents":
{
  "type": "bubble",
  "size": "micro",
  "hero": {
    "type": "box",
    "layout": "vertical",
    "contents": [
      {
        "type": "image",
        "url": "{}".format(random.choice(corona)),
        "size": "full",
        "aspectMode": "cover"
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "text",
            "text": "* C·¥è Ä·¥è…¥·¥Ä V·¥Ä·¥ã·¥ÄÍú±ƒ± *",
            "color": "#ffffff",
            "weight": "bold",
            "size": "md",
            "offsetStart": "20px"
          },
          {
            "type": "text",
            "text": "Bilgiler G√ºnceldir",
            "color": "#ffffff",
            "weight": "bold",
            "offsetBottom": "5px",
            "offsetStart": "20px",
            "size": "md"
          },
          {
            "type": "text",
            "text": "*Sosyal Mesafeyi Koru*",
            "color": "#ff0000",
            "weight": "bold",
            "offsetBottom": "7px",
            "offsetStart": "2px",
            "size": "sm"
          },
          {
            "type": "text",
            "text": "√ú ü·¥ã·¥á",
            "offsetStart": "20px",
            "color": "#ffffff",
            "size": "sm",
            "offsetBottom": "7px",
            "weight": "bold"
          },
          {
            "type": "text",
            "text": "Onaylƒ±",
            "offsetStart": "20px",
            "color": "#ffffff",
            "size": "sm",
            "offsetBottom": "7px",
            "weight": "bold"
          },
          {
            "type": "text",
            "text": "Aktif",
            "offsetStart": "20px",
            "color": "#ffffff",
            "size": "sm",
            "offsetBottom": "7px",
            "weight": "bold"
          },
          {
            "type": "text",
            "text": "√ñlen",
            "offsetStart": "20px",
            "color": "#ffffff",
            "size": "sm",
            "offsetBottom": "7px",
            "weight": "bold"
          },
          {
            "type": "text",
            "text": "ƒ∞yile≈üen",
            "offsetStart": "20px",
            "color": "#ffffff",
            "size": "sm",
            "offsetBottom": "7px",
            "weight": "bold"
          }
        ],
        "position": "absolute",
        "backgroundColor": "#00000090",
        "width": "300px",
        "height": "400px"
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "text",
            "text": "{}".format(res["Country_Region"]),
            "size": "xs",
            "color": "#ffffff",
            "weight": "bold",
            "offsetTop": "1px"
          },
          {
            "type": "text",
            "text": "{}".format(res["Confirmed"]),
            "color": "#ffffff",
            "size": "xs",
            "weight": "bold",
            "offsetTop": "2px"
          },
          {
            "type": "text",
            "text": "{}".format(res["Active"]),
            "color": "#ffffff",
            "size": "xs",
            "weight": "bold",
            "offsetTop": "3px"
          },
          {
            "type": "text",
            "text": "{}".format(res["Deaths"]),
            "color": "#ffffff",
            "size": "xs",
            "weight": "bold",
            "offsetTop": "4px"
          },
          {
            "type": "text",
            "text": "{}".format(res["Recovered"]),
            "color": "#ffffff",
            "size": "xs",
            "weight": "bold",
            "offsetTop": "4px"
          }
        ],
        "position": "absolute",
        "offsetStart": "90px",
        "offsetTop": "56px",
        "offsetBottom": "5px"
      }
    ],
    "position": "relative"
  }
}
                                }
                                sendTemplate(to, data)
############## MEDƒ∞A && INSTAGRAM && RESƒ∞M ##########################################
                        elif cmd.startswith("instaprofilev2 "):
                            username = removeCmd("instaprofilev2", text)
                            data = setInstagramTemplate(username)
                            if isinstance(data, dict):
                                sendTemplate(to, data)
                            else:
                                sendTemplate(to, data)
########################################################################<<<<<<<<<<<<<>>>>>>>>>>########################################################################
#=====================================================================
#                              \\  //
                    if text.lower().startswith("yenimention "):
                        anu = text.lower().replace("yenimention ","")
                        itu = str(settings["mentionall"])
                        settings["mentionall"] = str(anu).lower()
                        Myflex3(to, "Etiket anahtarƒ± deƒüi≈üti..")

                    if text.lower().startswith("change:me "):
                        anu = text.lower().replace("change:me ","")
                        itu = str(settings["me"])
                        settings["me"] = str(anu).lower()
                        zarifoglu.sendMessage(to, "Key me has been change...")
                    if text.lower().startswith("cpurge "):
                        anu = text.lower().replace("cpurge ","")
                        itu = str(settings["jskick1"])
                        settings["jskick1"] = str(anu).lower()
                        Myflex5(to, "Key has been change")
                    if text.lower().startswith("cbypass "):
                        anu = text.lower().replace("cbypass ","")
                        itu = str(settings["jskick"])
                        settings["jskick"] = str(anu).lower()
                        Myflex5(to, "Key has been change")
                    if text.lower().startswith("+ "):
                        if 'MENTION' in msg.contentMetadata.keys()!= None:
                            key = eval(msg.contentMetadata["MENTION"])
                            key1 = key["MENTIONEES"][0]["M"]
                            nama = str(text.split(' ')[1])
                            oa = "u5d854616fc8ea66893e7a85b7cb0b9f1"
                            zarifoglu.sendMessage(oa, "Addmid {}|{}".format(nama, key1))
                            zarifoglu.generateReplyMessage(msg.id)
                            zarifoglu.sendReplyMessage(msg.id, to, "Done")
                            zarifoglu.sendContact(to, "u5d854616fc8ea66893e7a85b7cb0b9f1")
                    if text.lower().startswith("- "):
                        if 'MENTION' in msg.contentMetadata.keys()!= None:
                            key = eval(msg.contentMetadata["MENTION"])
                            key1 = key["MENTIONEES"][0]["M"]
                            oa = "u5d854616fc8ea66893e7a85b7cb0b9f1"
                            zarifoglu.sendMessage(oa, "Delmid {}".format(key1))
                            zarifoglu.generateReplyMessage(msg.id)
                            zarifoglu.sendReplyMessage(msg.id, to, "Done")
                    if cmd == "chatbot on":
                        if sender in zarifogluMID or sender in chatbot["admin"]:
                            if to in chatbot["botMute"] or to in chatbot["botOff"]:
                                if to in chatbot["botMute"]:
                                    chatbot["botMute"].remove(to)
                                if to in chatbot["botOff"]:
                                    chatbot["botOff"].remove(to)
                                Myflex5(to, "Switched to normal mode")
                            else:
                                Myflex5(to, "bots is already actived")
                        else:
                            if to in chatbot["botOff"] and to not in chatbot["botMute"]:
                                chatbot["botOff"].remove(to)
                                Myflex5(to, "Switched to normal mode")
                            else:
                                zarifoglu.sendMessage(to, "Failed !")
########################################################################<<<<<<<<<<<<<>>>>>>>>>>########################################################################
#=====================================================================
#                              \\  //
                    if "/ti/g/" in msg.text.lower():
                        if settings["autoJoin"] == True or settings["autoJoin"] == False:
                            link_re = re.compile('(?:line\:\/|line\.me\/R)\/ti\/g\/([a-zA-Z0-9_-]+)?')
                            links = link_re.findall(text)
                            n_links = []
                            for l in links:
                                if l not in n_links:
                                   n_links.append(l)
                            for ticket_id in n_links:
                                group = zarifoglu.findGroupByTicket(ticket_id)
                                zarifoglu.acceptGroupInvitationByTicket(group.id,ticket_id)

                    for image in images:
                        if msg.text.lower() == image:
                            zarifoglu.generateReplyMessage(msg.id)
                            zarifoglu.sendReplyImage(msg.id, to, images[image])


                    for sticker in stickers:
                        if text.lower() == sticker:
                            sid = stickers[sticker]["STKID"]
                            spkg = stickers[sticker]["STKPKGID"]
                            sver = stickers[sticker]["STKVER"]
                            try:
                                sendSticker(to, msg._from, sver, spkg, sid)
                            except Exception as e:
                                sendSticker2(to, msg._from, sver, spkg, sid)

                    for contact in contacts:
                        if text.lower() == contact:
                            midd = contacts[contact]["mid"]
                            zarifoglu.sendContact(to, midd)

                    for sticker in stickers2:
                        try:
                            if text.lower() == sticker:
                                sid = stickers2[sticker]["STKID"]
                                spkg = stickers2[sticker]["STKPKGID"]
                                sver = stickers2[sticker]["STKVER"]
                                a = zarifoglu.shop.getProduct(packageID=int(spkg), language='ID', country='ID')
                                if a.hasAnimation == True:data = {"type": "template","altText": "{} sent a sticker.".format(zarifoglu.getProfile().displayName),"template": {"type": "image_carousel","columns": [{"imageUrl": "https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/IOS/sticker_animation@2x.png".format(sid),"size": "full","action": {"type": "uri","uri": "http://line.me/S/sticker/{}".format(spkg)}}]}}
                                else:data = {"type": "template","altText": "{} sent a sticker.".format(zarifoglu.getProfile().displayName),"template": {"type": "image_carousel","columns": [{"imageUrl": "https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/IOS/sticker@2x.png".format(sid),"size": "full","action": {"type": "uri","uri": "http://line.me/S/sticker/{}".format(spkg)}}]}}
                                sendTemplate(to,data)
                        except Exception as e:
                            print(e)

                    for sticker in stickers1:
                        if text.lower() == sticker:
                            sid = stickers1[sticker]["STKID"]
                            spkg = stickers1[sticker]["STKPKGID"]
                            data = {
                                "type": "flex",
                                "altText": settings["bayrak"],
                                "contents": {
                                   "type": "bubble",
                                   "hero": {
                                        "type": "image",
                                        "url": "https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/IOS/sticker.png;compress=true".format(sid),
                                        "size": "full",
                                        "aspectRatio": "1:1",
                                        "aspectMode": "fit",
                                        "action": {
                                            "type": "uri",
                                            "uri": "http://line.me/S/sticker/{}".format(spkg)
                                        }
                                    }
                                }
                            }
                            sendTemplate(to, data)
                    for txt in textsadd:
                        if text.lower() == txt:
                            img = textsadd[text.lower()]['CHAT']
                            group = zarifoglu.getGroup(to)
                            midMembers = [contact.mid for contact in group.members]
                            data = random.choice(midMembers)
                            zarifoglu.sendMessage(to, "{}".format(img))
#=====================================================================
#=====================================================================
                elif msg.contentType == 1:
                    if settings["changePicture"] == True and sender == zarifogluMID:
                        path = zarifoglu.downloadObjectMsg(msg_id, saveAs="tmp/pict.bin")
                        settings["changePicture"] = False
                        zarifoglu.updateProfilePicture(path)
                        Myflex5(to, "Type: Profile\n ‚å¨ Detail: Change Profile Picture\n ‚å¨ Status: Succes..")
                    if settings["changeCoverProfile"] == True:
                        path = zarifoglu.downloadObjectMsg(msg_id)
                        settings["changeCoverProfile"] = False
                        zarifoglu.updateProfileCover(path)
                        Myflex5(to, "Type:Profile\n ‚å¨ Detail: Change Home Photos\n ‚å¨ Status: Succes..")
                    if settings['changeProfileVideo']['status'] == True and sender == zarifogluMID:
                        path = zarifoglu.downloadObjectMsg(msg_id, saveAs="tmp/pict.bin")
                        if settings['changeProfileVideo']['stage'] == 1:
                            settings['changeProfileVideo']['picture'] = path
                            Myflex5(to, "Silahkan kirimkan video yang ingin anda jadikan profile")
                            settings['changeProfileVideo']['stage'] = 2
                        elif settings['changeProfileVideo']['stage'] == 2:
                            settings['changeProfileVideo']['picture'] = path
                            changeProfileVideo(to)
                            Myflex5(to, "Type: Profile\n ‚å¨ Detail: Change Video Profile\n ‚å¨ Status: Succes..")
                    if settings["addImage"]["status"] == True and sender == zarifogluMID:
                        path = zarifoglu.downloadObjectMsg(msg_id)
                        images[settings["addImage"]["name"]] = str(path)
                        f = codecs.open("ZarifKing/image.json","w","utf-8")
                        json.dump(images, f, sort_keys=True, indent=4, ensure_ascii=False)
                        Myflex5(to, " „Äå Picture „Äç\n ‚å¨ Detail: Add picture\n ‚å¨ Status: Succes added picture {} in list".format(str(settings["addImage"]["name"])))
                        settings["addImage"]["status"] = False
                        settings["addImage"]["name"] = ""
                    if msg.to in settings["fancy"]["foto1"]:
                        settings["fancy"]["foto1"] = zarifoglu.downloadObjectMsg(msg_id)
                        Myflex5(to, "Picture uploaded to fancy picture 1")
                    if msg.to in settings["fancy"]["foto2"]:
                        settings["fancy"]["foto2"] = zarifoglu.downloadObjectMsg(msg_id)
                        Myflex5(to, "Picture uploaded to fancy picture 2")
                    if msg.to in settings["fancy"]["foto3"]:
                        settings["fancy"]["foto3"] = zarifoglu.downloadObjectMsg(msg_id)
                        Myflex5(to, "Succes added picture to fancy picture")
                        settings["fancy"]["status"] = True
                        Myflex5(to, " „Äå Fancy Picture „Äç\nType: Profile\n ‚å¨ Status: Succes set picture\n ‚å¨ State: ENABLED..\nType: Fancypict off to DISABLED..")
                    if msg.toType == 2:
                        if to in settings["changeGroupPicture"]:
                            path = zarifoglu.downloadObjectMsg(msg_id, saveAs="tmp/video.bin")
                            settings["changeGroupPicture"].remove(to)
                            zarifoglu.updateGroupPicture(to, path)
                            Myflex5(to, "Type: Group\n ‚å¨ Detail: Update Group Picture\n ‚å¨ Status: Succes..")
                    if msg.toType == 2:
                        if to in settings["changeGroupPicture"]:
                            path = zarifoglu.downloadObjectMsg(msg_id, saveAs="tmp/video.bin")
                            settings["changeGroupPicture"].remove(to)
                            zarifoglu.updateGroupPicture(to, path)
                            Myflex5(to, "Type: Group\n ‚å¨ Detail: Update Group Picture\n ‚å¨ Status: Succes..")
                elif msg.contentType == 3:
                    if kimak["Addaudio"] == True and sender == zarifogluMID:
                      try:
                          print ("[ AUDIO ] SUCCES SAVE AUDIO")
                          fotoo = "https://obs.line-apps.com/talk/m/download.nhn?oid="+msg_id
                          r = zarifoglu.server.getContent(fotoo)
                          if r.status_code == 200:
                              path = os.path.join(os.path.dirname(__file__), 'Alldata/%s.mp3' % kimak["Audio"])
                              with open(path, 'wb') as fp:
                                  shutil.copyfileobj(r.raw, fp)
                              Myflex5(to, "Type: Add Voice\nStatus: Succes add audio : {}".format(str(kimak["Audio"])))
                          kimak["Audio"] = {}
                          kimak["Addaudio"] = False
                      except Exception as e:
                          zarifoglu.sendMessage(to, "ERROR\n{}".format(str(e)))
                elif msg.contentType == 2:
                    if settings['changeProfileVideo']['status'] == True and sender == zarifogluMID:
                        path = zarifoglu.downloadObjectMsg(msg_id)
                        if settings['changeProfileVideo']['stage'] == 1:
                            settings['changeProfileVideo']['video'] = path
                            Myflex5(to, "Type: Profile\n ‚å¨ Detail: Change Video Profile\n ‚å¨ Status: Send picture ~")
                            settings['changeProfileVideo']['stage'] = 2
                        elif settings['changeProfileVideo']['stage'] == 2:
                            settings['changeProfileVideo']['video'] = path
                            changeProfileVideo(to)
                elif msg.contentType == 7:
                    a = zarifoglu.shop.getProduct(packageID=int(msg.contentMetadata['STKPKGID']), language='ID', country='ID')
                    if settings["messageSticker"]["addStatus"] == True and sender == zarifogluMID:
                        name = settings["messageSticker"]["addName"]
                        if name != None and name in settings["messageSticker"]["listSticker"]:
                            settings["messageSticker"]["listSticker"][name] = {
                                "STKID": msg.contentMetadata["STKID"],
                                "STKVER": msg.contentMetadata["STKVER"],
                                "STKPKGID": msg.contentMetadata["STKPKGID"]
                            }
                            Myflex5(msg.to, " „Äå Sticker „Äç\nName: "+a.title+"\nSTKID: "+msg.contentMetadata['STKID']+"\nSTKPKGID: "+msg.contentMetadata['STKPKGID']+"\nSTKVER: "+msg.contentMetadata['STKVER'])
                        settings["messageSticker"]["addStatus"] = False
                        settings["messageSticker"]["addName"] = None
                        settings["messageSticker"]["listSticker"]["addSticker"]["status"] = True
                        settings['messageSticker']['listSticker']['readerSticker']['status'] = True
                        settings['messageSticker']['listSticker']['replySticker']['status'] = True
                    if settings["addSticker"]["status"] == True and sender == zarifogluMID:
                        stickers[settings["addSticker"]["name"]]["STKVER"] = msg.contentMetadata["STKVER"]
                        stickers[settings["addSticker"]["name"]]["STKID"] = msg.contentMetadata["STKID"]
                        stickers[settings["addSticker"]["name"]]["STKPKGID"] = msg.contentMetadata["STKPKGID"]
                        f = codecs.open('ZarifKing/sticker.json','w','utf-8')
                        json.dump(stickers, f, sort_keys=True, indent=4, ensure_ascii=False)
                        Myflex5(to, "Succes Add Sticker {}".format(str(settings["addSticker"]["name"])))
                        settings["addSticker"]["status"] = False
                        settings["addSticker"]["name"] = ""
                    if sets["messageStickerz"]["addStatusz"] == True:
                        name = sets["messageStickerz"]["addNamez"]
                        if name != None and name in sets["messageStickerz"]["listStickerz"]:
                            sets["messageStickerz"]["listStickerz"][name] = {
                                "STKID": msg.contentMetadata["STKID"],
                                "STKVER": msg.contentMetadata["STKVER"],
                                "STKPKGID": msg.contentMetadata["STKPKGID"]
                            }
                            Myflex5(to, "Success Added " + name)
                        sets["messageStickerz"]["addStatusz"] = False
                        sets["messageStickerz"]["addNamez"] = None
                    if sets["addStickerz"]["status"] == True:
                        anumu[sets["addStickerz"]["name"]]["STKVER"] = msg.contentMetadata["STKVER"]
                        anumu[sets["addStickerz"]["name"]]["STKID"] = msg.contentMetadata["STKID"]
                        anumu[sets["addStickerz"]["name"]]["STKPKGID"] = msg.contentMetadata["STKPKGID"]
                        f = codecs.open('stickertemp.json','w','utf-8')
                        json.dump(stickers, f, sort_keys=True, indent=4, ensure_ascii=False)
                        Myflex5(to, "Success Added sticker {}".format(str(sets["addStickerz"]["name"])))
                        sets["addStickerz"]["status"] = False
                        sets["addStickerz"]["name"] = ""
                if msg.contentType == 7:
                    if anyun["addTikel"]["status"] == True:
                        stickers2[anyun["addTikel"]["name"]]["STKID"] = msg.contentMetadata["STKID"]
                        stickers2[anyun["addTikel"]["name"]]["STKPKGID"] = msg.contentMetadata["STKPKGID"]
                        stickers2[anyun["addTikel"]["name"]]["STKVER"] = msg.contentMetadata["STKVER"]
                        f = codecs.open('ZarifKing/sticker2.json','w','utf-8')
                        json.dump(stickers2, f, sort_keys=True, indent=4, ensure_ascii=False)
                        Myflex5(to, "Success add sticker {}".format(str(anyun["addTikel"]["name"])))
                        anyun["addTikel"]["status"] = False
                        anyun["addTikel"]["name"] = ""
                if msg.contentType == 7:
                    if nissa["addTikel2"]["status"] == True and sender == zarifogluMID:
                        stickers1[nissa["addTikel2"]["name"]]["STKID"] = msg.contentMetadata["STKID"]
                        stickers1[nissa["addTikel2"]["name"]]["STKPKGID"] = msg.contentMetadata["STKPKGID"]
                        f = codecs.open('ZarifKing/sticker1.json','w','utf-8')
                        json.dump(stickers1, f, sort_keys=True, indent=4, ensure_ascii=False)
                        Myflex5(to, "Success add sticker {}".format(str(nissa["addTikel2"]["name"])))
                        nissa["addTikel2"]["status"] = False
                        nissa["addTikel2"]["name"] = ""
                if msg.contentType == 7:
                    a = zarifoglu.shop.getProduct(packageID=int(msg.contentMetadata['STKPKGID']), language='ID', country='ID')
                    if msg.to in wait["GROUP"]['AR']['S']:
                        if wait["GROUP"]['AR']['S'][msg.to]['AP'] == True:
                            wait["GROUP"]['AR']['S'][msg.to]['Sticker'] = msg.contentMetadata
                            Myflex5(msg.to, " „Äå Autorespon Sticker „Äç\nName: "+a.title+"\nSTKID: "+msg.contentMetadata['STKID']+"\nSTKPKGID: "+msg.contentMetadata['STKPKGID']+"\nSTKVER: "+msg.contentMetadata['STKVER'])
                            wait["GROUP"]['AR']['S'][msg.to]['AP'] = False
                    if msg.to in wait["GROUP"]['WM']['S']:
                        if wait["GROUP"]['WM']['S'][msg.to]['AP'] == True:
                            wait["GROUP"]['WM']['S'][msg.to]['Sticker'] = msg.contentMetadata
                            Myflex5(msg.to, " „Äå Welcome Sticker „Äç\nName: "+a.title+"\nSTKID: "+msg.contentMetadata['STKID']+"\nSTKPKGID: "+msg.contentMetadata['STKPKGID']+"\nSTKVER: "+msg.contentMetadata['STKVER'])
                            wait["GROUP"]['WM']['S'][msg.to]['AP'] = False
                    if msg.to in wait["GROUP"]['LM']['S']:
                        if wait["GROUP"]['LM']['S'][msg.to]['AP'] == True:
                            wait["GROUP"]['LM']['S'][msg.to]['Sticker'] = msg.contentMetadata
                            Myflex5(msg.to, " „Äå Leave Sticker „Äç\nName: "+a.title+"\nSTKID: "+msg.contentMetadata['STKID']+"\nSTKPKGID: "+msg.contentMetadata['STKPKGID']+"\nSTKVER: "+msg.contentMetadata['STKVER'])
                            wait["GROUP"]['LM']['S'][msg.to]['AP'] = False
                elif msg.contentType == 13:
                    if settings["addContact"]["status"] == True:
                        contacts[settings["addContact"]["name"]]["mid"] = msg.contentMetadata["mid"]
                        backupData()
                        Myflex5(to,"Contact successfully added to command {}.".format(str(settings["addContact"]["name"])))
                        settings["addContact"]["status"] = False
                        settings["addContact"]["name"] = ""
                    if undang["invite"] == True:
                        wonge = msg.contentMetadata["mid"]
                        zarifoglu.findAndAddContactsByMid(wonge)
                        zarifoglu.inviteIntoGroup(to, [wonge])
                        undang["invite"] = False
                elif msg.contentType == 14:
                    if hoho["savefile"] == True and sender == zarifogluMID:
                        try:
                             namafile = hoho["namafile"]
                             zarifoglu.downloadObjectMsg(msg_id,saveAs=namafile)
                             hoho["savefile"] = False
                             Myflex5(to, "Successful, the file has been uploaded")
                        except Exception as e:
                         	zarifoglu.sendMessage(to, str(e))
        if op.type == 55:
            #print ("[ 55 ] NOTIFIED READ MESSAGE")
            if op.param1 in settings["getReader"] and op.param2 not in settings["getReader"][op.param1]:
                #msgSticker = settings["messageSticker"]["listSticker"]["readerSticker"]
                #if msgSticker != None:
                    #sid = msgSticker["STKID"]
                   # spkg = msgSticker["STKPKGID"]
                   # sver = msgSticker["STKVER"]
                    #sendSticker(op.param1, op.param2, sver, spkg, sid)
                if "@!" in settings["goldReader"]:
                    msg = settings["goldReader"].split("@!")
                    sendMention2(op.param1, op.param2, msg[0], msg[1])
                else:
                    sendMention2(op.param1, op.param2, "", settings["goldReader"])
                settings["getReader"][op.param1].append(op.param2)
        if op.type == 55:
            try:
                Name = zarifoglu.getContact(op.param2).mid
                group = zarifoglu.getGroup(op.param1).name
                tz = pytz.timezone("Asia/Istanbul")
                timeNow = datetime.now(tz=tz)
                day = ["Sunday", "Monday", "Tuesday", "√áar≈üamba", "Thursday","Friday", "Saturday"]
                hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
                bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
                hr = timeNow.strftime("%A")
                bln = timeNow.strftime("%m")
                for i in range(len(day)):
                    if hr == day[i]: hasil = hari[i]
                for k in range(0, len(bulan)):
                    if bln == str(k): bln = bulan[k-1]
                readTime = timeNow.strftime('%H.%M')
                readTime2 = hr
                readTime3 = timeNow.strftime('%d') + "-" + bln + "-" + timeNow.strftime('%Y')
                seens["username"][Name] = "Son g√∂r√ºlme\nBu grupta ' " + group + " '\nSaat " + readTime + "\nG√ºn " + readTime2 + ", " + readTime3
                seens['find'][op.param2] = True
            except:
                pass
				
        if op.type == 55:
            if op.param1 in gold1["goldTemp"] and op.param2 not in gold1["goldTemp"][op.param1]:
                gold1["goldTemp"][op.param1].append(op.param2)
                if "@!" in settings["readerPesan"]:
                    contact = zarifoglu.getContact(op.param2)
                    cover = zarifoglu.getProfileCoverURL(op.param2)
                    gold = gold1["goldmesaj"]
                    data ={
                        "type": "flex","altText": settings["bayrak"],"contents": {"type": "carousel",
                        "contents": [
                        {"type": "bubble","size": "nano",
		                "body": {"type": "box","layout": "vertical","contents": [
		                {"type": "image","url": "https://obs.line-scdn.net/{}".format(contact.picturePath), "size": "full","aspectMode": "cover","aspectRatio": "2:3","gravity": "top"},
		                {"type": "box","layout": "vertical","contents": [{"type": "box","layout": "vertical","contents": [
		                {"type": "text","text": "{}".format(contact.displayName),"size": "xs","color": "{}".format(setbot["text"]),"weight": "bold"}]},{"type": "box","layout": "baseline","contents": [
		                {"type": "text","text": "{}".format(gold),"color": "#ffffffcc","gravity": "bottom","flex": 0,"size": "xs","align":"center","wrap":True}],"spacing": "sm"},
						{"type": "box","layout": "vertical","contents": [{"type": "box","layout": "baseline","contents": [{"type": "filler"},],"spacing": "sm"},],
		                "borderWidth": "0px","cornerRadius": "0px","spacing": "sm","borderColor": "#ffffff","margin": "sm","height": "30px"}],
		                "position": "absolute","offsetBottom": "0px","offsetStart": "0px","offsetEnd": "0px","backgroundColor": "#9C8E7Ecc","paddingAll": "5px","paddingTop": "2px"},{"type": "box","layout": "vertical","contents": [{
		                "type": "text","text": settings["bayrak"],"align": "center","size": "xxs","offsetTop": "1px","color":"{}".format(setbot["text"])}],
		                "position": "absolute","cornerRadius": "4px","offsetTop": "3px","backgroundColor": "{}".format(setbot["background"]),"offsetStart": "5px","height": "20px","width": "53px"
                            }],"paddingAll": "0px"}}]}}
                    sendTemplate(op.param1, data)
                    time.sleep(2)

        if op.type == 55:
            if op.param1 in tailah["siderTemp"] and op.param2 not in tailah["siderTemp"][op.param1]:
                tailah["siderTemp"][op.param1].append(op.param2)
                if "@!" in settings["readerPesan"]:
                    contact = zarifoglu.getContact(op.param2)
                    pesan = tailah["siderPesan"]
                    data={"type":"flex","altText":settings["bayrak"],"contents":{
  "type": "bubble",
  "body": {
    "type": "box",
    "layout": "vertical",
    "contents": [
      {
        "type": "text",
        "text": "READER MESSAGE",
        "size": "md",
        "color": "{}".format(setbot["text"]),
        "weight": "bold",
        "align": "center"
      },
      {
        "type": "box",
        "layout": "vertical",
        "contents": [
          {
            "type": "spacer"
          },
          {
            "type": "box",
            "layout": "vertical",
            "contents": [
              {
                "type": "separator",
                "color": "{}".format(setbot["separator"]),
                "margin": "md"
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "image",
                    "url": "https://obs.line-scdn.net/{}".format(contact.pictureStatus),
                    "align": "center",
                    "size": "xxl",
                    "aspectMode": "fit",
                    "aspectRatio": "2:1",
                    "action": {
                      "type": "uri",
                      "label": "action",
                      "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                    }
                  },
                  {
                    "type": "separator",
                    "color": "{}".format(setbot["background"]),
                    "margin": "lg"
                  },
                  {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                      {
                        "type": "text",
                        "text": "Hmm , {}".format(contact.displayName),
                        "size": "sm",
                        "color": "{}".format(setbot["text"]),
                        "weight": "bold",
                        "flex": 0,
                        "align": "center",
                        "wrap": True
                      }
                    ],
                    "spacing": "sm"
                  },
                  {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                      {
                        "type": "text",
                        "text": "{}".format(pesan),
                        "size": "sm",
                        "color": "{}".format(setbot["text"]),
                        "weight": "bold",
                        "flex": 0,
                        "align": "center",
                        "wrap": True
                      }
                    ],
                    "spacing": "sm"
                  }
                ]
              },
              {
                "type": "box",
                "layout": "vertical",
                "contents": [
                  {
                    "type": "separator",
                    "color": "{}".format(setbot["separator"]),
                    "margin": "lg"
                  },
                  {
                    "type": "box",
                    "layout": "horizontal",
                    "contents": [
                      {
                        "type": "box",
                        "layout": "horizontal",
                        "contents": [
                          {
                            "type": "image",
                            "url": "https://i.ibb.co/x3q7BVB/446345395df61fa529349402773b7bef.gif",
                            "size": "xxs",
                            "align": "start"
                          }
                        ],
                        "width": "25px",
                        "height": "25px",
                        "borderWidth": "2px",
                        "borderColor": "{}".format(setbot["separator"]),
                        "cornerRadius": "xl"
                      },
                      {
                        "type": "box",
                        "layout": "vertical",
                        "spacing": "sm",
                        "contents": [
                          {
                            "type": "text",
                            "text": settings["bayrak"],
                            "size": "md",
                            "color": "{}".format(setbot["text"]),
                            "align": "center",
                            "margin": "sm",
                            "action": {
                              "type": "uri",
                              "label": "action",
                              "uri": "https://line.me/ti/p/~" + zarifoglu.profile.userid
                            }
                          }
                        ]
                      }
                    ],
                    "margin": "lg"
                  }
                ],
                "spacing": "sm",
                "margin": "md"
              }
            ]
          }
        ],
        "margin": "sm"
      }
    ],
    "borderColor": "{}".format(setbot["separator"]),
    "cornerRadius": "xl",
    "borderWidth": "4px"
  },
  "styles": {
    "body": {
      "backgroundColor": "{}".format(setbot["background"])
    }
  }
}}
                    sendTemplate(op.param1,data)
                    time.sleep(2)
					
            if op.param1 in read["readPoint"]:
                _name = zarifoglu.getContact(op.param2).displayName
                tz = pytz.timezone("Asia/Istanbul")
                timeNow = datetime.now(tz=tz)
                timeHours = datetime.strftime(timeNow," (%H:%M)")
                read["readMember"][op.param1][op.param2] = str(_name) + str(timeHours)
        if op.type == 55:
           # print("[ 55 ] NOTIFIED READ MESSAGE")
            try:
                if op.param1 in wait['readPoint']:
                    if op.param2 in wait['ROM1'][op.param1]:
                        wait['setTime'][op.param1][op.param2] = op.createdTime
                    else:
                        wait['ROM1'][op.param1][op.param2] = op.param2
                        wait['setTime'][op.param1][op.param2] = op.createdTime
                        try:
                            if wait['lurkauto'] == True:
                                if len(wait['setTime'][op.param1]) % 5 == 0:
                                    anulurk(op.param1,wait)
                        except:pass
                elif op.param2 in wait['readPoints']:
                    wait['lurkt'][op.param1][op.param2][op.param3] = op.createdTime
                    wait['lurkp'][op.param1][op.param2][op.param3] = op.param2
                else:pass
            except:
                pass
        if op.type == 65:
            if settings["unsendMessage"] == True:
                zarifoglu.DetectUnsend(op, settings, chatbot)
        backupData()
    except Exception as error:
        logError(error)
        traceback.print_tb(error.__traceback__)


def run():
    while True:
        try:
#           delExpire()
            ops = zarifogluPoll.singleTrace(count=50)
            if ops != None:
                for op in ops:
                   loop.run_until_complete(zarifogluBot(op))
                   #zarifogluBot(op)
                   zarifogluPoll.setRevision(op.revision)
        except Exception as e:
            logError(e)
            
if __name__ == "__main__":
    run()